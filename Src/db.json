{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":1},{"_id":"themes/next/source/js/nav-toggle.js","path":"js/nav-toggle.js","modified":1},{"_id":"themes/next/source/js/motion_global.js","path":"js/motion_global.js","modified":1},{"_id":"themes/next/source/js/motion_fallback.js","path":"js/motion_fallback.js","modified":1},{"_id":"themes/next/source/js/lazyload.js","path":"js/lazyload.js","modified":1},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":1},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":1},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":1},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1},{"_id":"themes/next/source/images/bkdefault_avatar.jpg","path":"images/bkdefault_avatar.jpg","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/selection.json","path":"fonts/icon-linecons/selection.json","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","path":"fonts/icon-linecons/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","path":"fonts/icon-linecons/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","path":"fonts/icon-linecons/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","path":"fonts/icon-linecons/icomoon.eot","modified":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","path":"fonts/icon-icomoon/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","path":"fonts/icon-icomoon/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","path":"fonts/icon-icomoon/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","path":"fonts/icon-icomoon/icomoon.eot","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/selection.json","path":"fonts/icon-fifty-shades/selection.json","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","path":"fonts/icon-fifty-shades/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","path":"fonts/icon-fifty-shades/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","path":"fonts/icon-fifty-shades/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","path":"fonts/icon-fifty-shades/icomoon.eot","modified":1},{"_id":"themes/next/source/fonts/icon-feather/selection.json","path":"fonts/icon-feather/selection.json","modified":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","path":"fonts/icon-feather/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","path":"fonts/icon-feather/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","path":"fonts/icon-feather/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","path":"fonts/icon-feather/icomoon.eot","modified":1},{"_id":"themes/next/source/fonts/icon-default/selection.json","path":"fonts/icon-default/selection.json","modified":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","path":"fonts/icon-default/icomoon.woff","modified":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","path":"fonts/icon-default/icomoon.ttf","modified":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","path":"fonts/icon-default/icomoon.svg","modified":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","path":"fonts/icon-default/icomoon.eot","modified":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1},{"_id":"source/images/monobehaviour_flowchart.svg","path":"images/monobehaviour_flowchart.svg","modified":1},{"_id":"source/images/UNet/syncvarOutput.jpg","path":"images/UNet/syncvarOutput.jpg","modified":1},{"_id":"source/images/UNet/sendMessageUI.PNG","path":"images/UNet/sendMessageUI.PNG","modified":1},{"_id":"source/images/UNet/sendMessageOutput.PNG","path":"images/UNet/sendMessageOutput.PNG","modified":1},{"_id":"source/images/UNet/outputResult.PNG","path":"images/UNet/outputResult.PNG","modified":1},{"_id":"source/images/UNet/UNetDirections.jpg","path":"images/UNet/UNetDirections.jpg","modified":1},{"_id":"source/images/UNet/SimpleUI.PNG","path":"images/UNet/SimpleUI.PNG","modified":1},{"_id":"source/images/UNet/NetworkManagerInspector.PNG","path":"images/UNet/NetworkManagerInspector.PNG","modified":1},{"_id":"source/images/UNet/NetworkHost.png","path":"images/UNet/NetworkHost.png","modified":1},{"_id":"source/images/UNet/103Output.PNG","path":"images/UNet/103Output.PNG","modified":1},{"_id":"source/images/Shader/9/properties.png","path":"images/Shader/9/properties.png","modified":1},{"_id":"source/images/Shader/8/surfaceshader.png","path":"images/Shader/8/surfaceshader.png","modified":1},{"_id":"source/images/Shader/7/queue.png","path":"images/Shader/7/queue.png","modified":1},{"_id":"source/images/Shader/7/geometry_1.png","path":"images/Shader/7/geometry_1.png","modified":1},{"_id":"source/images/Shader/5/rgb.png","path":"images/Shader/5/rgb.png","modified":1},{"_id":"source/images/Shader/4/leftandRightHandCoordinate.png","path":"images/Shader/4/leftandRightHandCoordinate.png","modified":1},{"_id":"source/images/Shader/2/rendering-pipeline.psd","path":"images/Shader/2/rendering-pipeline.psd","modified":1},{"_id":"source/images/Shader/2/rendering-pipeline.jpg","path":"images/Shader/2/rendering-pipeline.jpg","modified":1},{"_id":"source/images/Shader/11/PipelineCullDepth.png","path":"images/Shader/11/PipelineCullDepth.png","modified":1},{"_id":"source/images/Shader/10/rgb.png","path":"images/Shader/10/rgb.png","modified":1},{"_id":"source/images/RockStar/rockstar.PNG","path":"images/RockStar/rockstar.PNG","modified":1},{"_id":"source/images/RockStar/gitAddRepo.PNG","path":"images/RockStar/gitAddRepo.PNG","modified":1},{"_id":"source/images/GitClient/windows_1.png","path":"images/GitClient/windows_1.png","modified":1},{"_id":"source/images/GitClient/mac_5.png","path":"images/GitClient/mac_5.png","modified":1},{"_id":"source/images/GitClient/mac_4.png","path":"images/GitClient/mac_4.png","modified":1},{"_id":"source/images/GitClient/mac_3.png","path":"images/GitClient/mac_3.png","modified":1},{"_id":"source/images/GitClient/mac_2.png","path":"images/GitClient/mac_2.png","modified":1},{"_id":"source/images/GitClient/mac_1.png","path":"images/GitClient/mac_1.png","modified":1},{"_id":"source/images/BrigthenImage/b2.png","path":"images/BrigthenImage/b2.png","modified":1},{"_id":"source/images/BrigthenImage/b1.png","path":"images/BrigthenImage/b1.png","modified":1}],"Cache":[{"_id":"source/_posts/AssetBundleAndABManage_1.md","shasum":"b94d4ca5a232dab85f627c5007e306f645eeab39","modified":1452575754000},{"_id":"source/_posts/AssetBundleAndABManage_2.md","shasum":"4204ce6a6f6cf4ae4e4cdaaceb837806f9c5c9d2","modified":1452575754000},{"_id":"source/_posts/AssetBundleAndABManage_3.md","shasum":"189e73df3c1dd194c8bd2c52b76120b18dd53b02","modified":1452575754000},{"_id":"source/_posts/BrightenTexture2D.md","shasum":"2cc8a14d92affa6d69559ea08860033c307fb830","modified":1452575754000},{"_id":"source/_posts/MonoBehavior event functions.md","shasum":"1a93500cccb5918b8ea91236139f167a883d24b7","modified":1452575754000},{"_id":"source/_posts/Release.md","shasum":"2d136242f8b90ba3fdf70bda0b917c5cce6d7f23","modified":1455628333000},{"_id":"source/_posts/ClosureInSwift.md","shasum":"b2844cccfc4fa5b7cef2e4a11c31d7330628ba15","modified":1452575754000},{"_id":"source/_posts/CSharp to Python Tutorial.md","shasum":"8a47b6d55bfaf411b9c3e9dbfbd4fc4091f40892","modified":1452575754000},{"_id":"source/_posts/Hello2016.md","shasum":"3fbcb37d699dd0cb76920ed68a7667f2712c0d67","modified":1452575754000},{"_id":"source/_posts/Shader_1.md","shasum":"3c1520116f00b2f085ff1440258e227923c3f265","modified":1452575754000},{"_id":"source/_posts/Shader_10.md","shasum":"3fdea93fc7a0ffc8006985a4677f8cb3b84f921a","modified":1452575754000},{"_id":"source/_posts/Shader_11.md","shasum":"24d4c1a767ec5bddf80601d3bb8bc380e51a6676","modified":1452575754000},{"_id":"source/_posts/Shader_2.md","shasum":"0adcea33bf9586ed1da963d536425545450e66a9","modified":1452575754000},{"_id":"source/_posts/Shader_3.md","shasum":"78f85acf36d60232b00bc1f34a18944bf264a550","modified":1452575754000},{"_id":"source/_posts/Shader_4.md","shasum":"825bbc460fad083d59f7dcbe43f7818980aec44e","modified":1452575754000},{"_id":"source/_posts/Shader_5.md","shasum":"db7cc08b46f43b09e9d9c110e06bc281c23efc74","modified":1452575754000},{"_id":"source/_posts/Shader_6.md","shasum":"df69a341acc1329ba714e3867698d9315ce128ff","modified":1452575754000},{"_id":"source/_posts/Shader_7.md","shasum":"18165055c80f6ce0c1fb58b51419a908799932f4","modified":1452575754000},{"_id":"source/_posts/Shader_8.md","shasum":"0b03e9ab5f315285729051ce5bbc855a305f9730","modified":1452575754000},{"_id":"source/_posts/Shader_9.md","shasum":"e3b59bf283f4ad6b27e822ac54b719a5bdb18917","modified":1452575754000},{"_id":"source/_posts/ShaderlabVSFAQ.md","shasum":"f733f514c3d7e090eb1c0aeef02d0cf7429f2c5a","modified":1452575754000},{"_id":"source/_posts/UNet_2.md","shasum":"c89e7bbd94e0aff42d8e134a9076f7693adb6252","modified":1452575754000},{"_id":"source/_posts/UNet_3.md","shasum":"7ef4ec25d511c8fa5659cb41fb88d7101a89290f","modified":1452575754000},{"_id":"source/_posts/UNet_4.md","shasum":"67232d03b707725374a85dd166f3ba093500efa6","modified":1452575754000},{"_id":"source/_posts/UNet_5.md","shasum":"891f9167c2d2ee4b04225747666545b3f1288ea3","modified":1452575754000},{"_id":"source/_posts/UNet_6.md","shasum":"7aa57448e10f55ee78578da49c5925da925fd5c1","modified":1452575754000},{"_id":"source/_posts/VSTips.md","shasum":"5db008d91e47bcbf0da9ba88259b1c7f2f3fde23","modified":1452575754000},{"_id":"source/_posts/Why I start ShaderlabVS.md","shasum":"470f6e9de3a13f916f25d3bdff54d8587abf9796","modified":1452575754000},{"_id":"source/_posts/UserGithubClientForNonGithubRepos.md","shasum":"4d28b5a2cf278335d388cb3e50950f46ef4dff98","modified":1452575754000},{"_id":"source/_posts/Xcode download.md","shasum":"260ebf488984676838d6e564da3cc63c2ecebf6b","modified":1452575754000},{"_id":"source/_posts/cirleImageInUnity3D.md","shasum":"12934284338d375b5c230e48740f64f6bdfe85cc","modified":1452575754000},{"_id":"source/_posts/rockstar.md","shasum":"2d09192c868b872af82a14d399568b739069dae3","modified":1452575754000},{"_id":"source/_posts/about Unity3D editor.md","shasum":"7a63c29f301f239e9cdbf7a55454813a0be35b81","modified":1452575754000},{"_id":"source/_posts/uNET_1.md","shasum":"87506c9f45f81e22a5a5c1153f0c9e60180744b2","modified":1452575754000},{"_id":"source/categories/index.md","shasum":"ee0b875f29a453a821bb02a0986a4634369bed88","modified":1452575754000},{"_id":"source/about/index.md","shasum":"cedc1ac792279b36202d96bfc0bb619ce63aaa8b","modified":1452575754000},{"_id":"source/images/BrigthenImage/b1.png","shasum":"c2af2f61d9fd673a0afc7d6117491d3c2b21a115","modified":1452575754000},{"_id":"source/images/BrigthenImage/b2.png","shasum":"e509394ce126b33aacacf87972dbf075078da93d","modified":1452575754000},{"_id":"source/images/RockStar/gitAddRepo.PNG","shasum":"ad342c726f61606a4fe5c817e30111f861515451","modified":1452575754000},{"_id":"source/images/RockStar/rockstar.PNG","shasum":"b2ce9740b8b8b273ccb76e4699fbb43dc47ad98b","modified":1452575754000},{"_id":"source/images/Shader/11/PipelineCullDepth.png","shasum":"16dae527c9563c21d867077ccaff2d00edfe286e","modified":1452575754000},{"_id":"source/images/Shader/5/rgb.png","shasum":"796652994cb1bf390d931acdc252ec5194556415","modified":1452575754000},{"_id":"source/images/Shader/7/geometry_1.png","shasum":"7ee904bceedd51543229ef55282953c4f3a0312f","modified":1452575754000},{"_id":"source/images/Shader/7/queue.png","shasum":"50b25eaa1d387e544b1c2460fb98f8b91627c768","modified":1452575754000},{"_id":"source/images/Shader/8/surfaceshader.png","shasum":"8edbb5f7256edb951905f6fb6a14a7510818b308","modified":1452575754000},{"_id":"source/images/Shader/9/properties.png","shasum":"0520a6a703e348e0ea6e71a95fbae797f87b7d6c","modified":1452575754000},{"_id":"source/images/UNet/103Output.PNG","shasum":"ec3058361c60b2eb45dc5fe45b360f361822d451","modified":1452575754000},{"_id":"source/images/UNet/NetworkHost.png","shasum":"d01f13c3d80c1e8f5347eb9cf3c9615d182ced7c","modified":1452575754000},{"_id":"source/images/UNet/NetworkManagerInspector.PNG","shasum":"4ab531307a23cef93bb8688711d17db5e479c8c7","modified":1452575754000},{"_id":"source/images/UNet/SimpleUI.PNG","shasum":"4c7022c6535c7fc12f8ee082e21fc9fd3d9e05b9","modified":1452575754000},{"_id":"source/images/UNet/outputResult.PNG","shasum":"3e37819c89ba567f75608ea80c9e9c96ffe3fa5c","modified":1452575754000},{"_id":"source/images/UNet/sendMessageOutput.PNG","shasum":"d93a9856340b79e0b7b26c1b69e3653806ace60c","modified":1452575754000},{"_id":"source/images/UNet/sendMessageUI.PNG","shasum":"d10a5b1a76375148aa6f3eb86365d85ded805234","modified":1452575754000},{"_id":"source/images/UNet/syncvarOutput.jpg","shasum":"22ad941c9ed40317d2459415e590836f8af665d1","modified":1452575754000},{"_id":"source/tags/index.md","shasum":"baf73ea0495b8c9c4d0bffedc12542bd51e0a574","modified":1452575754000},{"_id":"source/images/GitClient/mac_1.png","shasum":"e90915cb86344bc1868f3db0d1e7f847e1247851","modified":1452575754000},{"_id":"source/images/GitClient/mac_4.png","shasum":"a93e65742ea905f1d8f119f4e8735e33537a9844","modified":1452575754000},{"_id":"source/images/GitClient/windows_1.png","shasum":"5a9313fd3b4158d0573f9339703f374bbaaf35c8","modified":1452575754000},{"_id":"source/images/Shader/2/rendering-pipeline.jpg","shasum":"fa839805dfbd218d21744bc85295674b1dcaabe5","modified":1452575754000},{"_id":"source/images/Shader/10/rgb.png","shasum":"e506873d09cc3f67db7dda804ff363007c784aa9","modified":1452575754000},{"_id":"source/images/UNet/UNetDirections.jpg","shasum":"b279c55c0302cfeb07320f7f56a70a2a433948ca","modified":1452575754000},{"_id":"source/images/GitClient/mac_2.png","shasum":"56602b92fb9550bfb65f065430f4096e2851720d","modified":1452575754000},{"_id":"source/images/GitClient/mac_3.png","shasum":"7f611449e16814fb158d7afe647dc8a975da1ff2","modified":1452575754000},{"_id":"source/images/Shader/4/leftandRightHandCoordinate.png","shasum":"afd92e99caeed3f938d99b60533587c9375a107e","modified":1452575754000},{"_id":"themes/next/source/css/_common/_page/home.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452575754000},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452575754000},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452575754000},{"_id":"themes/next/source/css/_mixins/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452575754000},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452575754000},{"_id":"themes/next/source/css/_variables/default.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452575754000},{"_id":"source/images/GitClient/mac_5.png","shasum":"13ef02faa3f67f2a5ccbe169014989411f17ebd7","modified":1452575754000},{"_id":"source/images/Shader/2/rendering-pipeline.psd","shasum":"a20629b16c145e1629b8c52b061e5257d8aad88a","modified":1452575754000},{"_id":"themes/next/README.en.md","shasum":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1452575754000},{"_id":"themes/next/README.md","shasum":"3319de8565699fc9642f76c41ee96b50f2234b6a","modified":1452575754000},{"_id":"themes/next/_config.yml","shasum":"aff1622d06f71ef796b841f4cf1f34ea1a2cd30f","modified":1452575754000},{"_id":"themes/next/bower.json","shasum":"c27f03e42e91a205f1b2acbcf562f8b66e5a23c6","modified":1452575754000},{"_id":"themes/next/languages/de.yml","shasum":"7a8de0e5665c52a1bf168c1e7dd222c8a74fb0ab","modified":1452575754000},{"_id":"themes/next/languages/default.yml","shasum":"7e65ef918f16d0189055deb5f1616b9dedcb1920","modified":1452575754000},{"_id":"themes/next/languages/en.yml","shasum":"7e65ef918f16d0189055deb5f1616b9dedcb1920","modified":1452575754000},{"_id":"themes/next/languages/fr-FR.yml","shasum":"6d097445342a9fb5235afea35d65bf5271b772f0","modified":1452575754000},{"_id":"themes/next/languages/pt.yml","shasum":"737225eee4b91f64db61742ce3f4ab4e8c039286","modified":1452575754000},{"_id":"themes/next/languages/ru.yml","shasum":"b4a827b9ddac9d5f6dca096fe513aeafb46a3e93","modified":1452575754000},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"8af76df5557561050a950bdd7091d3bb3939c5c0","modified":1452575754000},{"_id":"themes/next/languages/zh-tw.yml","shasum":"8897a06e521b36c7a1226c72057c8357611eded8","modified":1452575754000},{"_id":"themes/next/languages/zh-hk.yml","shasum":"3fc38103c9efa6f6c37149adbddb014ff85ec849","modified":1452575754000},{"_id":"themes/next/layout/_layout.swig","shasum":"797aa7f861793859e15d8e65bbb18e0e537efea8","modified":1452575754000},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"9032ae9056cb19b4c2d069d66ead7abf828f9922","modified":1452575754000},{"_id":"themes/next/layout/_macro/post.swig","shasum":"b3cd721e5100991a0fa85d966afbf22f7b0d62ef","modified":1452575754000},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"970a669aae1889d37b2028d174d9d45e88dc0e4f","modified":1452575754000},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"81a3e9b17b633d795d1f0217db6eb38eda57087d","modified":1452575754000},{"_id":"themes/next/layout/_partials/head.swig","shasum":"c6f0d2c77f41a10e661177972195905116b175c1","modified":1452575754000},{"_id":"themes/next/layout/_partials/header.swig","shasum":"7450eb2513622ea4d59a3a7881816ce1c13ffa84","modified":1452575754000},{"_id":"themes/next/layout/_partials/old-browsers.swig","shasum":"dbbfea810bf3a2ed9c83b9a6683037175aacfc67","modified":1452575754000},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1452575754000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"00c2b49f6289198b0b2b4e157e4ee783277f32a7","modified":1452575754000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"eefe2388ff3d424694045eda21346989b123977c","modified":1452575754000},{"_id":"themes/next/layout/_partials/search.swig","shasum":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1452575754000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1452575754000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"63315fcf210799f894208c9f512737096df84962","modified":1452575754000},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","shasum":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1452575754000},{"_id":"themes/next/layout/_scripts/analytics/facebook-sdk.swig","shasum":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1452575754000},{"_id":"themes/next/layout/_scripts/analytics.swig","shasum":"33ca06b9bd9a15a19432d5396b85bd319f017319","modified":1452575754000},{"_id":"themes/next/layout/_scripts/baidushare.swig","shasum":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1452575754000},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","shasum":"85295f126836b95f0837d03e58228bb3cf8c4490","modified":1452575754000},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","shasum":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1452575754000},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","shasum":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1452575754000},{"_id":"themes/next/layout/_scripts/fancy-box.swig","shasum":"41b4ff1446060c88c33bf666a32277dcf12129f0","modified":1452575754000},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","shasum":"06b6cfaa9f2e05a9b0e8eb7c6d37cca92bcb9c77","modified":1452575754000},{"_id":"themes/next/layout/_scripts/helpers.swig","shasum":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1452575754000},{"_id":"themes/next/layout/_scripts/mathjax.swig","shasum":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1452575754000},{"_id":"themes/next/layout/_scripts/motion.swig","shasum":"817705bfd1a1282cb6bf59094afe507e11455aa0","modified":1452575754000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"b63ef233886538f30ced60344ac15d25e5f3e0af","modified":1452575754000},{"_id":"themes/next/layout/_scripts/tinysou.swig","shasum":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1452575754000},{"_id":"themes/next/layout/category.swig","shasum":"d6b3e1dc5e0b8deade9a084c463126e70188ee9b","modified":1452575754000},{"_id":"themes/next/layout/archive.swig","shasum":"0c3ce594759f347ea90a4ce592a7a18e2ae4cc5c","modified":1452575754000},{"_id":"themes/next/layout/post.swig","shasum":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1452575754000},{"_id":"themes/next/layout/page.swig","shasum":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1452575754000},{"_id":"themes/next/scripts/merge-configs.js","shasum":"dfd147d1317e56d283f5e779f00608e913603b51","modified":1452575754000},{"_id":"themes/next/layout/index.swig","shasum":"fdc801f0da71a2eb205ce9c0b12f156b219fdc9c","modified":1452575754000},{"_id":"themes/next/scripts/tags/center-quote.js","shasum":"535fc542781021c4326dec24d8495cbb1387634a","modified":1452575754000},{"_id":"themes/next/scripts/tags/full-image.js","shasum":"6329dc1815721050fd4c24a8accd8f4cbdb52330","modified":1452575754000},{"_id":"themes/next/scripts/tags/group-pictures.js","shasum":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1452575754000},{"_id":"themes/next/layout/tag.swig","shasum":"aab44af54fcbc66fea4ad12b2767ffca3eadd451","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/blockquote-center.styl","shasum":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/buttons.styl","shasum":"81063e0979f04a0f9af37f321d7321dda9abf593","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","shasum":"88cd66910260006aa8e9e795df4948d4b67bfa11","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/comments.styl","shasum":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","shasum":"c307f1e4827d7cb82816a5f9de109ae14ed4199c","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/gallery.styl","shasum":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/group-pictures.styl","shasum":"1ee40743000173495728855f734081eb2b6167cc","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","shasum":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","shasum":"6750b61236eb359028da8f2c4765f7c89b03dc9a","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/pagination.styl","shasum":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","shasum":"494bed4c864b3a98f443cba6793523384f6f8d12","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","shasum":"40b593134bf96d1d6095b3439d47820659d7f10b","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/posts.styl","shasum":"c3cbb56b3fc836af28db094da30ba74ff58245cd","modified":1452575754000},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","shasum":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1452575754000},{"_id":"themes/next/source/css/_common/_core/base.styl","shasum":"920c4de5e19faa8fcaff3c5f585af41f4f553cbf","modified":1452575754000},{"_id":"themes/next/source/css/_common/_core/helpers.styl","shasum":"d339d114e52a9abbc797ec236a8a770c29e288a6","modified":1452575754000},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","shasum":"1f8acb3331300eec696a09e7859e11f191e16d7f","modified":1452575754000},{"_id":"themes/next/source/css/_common/_core/normalize.styl","shasum":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1452575754000},{"_id":"themes/next/source/css/_common/_core/tables.styl","shasum":"5f766cf26f966dbf9dcfe681f40ab9032e3e8a08","modified":1452575754000},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","shasum":"8b809aef383bebaeb3f282b47675f3a364ce3569","modified":1452575754000},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","shasum":"80413afacfa656322100ce1900fed1ebcd8f8f44","modified":1452575754000},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","shasum":"249f75bafa26b99d272352c0646e7497ea680b39","modified":1452575754000},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","shasum":"ec3f86739bede393cafcd3e31052c01115ae20d6","modified":1452575754000},{"_id":"themes/next/source/css/_common/_page/archive.styl","shasum":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1452575754000},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","shasum":"9cdbedb3627ac941cfb063b152abe5a75c3c699a","modified":1452575754000},{"_id":"themes/next/source/css/_common/_page/categories.styl","shasum":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1452575754000},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","shasum":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1452575754000},{"_id":"themes/next/source/css/_common/_section/body.styl","shasum":"ca1a4766cbe25baac757c6b47a4858d221afdc40","modified":1452575754000},{"_id":"themes/next/source/css/_common/_section/footer.styl","shasum":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1452575754000},{"_id":"themes/next/source/css/_common/_section/header.styl","shasum":"e351f1ebc0d3c63e3443bcba3a34677b06c37455","modified":1452575754000},{"_id":"themes/next/source/css/_common/_section/layout.styl","shasum":"03ae7b808dde9065412968aa69916162e790455d","modified":1452575754000},{"_id":"themes/next/source/css/_common/_section/media.styl","shasum":"fa9809d2ecc753cf32f70803c1d0821c405211f4","modified":1452575754000},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","shasum":"049029feeed1b9ea133c518a49c4438bab39b467","modified":1452575754000},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","shasum":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1452575754000},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","shasum":"edaae01f7232c3fef9bf32ff1bdcf8a04d1aa6cd","modified":1452575754000},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1452575754000},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1452575754000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","shasum":"d50c2a9ae363d26ed2e9bc226a9dc7abeb9ace1b","modified":1452575754000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","shasum":"1631a430655eadb485574d1a9bedd49460988b11","modified":1452575754000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","shasum":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1452575754000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","shasum":"5a8036fc61207ca0fe38c9782ed2f686fbf764be","modified":1452575754000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","shasum":"b7366f28bd7902bfc1dce24f2bd5ae5439fb6e2f","modified":1452575754000},{"_id":"themes/next/source/css/_schemes/default/_logo.styl","shasum":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1452575754000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"fc7d96b897290dbd93bc8c515a2058fc4c374ea7","modified":1452575754000},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","shasum":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1452575754000},{"_id":"themes/next/source/css/_schemes/default/_search.styl","shasum":"c524bccdc554349106d1c8be9c3f275d4c0d4281","modified":1452575754000},{"_id":"themes/next/source/css/_schemes/default/index.styl","shasum":"159464cb8a7e01e32db9ec70dec391ec70a72f9c","modified":1452575754000},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"9f8791860cc1ca724d2dfe609e8cd6abc44d6926","modified":1452575754000},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"403ec86631ab907f976284bc1a6c53a9b3e23a21","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","shasum":"90763e97be18be78e65749075225cceeddc6fa8a","modified":1452575754000},{"_id":"themes/next/source/css/main.styl","shasum":"56dacee56c5eaa4b2676d196452314fb50f758aa","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","shasum":"f92ad8cddc250f0bb5ca466fca95d321987e127e","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","shasum":"c093408e6030221cafc1f79d897f1fb5283c1178","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","shasum":"dbe0368f2a65d87b13234cfea29d9783892fc7a8","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-default/selection.json","shasum":"dc07c29f687315f9458f6b251c214768af865fb2","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","shasum":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","shasum":"b2bbae4b613403cf61ad25037913378da1c07b8f","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","shasum":"d5eb756eefda9b454dcb23c2b1cefd4051d18d41","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","shasum":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-feather/selection.json","shasum":"06ea91e3f98ebe1080087acad4356802bc5b6ebf","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","shasum":"da86ba5df72d1288de9e9633e5f528062dd427d5","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","shasum":"1a4afd739e1f8eb8d430dbdd29e36a9999802e8d","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","shasum":"72fe82e1f3db52414eed706952d385af241cb196","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","shasum":"4de6a74f523dee33d95dde61caae5809f9a5d448","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-fifty-shades/selection.json","shasum":"fdd09098d1c3688e2c88cf33fd51e76b383b6d7f","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","shasum":"e316347805eb93425faa678611c5e42a7152da8f","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","shasum":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","shasum":"e2d7f040428a632f3c50bfa94083b759936effc2","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","shasum":"078068206684e4f185b0187ad3cee16f54a287d7","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","shasum":"808eaf7d61f7e67c76976265c885e79c36920f0b","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","shasum":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8","modified":1452575754000},{"_id":"themes/next/source/fonts/icon-linecons/selection.json","shasum":"db4ce25d31449ecc6685b32e145252103967bb5c","modified":1452575754000},{"_id":"themes/next/source/images/bkdefault_avatar.jpg","shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc","modified":1452575754000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1452575754000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1452575754000},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1452575754000},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1452575754000},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1452575754000},{"_id":"themes/next/source/images/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1452575754000},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1452575754000},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1452575754000},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1452575754000},{"_id":"themes/next/source/images/quote-l.svg","shasum":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1452575754000},{"_id":"themes/next/source/images/quote-r.svg","shasum":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1452575754000},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1452575754000},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1452575754000},{"_id":"themes/next/source/js/fancy-box.js","shasum":"62d38913d8e8a5736ecc48a0b343f67e86a0ae32","modified":1452575754000},{"_id":"themes/next/source/js/helpers.js","shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1452575754000},{"_id":"themes/next/source/js/hook-duoshuo.js","shasum":"c5db82a2549b6be51e58a69a6f1c2e5afef5a20e","modified":1452575754000},{"_id":"themes/next/source/js/lazyload.js","shasum":"b92e9acdc7afc15468314c03f4a643b0c93944cf","modified":1452575754000},{"_id":"themes/next/source/js/motion_fallback.js","shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1452575754000},{"_id":"themes/next/source/js/motion_global.js","shasum":"036fcedab9378eb41719838995ce7baf754e3457","modified":1452575754000},{"_id":"themes/next/source/js/nav-toggle.js","shasum":"78b59f1beb12adea0d7f9bcf4377cb699963f220","modified":1452575754000},{"_id":"themes/next/source/js/ua-parser.min.js","shasum":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1452575754000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1452575754000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1452575754000},{"_id":"themes/next/source/vendors/fastclick/README.md","shasum":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1452575754000},{"_id":"themes/next/source/vendors/fastclick/bower.json","shasum":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1452575754000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","shasum":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1452575754000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1452575754000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","shasum":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1452575754000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","shasum":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1452575754000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","shasum":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1452575754000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","shasum":"0189d278706509412bac4745f96c83984e1d59f4","modified":1452575754000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1452575754000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1452575754000},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1452575754000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1452575754000},{"_id":"themes/next/test/helpers.js","shasum":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1452575754000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1452575754000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1452575754000},{"_id":"themes/next/test/intern.js","shasum":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1452575754000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1452575754000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","shasum":"0112e96f327d413938d37c1693806f468ffdbace","modified":1452575754000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1452575754000},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1452575754000},{"_id":"source/images/monobehaviour_flowchart.svg","shasum":"3db5978b9715b026ec3a3715a9904bccdefbe36c","modified":1452575754000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1452575754000},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1452575754000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1452575754000},{"_id":"public/vendors/velocity/velocity.ui.min.js","modified":1455628397653,"shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908"},{"_id":"public/vendors/velocity/velocity.ui.js","modified":1455628397659,"shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df"},{"_id":"public/vendors/velocity/velocity.min.js","modified":1455628397661,"shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6"},{"_id":"public/vendors/velocity/velocity.js","modified":1455628397664,"shasum":"9f08181baea0cc0e906703b7e5df9111b9ef3373"},{"_id":"public/vendors/velocity/bower.json","modified":1455628397666,"shasum":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409"},{"_id":"public/vendors/jquery/index.js","modified":1455628397668,"shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1455628397672,"shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1455628397676,"shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1455628397678,"shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1455628397681,"shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1455628397685,"shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6"},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","modified":1455628397687,"shasum":"0112e96f327d413938d37c1693806f468ffdbace"},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","modified":1455628397690,"shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22"},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","modified":1455628397692,"shasum":"0189d278706509412bac4745f96c83984e1d59f4"},{"_id":"public/vendors/font-awesome/css/font-awesome.css","modified":1455628397693,"shasum":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7"},{"_id":"public/vendors/font-awesome/bower.json","modified":1455628397694,"shasum":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad"},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","modified":1455628397696,"shasum":"69a4c537d167b68a0ccf1c6febd138aeffca60d6"},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","modified":1455628397698,"shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18"},{"_id":"public/vendors/fastclick/lib/fastclick.js","modified":1455628397702,"shasum":"06cef196733a710e77ad7e386ced6963f092dc55"},{"_id":"public/vendors/fastclick/bower.json","modified":1455628397703,"shasum":"4dcecf83afddba148464d5339c93f6d0aa9f42e9"},{"_id":"public/vendors/fastclick/README.html","modified":1455628397717,"shasum":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da"},{"_id":"public/vendors/fastclick/LICENSE","modified":1455628397725,"shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","modified":1455628397727,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","modified":1455628397730,"shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","modified":1455628397731,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1455628397735,"shasum":"53e194f4a72e649c04fb586dd57762b8c022800b"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1455628397737,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1455628397739,"shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1455628397741,"shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1455628397742,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1455628397744,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","modified":1455628397745,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","modified":1455628397746,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","modified":1455628397747,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","modified":1455628397750,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","modified":1455628397751,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/vendors/fancybox/source/blank.gif","modified":1455628397754,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/js/ua-parser.min.js","modified":1455628397756,"shasum":"acf0ee6a47ffb7231472b56e43996e3f947c258a"},{"_id":"public/js/nav-toggle.js","modified":1455628397757,"shasum":"78b59f1beb12adea0d7f9bcf4377cb699963f220"},{"_id":"public/js/motion_global.js","modified":1455628397759,"shasum":"036fcedab9378eb41719838995ce7baf754e3457"},{"_id":"public/js/motion_fallback.js","modified":1455628397760,"shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e"},{"_id":"public/js/lazyload.js","modified":1455628397761,"shasum":"b92e9acdc7afc15468314c03f4a643b0c93944cf"},{"_id":"public/js/hook-duoshuo.js","modified":1455628397762,"shasum":"c5db82a2549b6be51e58a69a6f1c2e5afef5a20e"},{"_id":"public/js/helpers.js","modified":1455628397763,"shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335"},{"_id":"public/js/fancy-box.js","modified":1455628397764,"shasum":"62d38913d8e8a5736ecc48a0b343f67e86a0ae32"},{"_id":"public/js/bootstrap.scrollspy.js","modified":1455628397765,"shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625"},{"_id":"public/images/searchicon.png","modified":1455628397766,"shasum":"67727a6a969be0b2659b908518fa6706eed307b8"},{"_id":"public/images/quote-r.svg","modified":1455628397769,"shasum":"e60ae504f9d99b712c793c3740c6b100d057d4ec"},{"_id":"public/images/quote-l.svg","modified":1455628397770,"shasum":"94e870b4c8c48da61d09522196d4dd40e277a98f"},{"_id":"public/images/placeholder.gif","modified":1455628397772,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/loading.gif","modified":1455628397774,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/cc-zero.svg","modified":1455628397776,"shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"public/images/cc-by.svg","modified":1455628397777,"shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"public/images/cc-by-sa.svg","modified":1455628397780,"shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"public/images/cc-by-nd.svg","modified":1455628397781,"shasum":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"public/images/cc-by-nc.svg","modified":1455628397782,"shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"public/images/cc-by-nc-sa.svg","modified":1455628397790,"shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"public/images/cc-by-nc-nd.svg","modified":1455628397791,"shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"public/images/bkdefault_avatar.jpg","modified":1455628397793,"shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc"},{"_id":"public/fonts/icon-linecons/selection.json","modified":1455628397795,"shasum":"68da6ea1b3ab9355d42694bf5745071cdefa4a65"},{"_id":"public/fonts/icon-linecons/icomoon.woff","modified":1455628397797,"shasum":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8"},{"_id":"public/fonts/icon-linecons/icomoon.ttf","modified":1455628397798,"shasum":"078068206684e4f185b0187ad3cee16f54a287d7"},{"_id":"public/fonts/icon-linecons/icomoon.svg","modified":1455628397800,"shasum":"808eaf7d61f7e67c76976265c885e79c36920f0b"},{"_id":"public/fonts/icon-linecons/icomoon.eot","modified":1455628397801,"shasum":"e2d7f040428a632f3c50bfa94083b759936effc2"},{"_id":"public/fonts/icon-icomoon/icomoon.woff","modified":1455628397803,"shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb"},{"_id":"public/fonts/icon-icomoon/icomoon.ttf","modified":1455628397804,"shasum":"f399713d1c9400d4d3373e38991a7e362a754a94"},{"_id":"public/fonts/icon-icomoon/icomoon.svg","modified":1455628397807,"shasum":"e316347805eb93425faa678611c5e42a7152da8f"},{"_id":"public/fonts/icon-icomoon/icomoon.eot","modified":1455628397808,"shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d"},{"_id":"public/fonts/icon-fifty-shades/selection.json","modified":1455628397810,"shasum":"e5a5042e8e516b1d30fa3b1206d2c74921cec72b"},{"_id":"public/fonts/icon-fifty-shades/icomoon.woff","modified":1455628397811,"shasum":"4de6a74f523dee33d95dde61caae5809f9a5d448"},{"_id":"public/fonts/icon-fifty-shades/icomoon.ttf","modified":1455628397813,"shasum":"72fe82e1f3db52414eed706952d385af241cb196"},{"_id":"public/fonts/icon-fifty-shades/icomoon.svg","modified":1455628397814,"shasum":"1a4afd739e1f8eb8d430dbdd29e36a9999802e8d"},{"_id":"public/fonts/icon-fifty-shades/icomoon.eot","modified":1455628397815,"shasum":"da86ba5df72d1288de9e9633e5f528062dd427d5"},{"_id":"public/fonts/icon-feather/selection.json","modified":1455628397817,"shasum":"d95a90b0d541e48b049902090c0d008ad92b4115"},{"_id":"public/fonts/icon-feather/icomoon.woff","modified":1455628397819,"shasum":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5"},{"_id":"public/fonts/icon-feather/icomoon.ttf","modified":1455628397821,"shasum":"b2bbae4b613403cf61ad25037913378da1c07b8f"},{"_id":"public/fonts/icon-feather/icomoon.svg","modified":1455628397822,"shasum":"d5eb756eefda9b454dcb23c2b1cefd4051d18d41"},{"_id":"public/fonts/icon-feather/icomoon.eot","modified":1455628397823,"shasum":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd"},{"_id":"public/fonts/icon-default/selection.json","modified":1455628397824,"shasum":"ff1b9b78eced4d0368d14cc192ac67a0dd498593"},{"_id":"public/fonts/icon-default/icomoon.woff","modified":1455628397826,"shasum":"dbe0368f2a65d87b13234cfea29d9783892fc7a8"},{"_id":"public/fonts/icon-default/icomoon.ttf","modified":1455628397827,"shasum":"c093408e6030221cafc1f79d897f1fb5283c1178"},{"_id":"public/fonts/icon-default/icomoon.svg","modified":1455628397828,"shasum":"f92ad8cddc250f0bb5ca466fca95d321987e127e"},{"_id":"public/fonts/icon-default/icomoon.eot","modified":1455628397830,"shasum":"90763e97be18be78e65749075225cceeddc6fa8a"},{"_id":"public/css/main.css","modified":1455628398314,"shasum":"07af0381af8776f5844a33822b8285967a0418c6"},{"_id":"public/images/monobehaviour_flowchart.svg","modified":1455628398431,"shasum":"3db5978b9715b026ec3a3715a9904bccdefbe36c"},{"_id":"public/images/UNet/syncvarOutput.jpg","modified":1455628398436,"shasum":"22ad941c9ed40317d2459415e590836f8af665d1"},{"_id":"public/images/UNet/sendMessageUI.PNG","modified":1455628398437,"shasum":"d10a5b1a76375148aa6f3eb86365d85ded805234"},{"_id":"public/images/UNet/sendMessageOutput.PNG","modified":1455628398439,"shasum":"d93a9856340b79e0b7b26c1b69e3653806ace60c"},{"_id":"public/images/UNet/outputResult.PNG","modified":1455628398440,"shasum":"3e37819c89ba567f75608ea80c9e9c96ffe3fa5c"},{"_id":"public/images/UNet/UNetDirections.jpg","modified":1455628398442,"shasum":"b279c55c0302cfeb07320f7f56a70a2a433948ca"},{"_id":"public/images/UNet/SimpleUI.PNG","modified":1455628398443,"shasum":"4c7022c6535c7fc12f8ee082e21fc9fd3d9e05b9"},{"_id":"public/images/UNet/NetworkManagerInspector.PNG","modified":1455628398445,"shasum":"4ab531307a23cef93bb8688711d17db5e479c8c7"},{"_id":"public/images/UNet/NetworkHost.png","modified":1455628398446,"shasum":"d01f13c3d80c1e8f5347eb9cf3c9615d182ced7c"},{"_id":"public/images/UNet/103Output.PNG","modified":1455628398447,"shasum":"ec3058361c60b2eb45dc5fe45b360f361822d451"},{"_id":"public/images/Shader/9/properties.png","modified":1455628398448,"shasum":"0520a6a703e348e0ea6e71a95fbae797f87b7d6c"},{"_id":"public/images/Shader/8/surfaceshader.png","modified":1455628398450,"shasum":"8edbb5f7256edb951905f6fb6a14a7510818b308"},{"_id":"public/images/Shader/7/queue.png","modified":1455628398451,"shasum":"50b25eaa1d387e544b1c2460fb98f8b91627c768"},{"_id":"public/images/Shader/7/geometry_1.png","modified":1455628398454,"shasum":"7ee904bceedd51543229ef55282953c4f3a0312f"},{"_id":"public/images/Shader/5/rgb.png","modified":1455628398456,"shasum":"796652994cb1bf390d931acdc252ec5194556415"},{"_id":"public/images/Shader/4/leftandRightHandCoordinate.png","modified":1455628398458,"shasum":"afd92e99caeed3f938d99b60533587c9375a107e"},{"_id":"public/images/Shader/2/rendering-pipeline.psd","modified":1455628398460,"shasum":"a20629b16c145e1629b8c52b061e5257d8aad88a"},{"_id":"public/images/Shader/2/rendering-pipeline.jpg","modified":1455628398468,"shasum":"fa839805dfbd218d21744bc85295674b1dcaabe5"},{"_id":"public/images/Shader/11/PipelineCullDepth.png","modified":1455628398470,"shasum":"16dae527c9563c21d867077ccaff2d00edfe286e"},{"_id":"public/images/Shader/10/rgb.png","modified":1455628398473,"shasum":"e506873d09cc3f67db7dda804ff363007c784aa9"},{"_id":"public/images/RockStar/rockstar.PNG","modified":1455628398476,"shasum":"b2ce9740b8b8b273ccb76e4699fbb43dc47ad98b"},{"_id":"public/images/RockStar/gitAddRepo.PNG","modified":1455628398478,"shasum":"ad342c726f61606a4fe5c817e30111f861515451"},{"_id":"public/images/GitClient/windows_1.png","modified":1455628398480,"shasum":"5a9313fd3b4158d0573f9339703f374bbaaf35c8"},{"_id":"public/images/GitClient/mac_5.png","modified":1455628398482,"shasum":"13ef02faa3f67f2a5ccbe169014989411f17ebd7"},{"_id":"public/images/GitClient/mac_4.png","modified":1455628398485,"shasum":"a93e65742ea905f1d8f119f4e8735e33537a9844"},{"_id":"public/images/GitClient/mac_3.png","modified":1455628398488,"shasum":"7f611449e16814fb158d7afe647dc8a975da1ff2"},{"_id":"public/images/GitClient/mac_2.png","modified":1455628398491,"shasum":"56602b92fb9550bfb65f065430f4096e2851720d"},{"_id":"public/images/GitClient/mac_1.png","modified":1455628398493,"shasum":"e90915cb86344bc1868f3db0d1e7f847e1247851"},{"_id":"public/images/BrigthenImage/b2.png","modified":1455628398494,"shasum":"e509394ce126b33aacacf87972dbf075078da93d"},{"_id":"public/images/BrigthenImage/b1.png","modified":1455628398497,"shasum":"c2af2f61d9fd673a0afc7d6117491d3c2b21a115"},{"_id":"public/tags/index.html","modified":1455628398566,"shasum":"f700dd7cf34a81df2c7e8650d3f9b1439191c159"},{"_id":"public/categories/index.html","modified":1455628398608,"shasum":"5aa498dd8b2419f268330b27c7c1d86f15d46fde"},{"_id":"public/about/index.html","modified":1455628398641,"shasum":"12dcd34b3af801581ff598259dbd2251921180af"},{"_id":"public/2015/12/31/Hello2016/index.html","modified":1455628398696,"shasum":"3b5785c4a16847d5d6524b08f50721c25e772fee"},{"_id":"public/2015/12/27/ShaderlabVSFAQ/index.html","modified":1455628398748,"shasum":"7be9f9e0c92677e1681d41df484a656bd09727fa"},{"_id":"public/2015/11/12/AssetBundleAndABManage_3/index.html","modified":1455628398796,"shasum":"af418d5a644f05944e089702f170cc928e3a2e58"},{"_id":"public/2015/11/11/AssetBundleAndABManage_2/index.html","modified":1455628398846,"shasum":"3662620a94a4e1bb5df840ad1d11a24756224326"},{"_id":"public/2015/11/10/AssetBundleAndABManage_1/index.html","modified":1455628398889,"shasum":"e848bd05403522e898f02112ea6681a390cbc0ba"},{"_id":"public/2015/09/23/Xcode download/index.html","modified":1455628398938,"shasum":"6651957a4c4da8818a2021e3e5aff1ef092d5151"},{"_id":"public/2015/09/15/BrightenTexture2D/index.html","modified":1455628398984,"shasum":"b072d0c4a94ec281de00abbc66810c5991e278b6"},{"_id":"public/2015/08/23/UNet_6/index.html","modified":1455628399041,"shasum":"a984afb5fe864c6be3c6b9342273410a85c28caa"},{"_id":"public/2015/08/15/UNet_5/index.html","modified":1455628399082,"shasum":"4fa6e93f2519cbf1966c2d3d4a63e671e672f627"},{"_id":"public/2015/08/12/UNet_4/index.html","modified":1455628399132,"shasum":"e72622aa4047d9e04de0afacd7544f8c3a191708"},{"_id":"public/2015/08/10/UNet_3/index.html","modified":1455628399188,"shasum":"303bdd496b91d81b55ca63a85f02703e69e037da"},{"_id":"public/2015/08/07/UNet_2/index.html","modified":1455628399239,"shasum":"8dfc2288218ec155100eb4245ae26cf0691ee4c2"},{"_id":"public/2015/08/06/uNET_1/index.html","modified":1455628399294,"shasum":"3e50dc67cbc8f74ae19a06e440957dd4c27c6b0c"},{"_id":"public/2015/07/21/rockstar/index.html","modified":1455628399344,"shasum":"975ebfc5d4a87a44ab3fdee75e1f6d6191536eb7"},{"_id":"public/2015/06/09/Shader_11/index.html","modified":1455628399396,"shasum":"3fc4d6a9646bcf54fed650ed6d04b553dce32ba5"},{"_id":"public/2015/05/14/Shader_10/index.html","modified":1455628399442,"shasum":"ae407622aa6e97f9da8738fc40259e24265519bc"},{"_id":"public/2015/05/08/Shader_9/index.html","modified":1455628399492,"shasum":"55679cee65b15976b086721db3f4bee2b8d823ae"},{"_id":"public/2015/05/07/Shader_8/index.html","modified":1455628399545,"shasum":"5e245ab0668b50cf84109a5b6b079f12612d1906"},{"_id":"public/2015/05/06/Shader_7/index.html","modified":1455628399593,"shasum":"4b77c4ea1daba12c9e6b501e5b4f42e339e24de3"},{"_id":"public/2015/05/05/Shader_6/index.html","modified":1455628399645,"shasum":"738333368950b2644c1c93c6f0d83ff1389094c1"},{"_id":"public/2015/05/04/Shader_5/index.html","modified":1455628399689,"shasum":"94c80638d662438f7f2a1ed4729897c4f5bc6a2c"},{"_id":"public/2015/04/30/Shader_4/index.html","modified":1455628399734,"shasum":"d589204a3864ee4f6c6dd16ac36794f8746aba8f"},{"_id":"public/2015/04/29/Shader_3/index.html","modified":1455628399781,"shasum":"491160b54dcc4ae104ddba3039b0751e46caae2f"},{"_id":"public/2015/04/28/Shader_2/index.html","modified":1455628399826,"shasum":"3d8e7d822965c1e27e31c958129c5344978c93eb"},{"_id":"public/2015/04/26/Shader_1/index.html","modified":1455628399869,"shasum":"7a7da02163145a543dbfefb7406d0f6d48f25643"},{"_id":"public/2015/04/15/cirleImageInUnity3D/index.html","modified":1455628399916,"shasum":"3170e5e6af0741a91b4078578e2e6acab9d03388"},{"_id":"public/2015/03/26/ClosureInSwift/index.html","modified":1455628399957,"shasum":"3daacfe6a1d28963c85fb0ce1093438c99237b19"},{"_id":"public/2015/01/28/UserGithubClientForNonGithubRepos/index.html","modified":1455628400014,"shasum":"d171c824c15e724b1bbeb9846f0e283024675f8b"},{"_id":"public/2015/01/07/CSharp to Python Tutorial/index.html","modified":1455628400101,"shasum":"e4ea0d4216e8f4b7eec7861b16b636802a611835"},{"_id":"public/2014/12/24/VSTips/index.html","modified":1455628400151,"shasum":"b2212b6156b9b283cddd6194e24e9e385a5d7836"},{"_id":"public/2014/11/10/MonoBehavior event functions/index.html","modified":1455628400210,"shasum":"b25da7f803e239fee16b3ae47ea8bcc93a4dc6aa"},{"_id":"public/2014/11/05/about Unity3D editor/index.html","modified":1455628400262,"shasum":"0439d4defdeadee10999b23c0895f491769da534"},{"_id":"public/2014/10/28/Release/index.html","modified":1455628400319,"shasum":"45dbe8519451f7d973770fa60da25722b3d7d124"},{"_id":"public/2014/08/31/Why I start ShaderlabVS/index.html","modified":1455628400366,"shasum":"fa1267127af4c2908ecf34a16ca589a3d46d34b7"},{"_id":"public/archives/index.html","modified":1455628400417,"shasum":"7d1c2eba5d663691814423682cc572b4d585241a"},{"_id":"public/archives/page/2/index.html","modified":1455628400478,"shasum":"0c30abdac5321000a9106d446d13674a1b75a328"},{"_id":"public/archives/page/3/index.html","modified":1455628400517,"shasum":"1507cead24764487baa16c51031f14d63358ce59"},{"_id":"public/archives/page/4/index.html","modified":1455628400556,"shasum":"d58b45ed3ad566b68a912409339512a1cf854417"},{"_id":"public/archives/page/5/index.html","modified":1455628400590,"shasum":"2a715bf4008d768814f60e66eea66c92f8c9194c"},{"_id":"public/archives/2014/index.html","modified":1455628400622,"shasum":"643400be0525cdf3d853c8ed77372aee490f5978"},{"_id":"public/archives/2014/08/index.html","modified":1455628400655,"shasum":"d95cc84e049517fa3abf046cfd7da3208b34df3b"},{"_id":"public/archives/2014/10/index.html","modified":1455628400687,"shasum":"c31fa86dc69dd777ace5c5eb95c6cb449824b59f"},{"_id":"public/archives/2014/11/index.html","modified":1455628400716,"shasum":"f01da6747997678494c25e2355f3b91efa9d4a3e"},{"_id":"public/archives/2014/12/index.html","modified":1455628400749,"shasum":"e4da6d5c5862043e1824a6b19fa2dcd8528789f5"},{"_id":"public/archives/2015/index.html","modified":1455628400785,"shasum":"361d9ea6a5cb098a671fad1093830fac230237fc"},{"_id":"public/archives/2015/page/2/index.html","modified":1455628400826,"shasum":"b29561551a1af1bd205c5f184d87ccfa09ad09b5"},{"_id":"public/archives/2015/page/3/index.html","modified":1455628400862,"shasum":"9061e2d8885d4245ecc38d47c141a6231830f236"},{"_id":"public/archives/2015/page/4/index.html","modified":1455628400902,"shasum":"fdcd647edbc9bf68c5e7afd0f30dd701897ba69a"},{"_id":"public/archives/2015/01/index.html","modified":1455628400930,"shasum":"752c96cf216aee8b68d1e5f72252b17e66f4d5b7"},{"_id":"public/archives/2015/03/index.html","modified":1455628400962,"shasum":"f12095b0ae14b72a0f0cfc70ca307ae94a8ff9c6"},{"_id":"public/archives/2015/04/index.html","modified":1455628401000,"shasum":"a24df40ac7671da9c9d570b9508641ca46603c6f"},{"_id":"public/archives/2015/05/index.html","modified":1455628401032,"shasum":"15aa977a9322ce75b95f94caa9219916224b2709"},{"_id":"public/archives/2015/06/index.html","modified":1455628401069,"shasum":"36372b40d25f3289f247c36a1c5e1616cb9954ab"},{"_id":"public/archives/2015/07/index.html","modified":1455628401096,"shasum":"0f00997af61db34267199561152cf7ac8b122e5d"},{"_id":"public/archives/2015/08/index.html","modified":1455628401133,"shasum":"3a967cdd54014a43b86e5c4c080c6f69c7336728"},{"_id":"public/archives/2015/09/index.html","modified":1455628401167,"shasum":"da0e6708dfe494cf0382a2480cb625041c6f499d"},{"_id":"public/archives/2015/11/index.html","modified":1455628401201,"shasum":"40decef37ee5dc5860726a738d78befbc1beb81d"},{"_id":"public/archives/2015/12/index.html","modified":1455628401235,"shasum":"258ba9593d563e937a7fbeb828dc97e3da18e57b"},{"_id":"public/baidusitemap.xml","modified":1455628401237,"shasum":"5f2cd08ecf27223b650f4df5697efeb6cc29ee29"},{"_id":"public/categories/Unity/index.html","modified":1455628401271,"shasum":"abc7936d2a08ca660aefd58914a7f6c5c5c20fe1"},{"_id":"public/categories/Unity/page/2/index.html","modified":1455628401300,"shasum":"d7e87899cc1158294dc163fce5d5d15fdd929c06"},{"_id":"public/categories/一点一滴/index.html","modified":1455628401337,"shasum":"86edfbc3f921ab4a4f225011879a44791d853f72"},{"_id":"public/categories/Shader/index.html","modified":1455628401366,"shasum":"29a34c11658fddf22748d3a632e2f28fa3f145eb"},{"_id":"public/categories/Shader/page/2/index.html","modified":1455628401402,"shasum":"7e8130b38b263b8f3791bb5d001edf99e257dc68"},{"_id":"public/index.html","modified":1455628401443,"shasum":"ac617a62848535a5ba1070abb1ec2b175e32d3b7"},{"_id":"public/page/2/index.html","modified":1455628401492,"shasum":"02a6ec5aec51a9093b3ebaa7a041d7e40f3db11c"},{"_id":"public/page/3/index.html","modified":1455628401537,"shasum":"43d0ca99eb5e1f1d01c49e19d8de6cd599ea23e3"},{"_id":"public/page/4/index.html","modified":1455628401580,"shasum":"3a53ea9259806b69833337bae992c59672ebb900"},{"_id":"public/page/5/index.html","modified":1455628401623,"shasum":"cfba531cf3e3b2d38090a4a5c8f445a309241e1b"},{"_id":"public/tags/AssetBundle/index.html","modified":1455628401655,"shasum":"eb816c15a68ed7d93d2235cfcbab10827e8ff969"},{"_id":"public/tags/UNet/index.html","modified":1455628401689,"shasum":"c4613d0d3f40ac690628c01950e6a60eafefe416"},{"_id":"public/tags/Python/index.html","modified":1455628401715,"shasum":"ff8f2de785ec5bf51215479b108785bbc973855b"},{"_id":"public/tags/Unity/index.html","modified":1455628401750,"shasum":"19ad26e6c94f51b0bc6f182f88fcba0c2d09bad2"},{"_id":"public/tags/Shader/index.html","modified":1455628401780,"shasum":"dbe605932fc28d81912c3250bf8e281cb405f97f"},{"_id":"public/tags/Shader/page/2/index.html","modified":1455628401817,"shasum":"9a280840103627436cad0b9ec62c1ba2a5dc3b14"},{"_id":"public/tags/Visual-Studio/index.html","modified":1455628401848,"shasum":"1948e9783c2c3d65c23c6eda02af7ab0a5daf0ec"},{"_id":"public/tags/Git/index.html","modified":1455628401877,"shasum":"de23fc13d34a162b8b81832e6b3336ca4827d8fe"},{"_id":"public/tags/一点一滴/index.html","modified":1455628401910,"shasum":"8d5b24ca55fcd8b223773c7b32f810bed69c2f6d"},{"_id":"public/tags/Swift/index.html","modified":1455628401941,"shasum":"02d045b8c4c97d07065a6a1d7346484d5da9540c"},{"_id":"public/tags/Graphic/index.html","modified":1455628401971,"shasum":"5c77e37612d226019d9bd3e2fa8ae2c32527ed62"}],"Category":[{"name":"Unity","_id":"cikpfkau200012quolrp83rto"},{"name":"一点一滴","_id":"cikpfkav2000d2quopu31egp4"},{"name":"Shader","_id":"cikpfkavd000s2quoxupist0g"}],"Data":[],"Page":[{"title":"tags","date":"2015-12-26T05:31:35.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-12-26 13:31:35\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-01-12T05:15:54.000Z","path":"tags/index.html","layout":"page","_id":"cikpfkaur00052quo6cmqmfq0"},{"title":"categories","date":"2015-12-26T05:41:19.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2015-12-26 13:41:19\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-01-12T05:15:54.000Z","path":"categories/index.html","layout":"page","_id":"cikpfkaux00062quovv29zxe7"},{"title":"about","date":"2015-12-26T05:46:07.000Z","type":"about","_content":"# I'm a coder in China.  \n\n> 上面一句话的翻译是：中国码农\n\n囧","source":"about/index.md","raw":"title: about\ndate: 2015-12-26 13:46:07\ntype: \"about\"\n---\n# I'm a coder in China.  \n\n> 上面一句话的翻译是：中国码农\n\n囧","updated":"2016-01-12T05:15:54.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cikpfkauy00072quoxexeaxl8"}],"Post":[{"title":"Unity 5： Asset Bundle 和 Asset Bundle Manager (1)","date":"2015-11-10T08:16:56.000Z","_content":"\n这篇是 Unity 官方教程 [AssetBundles and the AssetBundle Manager](http://unity3d.com/cn/learn/tutorials/topics/scripting/assetbundles-and-assetbundle-manager?playlist=17117) 的翻译， 分两部分，这是第一部分。翻译不到之处请不吝指出。非常谢谢！\n<hr>\n\n<div style=\"display:none\">\n#~###INTRODUCTION\n\nAssetBundles allow on demand streaming and loading of Assets from a local or remote location. With AssetBundles, Assets can be stored remotely and accessed as needed, increasing the flexibility of the project and reducing the initial application size.\n</div>\n\n### 介绍  \n\nAssetBundle 允许按需地从本地或者远程服务器上加载资源(Asset)。通过 AssetBundle 的方式，资源可以远程存储，有需要的时候访问，这样提升了项目的灵活性和降低初始程序的大小。\n\n<div style=\"display:none\">\nThis lesson will introduce AssetBundles and discuss how to work with them, the steps and stages of the AssetBundle workflow, how to assign Assets to an AssetBundle, how and when to use AssetBundle Variants, how to build and test AssetBundles and Variants - all in the context of using the AssetBundle Manager to simplify creating, testing and deploying AssetBundles. The final section of the lesson will cover specific examples of loading and using AssetBundles and AssetBundle Variants with simple use-cases and simple example scripts.\n</div>\n\n这篇教程将会介绍 AssetBundle 和及其应用，AssetBundle 流程的步骤和各阶段和怎么样编译和测试 AssetBundle 及其变体 - 所有的一切可以用 AssetBundle Manager 来简化创建，测试和部署 AssetBundle。教程的最后一部分将使用一些加载和使用 AssetBundle 变体的简单用例和脚本示例。\n\n<div style='display:none'>\n###SAMPLE PROJECT\n</div>\n\n### 演示项目\n\n<div style='display:none'>\nBefore starting this Tutorial Article, it would be best to download the AssetBundle Manager with the AssetBundle Sample project here.\n</div>\n\n在开始教程之前，最后先下载好 AssetBundle 和 AssetBundle Manager 的[示例程序](http://u3d.as/jyk)。\n\n<div style='display:none'>\n###WHAT IS AN ASSETBUNDLE?\n\nAssetBundles are files created in the Unity editor during edit-time, which can be used later by a build of a project at run-time. AssetBundles can contain asset files such as models, materials, textures and scenes. AssetBundles cannot contain scripts.\n</div>\n\n### 什么是 AssetBundle\n\nAssetBundle 是由 Unity 编辑器在编辑时期创建的，可以被编译出来的程序在运行期使用的文件。AssetBundle 可以包含模型，材质，纹理和场景文件等资源。但是 AssetBundle 不能包含脚本。\n\n<div style='display:none'>\nSpecifically, an AssetBundle is a collection of assets and/or scenes from a project saved in a compact file with the purpose of being loaded separately to the built executable application. AssetBundles can be loaded on demand by a game or application built in Unity. This allows streaming and asynchronous loading of content such as models, textures, audio clips, or even entire scenes. AssetBundles can be “pre-cached” and stored locally for immediate loading when first running an application. The primary purpose of AssetBundles, however, is to stream content on demand from a remote location, to be loaded into the application as necessary. AssetBundles can contain any kind of asset type recognized by Unity, including custom binary data. The only exception is that script assets are not allowed.\n</div>\n\n明确一点说，一个 AssetBundle 就是存储项目资源和 / 或场景集合的文件，目的是为了之后在游戏或者程序中加载。\nAssetBundle 可以被在 Unity 中编译出来的游戏或者程序按需加载。它允许传送和异步加载像模型，材质，声音剪辑，\n甚至是整个场景。当在程序中初次运行时， AssetBundle 会被存储到本地 “预缓存” 以备以后被立即加载。Assetbundle 的主要目是为了需要的时候能从远程传送内容并加载进程序。AssetBundle 可以包含可以被 Unity 识别的任何资源类型，包括二进制文件。唯一的另外就是不允许是脚本资源。\n\n<div style='display:none'>\nThere are many use-cases for AssetBundles. New content can be dynamically loaded and unloaded from an application. Post-release DLC can easily be implemented. An application’s disk footprint or size can be reduced when first deployed, with assets being loaded after installation of the application and only as the assets are needed. Platform and device specific assets can be loaded without having to download or store redundant assets for other platforms or resolutions. Localization of applications becomes easy by downloading and installing only the assets needed based on the user’s location, language or preferences. Applications can be fixed, changed or updated with new content without having to resubmit the application for approval.\n</div>\n\nAssetsBundle 有很多用处。比如新的内容可以动态地在程序中加载和释放。可以很简单实现发布后的可下载内容(DLC, Downloadable Content)。\n程序第一次安装的的时候的大小或者磁盘占用空间会减少，资源只有安装的程序需要的时候才会被加载。平台或者设备相关的资源加载时可以不必要下载或冗余存储其他平台和方案中的资源。本地化的程序可以更容易来下载和安装基于用户位置，语言和偏好的资源。新的内容可以下修复，改变或更新，而不需要重新发布程序。\n\n<div style='display:none'>\nThe detailed organization of any project’s assets into AssetBundles will be heavily dependent upon the needs of that particular project. There are, however, some basic tenets to understand about AssetBundles.\n</div>\n\nAssetBundle 内项目资源的组织严重依赖于项目的需求。但是，也有一些可以更好的理解 AssetBundle 的原则。\n\n<!--more-->\n\n<div style='display:none'>\n* AssetBundles are downloaded and cached in their entirety.\n* AssetBundles do not need to be loaded in their entirety.\n* Assets in AssetBundles can have dependencies on other assets.\n* Assets in AssetBundles can share dependencies with other assets.\n* Each AssetBundle has some technical overhead, both in the size of the file and the need to manage that file.\n* AssetBundles should be built for each target platform.\n</div>\n\n* AssetBundle 是整体被下载和缓存的\n* AssetBundle 不需要整体被加载\n* AssetBundle 中的资源可以包括依赖的其他资源\n* AssetBundle 中的资源可以共享依赖的其他资源\n* 每个 AssetBundle 在文件大小和处理上都有一些技术上的开销。\n* 每个平台上的 AssetBundle 都需要单独编译\n\n<div style='display:none'>\nAssetBundles are downloaded in their entirety. If an AssetBundle contains Assets that are not immediately needed, even though they won’t necessarily be loaded into the scene, they will take up both bandwidth to download and disk-space to store.\n</div>\n\nAssetBundle 是整体被下载的。如果在一个 AssetBundle 中包含不需要立即加载，甚至不需要加载进场景的资源，它们也会占用下载带宽和存储空间。\n\n<div style='display:none'>\nThe contents of AssetBundles do not need to be loaded in their entirety. Once an AssetBundle has been downloaded, Assets can be selectively loaded from the AssetBundle.\n</div>\n\nAssetBundle 的内容不需要整体加载的。一旦 AssetBundle 被下载过了，资源可以有选择性的从 AssetBundle 中加载。\n\n<div style='display:none'>\nAssets can have dependencies on other assets. For example, a model can have several dependencies. The final model in the game is not just mesh data, but it is a GameObject with all of its Components and all of the Component’s dependencies.\n</div>\n\n资源能包括依赖的其他资源。比如，一个模型有好几个依赖。最终在游戏里的摩西不光只有网格数据，它会是一个包含所有组件和组件的依赖项的游戏对象(GameObject)。\n\n![meshmodelwmaterial](http://unity3d.com/sites/default/files/meshmodelwmaterial.png) \n<small>_应用了材质的模型_</small>\n\n<div style='display:none'>\nThis model is dependent on a Material Asset in the model’s Mesh Renderer, and that Material Asset is dependent on a Texture Asset for the Material’s Albedo Texture. As a matter of fact, this tank is dependent upon three Materials, not just one.\n</div>\n\n这个模型依赖于在模型的 Mesh Renderer 组件中的一个材质资源，而这个材质资源依赖于应用在材质的 Albedo 纹理上的纹理资源。实际上，这个坦克依赖了三个材质，而不是仅仅一个。\n\n![dependencies](http://unity3d.com/sites/default/files/dependencies2.png)\n<div style='display:none'>\n_The tank model’s Asset dependency chain: Model > Material > Texture_\n</div>\n<small>_坦克模型资源的依赖链：模型 > 材质 > 纹理_</small>\n\n<div style='display:none'>\nAssets can share dependencies with other assets. For example, two different models can share the same Material, which in turn could be dependent on a Texture.\n</div>\n\n\n资源可以共享依赖的其他资源。比如，两个模型可以共享同一个材质, 相应的可能依赖于同一个纹理。\n\n<div style='display:none'>\n_Both rock columns are different models that share the same Material_\n</div>\t\n\n![two rock columns](http://unity3d.com/sites/default/files/two_rock_columns.png) \n<small>_两个共享同一个材质的不同的岩石柱模型_</small>\n\n<div style='display:none'>\nEach AssetBundle has some technical overhead. AssetBundles are files that wrap Assets. This wrapper adds to the overall size of the AssetBundle. Even though this is not a significant increase in size, it is measureable. AssetBundles also require a certain amount of management to organize, create, upload and maintain. The more AssetBundles being used increases overhead for a project, both technical and managerial.\n</div>\n\n每个 AssetBundle 都会有一些技术上的开销。AssetBundles 是包装资源的文件。这个包装会增加 AssetBundle 的总大小。即使这个增量不大，可测量。AssetBundle 还要求一定量的处理来组织，创建，上传和维护。从技术上和处理上，使用的 AssetBundle 越多，其在项目中的开销越大。\n\n<div style='display:none'>\nWhen organizing AssetBundles, a balance must be struck between too many small AssetBundles that need to be tracked and generate overhead, and too few AssetBundles that are large and contain unnecessary or redundant data. The exact balance will depend heavily upon the needs of the project.\n</div>\n\n当组织 AssetBundle 时，需要在 **使用数量多体积小但需要跟踪和生成开销的 AssetBundle ** 还是 \n**数量小但体积大且包含很多不必要的多余的数据的 AssetBundle** 中做出平衡。具体的平衡策略严重依赖于项目的需求。\n\n<div style='display:none'>\nThe contents of an AssetBundle are compiled and optimized for the current target platform according to the Import Settings and the current Target Platform. Because of this, AssetBundles should be built for each target platform.\n</div>\n\nAssetBundle 的内容是根据当前的 Import Settings 和 平台来编译和优化的。所以，AssetBundle 需要为不同平台编译。\n\n<div style='display:none'>\n###MANIFESTS AND DEPENDENCY MANAGEMENT\n\nThere are several important points to understand regarding dependencies and dependency management.\n</div>\n\n### 清单和依赖管理\n\n理解关于依赖和依赖管理，有几个重要的点。\n\n<div style='display:none'>\nAsset dependencies are never lost. Dependent Assets will be added to the AssetBundle automatically along with the selected Asset if that dependent Asset has not been assigned to any AssetBundle when the AssetBundles are built. This is very convenient and prevents the loss of dependent assets. However, this can also cause the duplication of Assets. For example, using the two rock columns above which share the same Material, if both rock columns are in separate AssetBundles and the Material is not explicitly assigned to an AssetBundle, that Material will be added to both AssetBundles containing the rock columns. It is worth noting that when this happens, both duplicate Assets are stored in their respective AssetBundles and the Asset dependencies are now split. Each model Asset will now depend upon the local copy of the Material Asset, removing any advantage of having shared Material Assets. To prevent this from happening, the Material needs to be explicitly assigned to an AssetBundle. This can be an AssetBundle of its own, or shared with other Assets. In either case, the AssetBundles with the rock columns will now be dependent upon the AssetBundle with the rocks’ Material.\n</div>\n\n资源依赖永远不会丢失。当 AssetBundle 编译的时候，即便独立的资源没有指定到任何的 AssetBundle，也会跟着被选中的资源中被自动的加入 AssetBundle中。这样很便捷并且可以防止独立资源的丢失。尽管如此，这还是会引起资源的重复。比如，以上面使用同一个材质的两个岩石柱为例，如果两个岩石柱分开在不同的两个 AssetBundles 中并且这个材质没有显式的指定到一个 AssetBundle 上，这个材质就会被加入到这两个包含岩石柱的 AssetBndles 中。这个值得注意，两个重复的资源现在被存储到各自的 AssetBundle 中，资源的依赖性被分离了。每个模型资源现在依赖于各自的材质资源的本地拷贝，丢失了共享材质的优势。为了比避免这个发生，这个材质需要显式的指定到一个 AssetBundle 中。这样 AssetBundle 可以自己使用它也，也可以和其他资源一起共享。这种情况下，拥有岩石柱的 AssetBundles 依赖于拥有岩石材质的 AssetBundle 了。\n\n<div style='display:none'>\nThe dependencies and other information for a project’s AssetBundles are stored in a Manifest. The manifest is very much like a “table of contents” for the project’s AssetBundles. When AssetBundles are built, Unity generates a large amount of data. The details of this data are saved in the Manifest. There is one Manifest created for each target platform. The Manifest lists all of the AssetBundles created from the project for the current build target, and stores and tracks all of their dependencies. With the Manifest, it is possible to query all AssetBundles and all their dependencies.\n</div>\n\n项目的 AssetBundle 的依赖和其他信息存储在 **清单(Manifest)** 中。清单非常像关于项目的 AssetBundles 的 \"目录\"。当 AssetBundle 在编译的时候，Unity 会生产大量的数据。数据的细节存储在清单里。每个平台都会创建一个清单。清单为编译对象列举了所有从项目创建的 AssetBundles，存储位置和跟踪他们的依赖。利用清单，可以查询所有的 AssetBundles 和他们的依赖。\n\n<div style='display:none'>\nThere is one special setup for AssetBundles called AssetBundle Variants. AssetBundle Variants are designed to support one specific use case - remapping a choice of different Assets to individual objects in a project. This is particularly useful when working with projects that need to select one Asset from a wide variety of different possible choices based on criteria like resolution, language, localization, or user preference. AssetBundle Variants can hold the variety of Assets required to cover all supported options for an object and the desired Asset can be mapped to that object as needed from the chosen AssetBundle Variant.\n</div>\n\n对于 AssetBundles 有一种特殊设置，叫做 AssetBundle 变体。AssetBundle 变体被设计来支持更特殊的使用场景 - 对单独的对象映射不同的资源选择。这对于需要依据一些标准，如分辨率，语言，地区或者用户偏好来从很多可能中选择一个资源的项目特别有用。AssetBundle 变体可以包含用来覆盖所有支持的选项的多种资源，\n并且按需从选择的 AssetBundle 变体中映射期望的资源到对象上。\n\n<div style='display:none'>\nAssetBundles are files which contain asset files such as models, materials, textures and scenes. AssetBundles are created by the Unity editor during edit-time and can be used later at run-time by a built application. AssetBundles are designed to load Assets on demand from a local or remote source. AssetBundles can have Variants which can be mapped to objects in the scene depending upon the user’s preference.\n</div>\n\nAesstBundles 是包含模型，材质，纹理和场景文件等资源文件的文件。AssetBundles 在编辑器的编辑期创建，可以被编译出来的程序之后使用。AssetBundles 被设计来从本地或远程源中按需加载资源。AssetBundles 可以拥有变体，可以基于用户偏好映射到对象上。\n\n<div style='display:none'>\nFor more detailed information about working with AssetBundles and the AssetBundle Manager, please see the next tutorial lesson in this series.\n</div>\n\n关于使用 AssetBundle 和  AssetBundle Manger 的更多细节，请看这系列的下一个教程。","source":"_posts/AssetBundleAndABManage_1.md","raw":"title: Unity 5： Asset Bundle 和 Asset Bundle Manager (1)\ndate: 2015-11-10 16:16:56\ntags: AssetBundle\ncategory: Unity\n---\n\n这篇是 Unity 官方教程 [AssetBundles and the AssetBundle Manager](http://unity3d.com/cn/learn/tutorials/topics/scripting/assetbundles-and-assetbundle-manager?playlist=17117) 的翻译， 分两部分，这是第一部分。翻译不到之处请不吝指出。非常谢谢！\n<hr>\n\n<div style=\"display:none\">\n#~###INTRODUCTION\n\nAssetBundles allow on demand streaming and loading of Assets from a local or remote location. With AssetBundles, Assets can be stored remotely and accessed as needed, increasing the flexibility of the project and reducing the initial application size.\n</div>\n\n### 介绍  \n\nAssetBundle 允许按需地从本地或者远程服务器上加载资源(Asset)。通过 AssetBundle 的方式，资源可以远程存储，有需要的时候访问，这样提升了项目的灵活性和降低初始程序的大小。\n\n<div style=\"display:none\">\nThis lesson will introduce AssetBundles and discuss how to work with them, the steps and stages of the AssetBundle workflow, how to assign Assets to an AssetBundle, how and when to use AssetBundle Variants, how to build and test AssetBundles and Variants - all in the context of using the AssetBundle Manager to simplify creating, testing and deploying AssetBundles. The final section of the lesson will cover specific examples of loading and using AssetBundles and AssetBundle Variants with simple use-cases and simple example scripts.\n</div>\n\n这篇教程将会介绍 AssetBundle 和及其应用，AssetBundle 流程的步骤和各阶段和怎么样编译和测试 AssetBundle 及其变体 - 所有的一切可以用 AssetBundle Manager 来简化创建，测试和部署 AssetBundle。教程的最后一部分将使用一些加载和使用 AssetBundle 变体的简单用例和脚本示例。\n\n<div style='display:none'>\n###SAMPLE PROJECT\n</div>\n\n### 演示项目\n\n<div style='display:none'>\nBefore starting this Tutorial Article, it would be best to download the AssetBundle Manager with the AssetBundle Sample project here.\n</div>\n\n在开始教程之前，最后先下载好 AssetBundle 和 AssetBundle Manager 的[示例程序](http://u3d.as/jyk)。\n\n<div style='display:none'>\n###WHAT IS AN ASSETBUNDLE?\n\nAssetBundles are files created in the Unity editor during edit-time, which can be used later by a build of a project at run-time. AssetBundles can contain asset files such as models, materials, textures and scenes. AssetBundles cannot contain scripts.\n</div>\n\n### 什么是 AssetBundle\n\nAssetBundle 是由 Unity 编辑器在编辑时期创建的，可以被编译出来的程序在运行期使用的文件。AssetBundle 可以包含模型，材质，纹理和场景文件等资源。但是 AssetBundle 不能包含脚本。\n\n<div style='display:none'>\nSpecifically, an AssetBundle is a collection of assets and/or scenes from a project saved in a compact file with the purpose of being loaded separately to the built executable application. AssetBundles can be loaded on demand by a game or application built in Unity. This allows streaming and asynchronous loading of content such as models, textures, audio clips, or even entire scenes. AssetBundles can be “pre-cached” and stored locally for immediate loading when first running an application. The primary purpose of AssetBundles, however, is to stream content on demand from a remote location, to be loaded into the application as necessary. AssetBundles can contain any kind of asset type recognized by Unity, including custom binary data. The only exception is that script assets are not allowed.\n</div>\n\n明确一点说，一个 AssetBundle 就是存储项目资源和 / 或场景集合的文件，目的是为了之后在游戏或者程序中加载。\nAssetBundle 可以被在 Unity 中编译出来的游戏或者程序按需加载。它允许传送和异步加载像模型，材质，声音剪辑，\n甚至是整个场景。当在程序中初次运行时， AssetBundle 会被存储到本地 “预缓存” 以备以后被立即加载。Assetbundle 的主要目是为了需要的时候能从远程传送内容并加载进程序。AssetBundle 可以包含可以被 Unity 识别的任何资源类型，包括二进制文件。唯一的另外就是不允许是脚本资源。\n\n<div style='display:none'>\nThere are many use-cases for AssetBundles. New content can be dynamically loaded and unloaded from an application. Post-release DLC can easily be implemented. An application’s disk footprint or size can be reduced when first deployed, with assets being loaded after installation of the application and only as the assets are needed. Platform and device specific assets can be loaded without having to download or store redundant assets for other platforms or resolutions. Localization of applications becomes easy by downloading and installing only the assets needed based on the user’s location, language or preferences. Applications can be fixed, changed or updated with new content without having to resubmit the application for approval.\n</div>\n\nAssetsBundle 有很多用处。比如新的内容可以动态地在程序中加载和释放。可以很简单实现发布后的可下载内容(DLC, Downloadable Content)。\n程序第一次安装的的时候的大小或者磁盘占用空间会减少，资源只有安装的程序需要的时候才会被加载。平台或者设备相关的资源加载时可以不必要下载或冗余存储其他平台和方案中的资源。本地化的程序可以更容易来下载和安装基于用户位置，语言和偏好的资源。新的内容可以下修复，改变或更新，而不需要重新发布程序。\n\n<div style='display:none'>\nThe detailed organization of any project’s assets into AssetBundles will be heavily dependent upon the needs of that particular project. There are, however, some basic tenets to understand about AssetBundles.\n</div>\n\nAssetBundle 内项目资源的组织严重依赖于项目的需求。但是，也有一些可以更好的理解 AssetBundle 的原则。\n\n<!--more-->\n\n<div style='display:none'>\n* AssetBundles are downloaded and cached in their entirety.\n* AssetBundles do not need to be loaded in their entirety.\n* Assets in AssetBundles can have dependencies on other assets.\n* Assets in AssetBundles can share dependencies with other assets.\n* Each AssetBundle has some technical overhead, both in the size of the file and the need to manage that file.\n* AssetBundles should be built for each target platform.\n</div>\n\n* AssetBundle 是整体被下载和缓存的\n* AssetBundle 不需要整体被加载\n* AssetBundle 中的资源可以包括依赖的其他资源\n* AssetBundle 中的资源可以共享依赖的其他资源\n* 每个 AssetBundle 在文件大小和处理上都有一些技术上的开销。\n* 每个平台上的 AssetBundle 都需要单独编译\n\n<div style='display:none'>\nAssetBundles are downloaded in their entirety. If an AssetBundle contains Assets that are not immediately needed, even though they won’t necessarily be loaded into the scene, they will take up both bandwidth to download and disk-space to store.\n</div>\n\nAssetBundle 是整体被下载的。如果在一个 AssetBundle 中包含不需要立即加载，甚至不需要加载进场景的资源，它们也会占用下载带宽和存储空间。\n\n<div style='display:none'>\nThe contents of AssetBundles do not need to be loaded in their entirety. Once an AssetBundle has been downloaded, Assets can be selectively loaded from the AssetBundle.\n</div>\n\nAssetBundle 的内容不需要整体加载的。一旦 AssetBundle 被下载过了，资源可以有选择性的从 AssetBundle 中加载。\n\n<div style='display:none'>\nAssets can have dependencies on other assets. For example, a model can have several dependencies. The final model in the game is not just mesh data, but it is a GameObject with all of its Components and all of the Component’s dependencies.\n</div>\n\n资源能包括依赖的其他资源。比如，一个模型有好几个依赖。最终在游戏里的摩西不光只有网格数据，它会是一个包含所有组件和组件的依赖项的游戏对象(GameObject)。\n\n![meshmodelwmaterial](http://unity3d.com/sites/default/files/meshmodelwmaterial.png) \n<small>_应用了材质的模型_</small>\n\n<div style='display:none'>\nThis model is dependent on a Material Asset in the model’s Mesh Renderer, and that Material Asset is dependent on a Texture Asset for the Material’s Albedo Texture. As a matter of fact, this tank is dependent upon three Materials, not just one.\n</div>\n\n这个模型依赖于在模型的 Mesh Renderer 组件中的一个材质资源，而这个材质资源依赖于应用在材质的 Albedo 纹理上的纹理资源。实际上，这个坦克依赖了三个材质，而不是仅仅一个。\n\n![dependencies](http://unity3d.com/sites/default/files/dependencies2.png)\n<div style='display:none'>\n_The tank model’s Asset dependency chain: Model > Material > Texture_\n</div>\n<small>_坦克模型资源的依赖链：模型 > 材质 > 纹理_</small>\n\n<div style='display:none'>\nAssets can share dependencies with other assets. For example, two different models can share the same Material, which in turn could be dependent on a Texture.\n</div>\n\n\n资源可以共享依赖的其他资源。比如，两个模型可以共享同一个材质, 相应的可能依赖于同一个纹理。\n\n<div style='display:none'>\n_Both rock columns are different models that share the same Material_\n</div>\t\n\n![two rock columns](http://unity3d.com/sites/default/files/two_rock_columns.png) \n<small>_两个共享同一个材质的不同的岩石柱模型_</small>\n\n<div style='display:none'>\nEach AssetBundle has some technical overhead. AssetBundles are files that wrap Assets. This wrapper adds to the overall size of the AssetBundle. Even though this is not a significant increase in size, it is measureable. AssetBundles also require a certain amount of management to organize, create, upload and maintain. The more AssetBundles being used increases overhead for a project, both technical and managerial.\n</div>\n\n每个 AssetBundle 都会有一些技术上的开销。AssetBundles 是包装资源的文件。这个包装会增加 AssetBundle 的总大小。即使这个增量不大，可测量。AssetBundle 还要求一定量的处理来组织，创建，上传和维护。从技术上和处理上，使用的 AssetBundle 越多，其在项目中的开销越大。\n\n<div style='display:none'>\nWhen organizing AssetBundles, a balance must be struck between too many small AssetBundles that need to be tracked and generate overhead, and too few AssetBundles that are large and contain unnecessary or redundant data. The exact balance will depend heavily upon the needs of the project.\n</div>\n\n当组织 AssetBundle 时，需要在 **使用数量多体积小但需要跟踪和生成开销的 AssetBundle ** 还是 \n**数量小但体积大且包含很多不必要的多余的数据的 AssetBundle** 中做出平衡。具体的平衡策略严重依赖于项目的需求。\n\n<div style='display:none'>\nThe contents of an AssetBundle are compiled and optimized for the current target platform according to the Import Settings and the current Target Platform. Because of this, AssetBundles should be built for each target platform.\n</div>\n\nAssetBundle 的内容是根据当前的 Import Settings 和 平台来编译和优化的。所以，AssetBundle 需要为不同平台编译。\n\n<div style='display:none'>\n###MANIFESTS AND DEPENDENCY MANAGEMENT\n\nThere are several important points to understand regarding dependencies and dependency management.\n</div>\n\n### 清单和依赖管理\n\n理解关于依赖和依赖管理，有几个重要的点。\n\n<div style='display:none'>\nAsset dependencies are never lost. Dependent Assets will be added to the AssetBundle automatically along with the selected Asset if that dependent Asset has not been assigned to any AssetBundle when the AssetBundles are built. This is very convenient and prevents the loss of dependent assets. However, this can also cause the duplication of Assets. For example, using the two rock columns above which share the same Material, if both rock columns are in separate AssetBundles and the Material is not explicitly assigned to an AssetBundle, that Material will be added to both AssetBundles containing the rock columns. It is worth noting that when this happens, both duplicate Assets are stored in their respective AssetBundles and the Asset dependencies are now split. Each model Asset will now depend upon the local copy of the Material Asset, removing any advantage of having shared Material Assets. To prevent this from happening, the Material needs to be explicitly assigned to an AssetBundle. This can be an AssetBundle of its own, or shared with other Assets. In either case, the AssetBundles with the rock columns will now be dependent upon the AssetBundle with the rocks’ Material.\n</div>\n\n资源依赖永远不会丢失。当 AssetBundle 编译的时候，即便独立的资源没有指定到任何的 AssetBundle，也会跟着被选中的资源中被自动的加入 AssetBundle中。这样很便捷并且可以防止独立资源的丢失。尽管如此，这还是会引起资源的重复。比如，以上面使用同一个材质的两个岩石柱为例，如果两个岩石柱分开在不同的两个 AssetBundles 中并且这个材质没有显式的指定到一个 AssetBundle 上，这个材质就会被加入到这两个包含岩石柱的 AssetBndles 中。这个值得注意，两个重复的资源现在被存储到各自的 AssetBundle 中，资源的依赖性被分离了。每个模型资源现在依赖于各自的材质资源的本地拷贝，丢失了共享材质的优势。为了比避免这个发生，这个材质需要显式的指定到一个 AssetBundle 中。这样 AssetBundle 可以自己使用它也，也可以和其他资源一起共享。这种情况下，拥有岩石柱的 AssetBundles 依赖于拥有岩石材质的 AssetBundle 了。\n\n<div style='display:none'>\nThe dependencies and other information for a project’s AssetBundles are stored in a Manifest. The manifest is very much like a “table of contents” for the project’s AssetBundles. When AssetBundles are built, Unity generates a large amount of data. The details of this data are saved in the Manifest. There is one Manifest created for each target platform. The Manifest lists all of the AssetBundles created from the project for the current build target, and stores and tracks all of their dependencies. With the Manifest, it is possible to query all AssetBundles and all their dependencies.\n</div>\n\n项目的 AssetBundle 的依赖和其他信息存储在 **清单(Manifest)** 中。清单非常像关于项目的 AssetBundles 的 \"目录\"。当 AssetBundle 在编译的时候，Unity 会生产大量的数据。数据的细节存储在清单里。每个平台都会创建一个清单。清单为编译对象列举了所有从项目创建的 AssetBundles，存储位置和跟踪他们的依赖。利用清单，可以查询所有的 AssetBundles 和他们的依赖。\n\n<div style='display:none'>\nThere is one special setup for AssetBundles called AssetBundle Variants. AssetBundle Variants are designed to support one specific use case - remapping a choice of different Assets to individual objects in a project. This is particularly useful when working with projects that need to select one Asset from a wide variety of different possible choices based on criteria like resolution, language, localization, or user preference. AssetBundle Variants can hold the variety of Assets required to cover all supported options for an object and the desired Asset can be mapped to that object as needed from the chosen AssetBundle Variant.\n</div>\n\n对于 AssetBundles 有一种特殊设置，叫做 AssetBundle 变体。AssetBundle 变体被设计来支持更特殊的使用场景 - 对单独的对象映射不同的资源选择。这对于需要依据一些标准，如分辨率，语言，地区或者用户偏好来从很多可能中选择一个资源的项目特别有用。AssetBundle 变体可以包含用来覆盖所有支持的选项的多种资源，\n并且按需从选择的 AssetBundle 变体中映射期望的资源到对象上。\n\n<div style='display:none'>\nAssetBundles are files which contain asset files such as models, materials, textures and scenes. AssetBundles are created by the Unity editor during edit-time and can be used later at run-time by a built application. AssetBundles are designed to load Assets on demand from a local or remote source. AssetBundles can have Variants which can be mapped to objects in the scene depending upon the user’s preference.\n</div>\n\nAesstBundles 是包含模型，材质，纹理和场景文件等资源文件的文件。AssetBundles 在编辑器的编辑期创建，可以被编译出来的程序之后使用。AssetBundles 被设计来从本地或远程源中按需加载资源。AssetBundles 可以拥有变体，可以基于用户偏好映射到对象上。\n\n<div style='display:none'>\nFor more detailed information about working with AssetBundles and the AssetBundle Manager, please see the next tutorial lesson in this series.\n</div>\n\n关于使用 AssetBundle 和  AssetBundle Manger 的更多细节，请看这系列的下一个教程。","slug":"AssetBundleAndABManage_1","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkatx00002quo33xaxwaa"},{"title":"UNet 0x01：网络连接的建立","date":"2015-08-06T08:43:00.000Z","_content":"\n看到标题后，没接触过的朋友脑中可能会闪现出这样一个问题： UNet 是什么 ? 其实它是 Unity 5.1 版本新引入的网络系统。官方论坛里面称这个系统为 UNet, 那我们按照官方的习惯来。\n\n[官方手册文档](http://docs.unity3d.com/Manual/UNetOverview.html) 介绍其主要有两类功能（按 API 抽象层次来分）：\n\n* 低层次 [NetworkTransport API](http://docs.unity3d.com/Manual/UNetUsingTransport.html)， 适合于用来构建更复杂高级的多人游戏或者网络基础平台\n* 高层次的 High Level API，也叫做 HLAPI，建立在 NetworkTransport 之上。适合开发多人游戏\n\n这篇文章将只涉及 High Level API。我们的目的是建立（Client 于 Server 间的）网络连接。\n\n\n### UNet 的 Server / Client / Host\n\n在 UNet 先系统中会出现 1 个 Server 和 n 个 Client (n >= 0)。当没有专门的 Server 的时候，其中一个 Client 会充当 Server 的作用，这个即是 Client 又是 Server 的端在 UNet 中\n被称为 Host。 Host 在同一个进程里面执行 Server 和 Client, 这个 Client　有个专门的名字叫做 Local Client。它跟 Local Server 之间是通过 __消息队列__ 和 __直接的函数调__ 用来通信的。 \n\n<!--more-->\n\nUnity3d 网站上有张图能比较明显的表达 Server / Client / Local Client / Host 直接的关系，让我们把它偷过来。:)\n\n![NetworkHost](/images/UNet/NetworkHost.png)\n\n### Server 创建\n\nUnity 给我们提供了 [NetworkServer](http://docs.unity3d.com/ScriptReference/Networking.NetworkServer.html) 类，他的静态方法 `Listen(int serverPort)` 会打开一个端口监听。\n\n示例代码如下：\n\n{% codeblock %}\nNetworkServer.Listen(listenPort);\n{% endcodeblock %}\n\n### Client 创建\n\n从前面的途中我们知道有 Local Client 和 Remote Client 之分，他们的创建方法也是不一样的。\n\n* Local Client：使用 `ClientScene.ConnectLocalServer()` 静态方法创建\n* Remote Client：Unity 给我们提供过了 [NetworkClient](http://docs.unity3d.com/ScriptReference/Networking.NetworkClient.html) 类来创建。类的实例就是 Remote Client。\n\n示例代码如下：\n\n{% codeblock %}\n// Remote Client\nNetworkClient client = new NetworkClient(); \n\n// Local Client\nNetworkClient client = ClientScene.ConnectLocalServer();\n{% endcodeblock %}\n\t\n### 事件注册 RegisterHandler\n\n其实现在添加这节内容处在只是为了接下来代码答应的调试信息。NetworkServer 和 NetworkClient 类都有 `RegisterHandler(short msgType, Networking.NetworkMessageDelegate handler);` \n方法，这个方法用来来注册对应消息的处理函数。它有两个参数：\n\n* 第一个参数 msgType 是个 short 类型，Unity 提供 [MsgType](http://docs.unity3d.com/ScriptReference/Networking.MsgType.html) 类来得到所有内置的数值。\n当然我们也可以自定义数值哦~~\n* 第二个参数 handler 是 NetworkMessageDelegate 类型，类型的原型是 __delegate void NetworkMessageDelegate( Networking.NetworkMessage netMsg )__。\n这是 C# 中的 delegate, 我们要提供的消息响应函数。\n\n\n在本节例子中，我们在 Server 和 Client 端都注册 `MsgType.Connect` 消息，然后其响应函数为 `OnConnected(NetworkMessage msg)`。\n\n{% codeblock %}\nprivate void OnConnected(NetworkMessage msg)\n{\n    // Do someting\n}\n{% endcodeblock %}\t\n\n### 代码\n\n对了，在提供 sample 代码之前，需要说明一下，UNet 的类和其他类型都在 `UnityEngine.Networking` 这个命名空间之下。\n\nServer 端的代码：\n\n{% codeblock %}\nusing UnityEngine;\nusing UnityEngine.Networking;\n\npublic class SetupServer : MonoBehaviour\n{\n    public int listenPort = 4444;\n\n    void Start()\n    {\n        ServerSetup();\n    }\n\n    private void ServerSetup()\n    {\n        NetworkServer.Listen(listenPort);\n        NetworkServer.RegisterHandler(MsgType.Connect, OnConnected);\n    }\n    \n    private void OnConnected(NetworkMessage msg)\n    {\n        Debug.Log(\"Server: connection happen\");\n    }\n}\n{% endcodeblock %}\n\nClient 端的代码：\n\n{% codeblock %}\nusing UnityEngine;\nusing UnityEngine.Networking;\n\npublic class SetupClient : MonoBehaviour\n{\n    public string server = \"127.0.0.1\";\n    public int port = 4444;\n    public bool isLocal = false;\n\n    void Start()\n    {\n        if (isLocal)\n        {\n            LocalClientSetup();\n        }\n        else\n        {\n            ClientSetup();\n        }\n    }\n\n    private void ClientSetup()\n    {\n        NetworkClient client = new NetworkClient();\n        client.RegisterHandler(MsgType.Connect, OnConnected);\n        client.Connect(server, port);\n    }\n    \n    private void LocalClientSetup()\n    {\n        NetworkClient client = ClientScene.ConnectLocalServer();\n        client.RegisterHandler(MsgType.Connect, OnConnected);\n    }\n    \n    private void OnConnected(NetworkMessage msg) \n    {\n        Debug.Log(string.Format(\"Client: connected to server {0}\", server));\n    }\n}\n{% endcodeblock %}\n\n我们把上面两个脚本都挂在 GameObject 上, 设置 SetupClient 脚本的 isLocal 字段值为 false，然后运行。输出结果为：\n\n![output](/images/UNet/outputResult.PNG)\n\n\n代码的 Github 地址 <https://github.com/wudixiaop/UNet/tree/master/Assets/101%20-%20server%20and%20client> 。","source":"_posts/uNET_1.md","raw":"title: UNet 0x01：网络连接的建立\ndate: 2015-08-06 16:43\ncategory: Unity\ntags: UNet\n---\n\n看到标题后，没接触过的朋友脑中可能会闪现出这样一个问题： UNet 是什么 ? 其实它是 Unity 5.1 版本新引入的网络系统。官方论坛里面称这个系统为 UNet, 那我们按照官方的习惯来。\n\n[官方手册文档](http://docs.unity3d.com/Manual/UNetOverview.html) 介绍其主要有两类功能（按 API 抽象层次来分）：\n\n* 低层次 [NetworkTransport API](http://docs.unity3d.com/Manual/UNetUsingTransport.html)， 适合于用来构建更复杂高级的多人游戏或者网络基础平台\n* 高层次的 High Level API，也叫做 HLAPI，建立在 NetworkTransport 之上。适合开发多人游戏\n\n这篇文章将只涉及 High Level API。我们的目的是建立（Client 于 Server 间的）网络连接。\n\n\n### UNet 的 Server / Client / Host\n\n在 UNet 先系统中会出现 1 个 Server 和 n 个 Client (n >= 0)。当没有专门的 Server 的时候，其中一个 Client 会充当 Server 的作用，这个即是 Client 又是 Server 的端在 UNet 中\n被称为 Host。 Host 在同一个进程里面执行 Server 和 Client, 这个 Client　有个专门的名字叫做 Local Client。它跟 Local Server 之间是通过 __消息队列__ 和 __直接的函数调__ 用来通信的。 \n\n<!--more-->\n\nUnity3d 网站上有张图能比较明显的表达 Server / Client / Local Client / Host 直接的关系，让我们把它偷过来。:)\n\n![NetworkHost](/images/UNet/NetworkHost.png)\n\n### Server 创建\n\nUnity 给我们提供了 [NetworkServer](http://docs.unity3d.com/ScriptReference/Networking.NetworkServer.html) 类，他的静态方法 `Listen(int serverPort)` 会打开一个端口监听。\n\n示例代码如下：\n\n{% codeblock %}\nNetworkServer.Listen(listenPort);\n{% endcodeblock %}\n\n### Client 创建\n\n从前面的途中我们知道有 Local Client 和 Remote Client 之分，他们的创建方法也是不一样的。\n\n* Local Client：使用 `ClientScene.ConnectLocalServer()` 静态方法创建\n* Remote Client：Unity 给我们提供过了 [NetworkClient](http://docs.unity3d.com/ScriptReference/Networking.NetworkClient.html) 类来创建。类的实例就是 Remote Client。\n\n示例代码如下：\n\n{% codeblock %}\n// Remote Client\nNetworkClient client = new NetworkClient(); \n\n// Local Client\nNetworkClient client = ClientScene.ConnectLocalServer();\n{% endcodeblock %}\n\t\n### 事件注册 RegisterHandler\n\n其实现在添加这节内容处在只是为了接下来代码答应的调试信息。NetworkServer 和 NetworkClient 类都有 `RegisterHandler(short msgType, Networking.NetworkMessageDelegate handler);` \n方法，这个方法用来来注册对应消息的处理函数。它有两个参数：\n\n* 第一个参数 msgType 是个 short 类型，Unity 提供 [MsgType](http://docs.unity3d.com/ScriptReference/Networking.MsgType.html) 类来得到所有内置的数值。\n当然我们也可以自定义数值哦~~\n* 第二个参数 handler 是 NetworkMessageDelegate 类型，类型的原型是 __delegate void NetworkMessageDelegate( Networking.NetworkMessage netMsg )__。\n这是 C# 中的 delegate, 我们要提供的消息响应函数。\n\n\n在本节例子中，我们在 Server 和 Client 端都注册 `MsgType.Connect` 消息，然后其响应函数为 `OnConnected(NetworkMessage msg)`。\n\n{% codeblock %}\nprivate void OnConnected(NetworkMessage msg)\n{\n    // Do someting\n}\n{% endcodeblock %}\t\n\n### 代码\n\n对了，在提供 sample 代码之前，需要说明一下，UNet 的类和其他类型都在 `UnityEngine.Networking` 这个命名空间之下。\n\nServer 端的代码：\n\n{% codeblock %}\nusing UnityEngine;\nusing UnityEngine.Networking;\n\npublic class SetupServer : MonoBehaviour\n{\n    public int listenPort = 4444;\n\n    void Start()\n    {\n        ServerSetup();\n    }\n\n    private void ServerSetup()\n    {\n        NetworkServer.Listen(listenPort);\n        NetworkServer.RegisterHandler(MsgType.Connect, OnConnected);\n    }\n    \n    private void OnConnected(NetworkMessage msg)\n    {\n        Debug.Log(\"Server: connection happen\");\n    }\n}\n{% endcodeblock %}\n\nClient 端的代码：\n\n{% codeblock %}\nusing UnityEngine;\nusing UnityEngine.Networking;\n\npublic class SetupClient : MonoBehaviour\n{\n    public string server = \"127.0.0.1\";\n    public int port = 4444;\n    public bool isLocal = false;\n\n    void Start()\n    {\n        if (isLocal)\n        {\n            LocalClientSetup();\n        }\n        else\n        {\n            ClientSetup();\n        }\n    }\n\n    private void ClientSetup()\n    {\n        NetworkClient client = new NetworkClient();\n        client.RegisterHandler(MsgType.Connect, OnConnected);\n        client.Connect(server, port);\n    }\n    \n    private void LocalClientSetup()\n    {\n        NetworkClient client = ClientScene.ConnectLocalServer();\n        client.RegisterHandler(MsgType.Connect, OnConnected);\n    }\n    \n    private void OnConnected(NetworkMessage msg) \n    {\n        Debug.Log(string.Format(\"Client: connected to server {0}\", server));\n    }\n}\n{% endcodeblock %}\n\n我们把上面两个脚本都挂在 GameObject 上, 设置 SetupClient 脚本的 isLocal 字段值为 false，然后运行。输出结果为：\n\n![output](/images/UNet/outputResult.PNG)\n\n\n代码的 Github 地址 <https://github.com/wudixiaop/UNet/tree/master/Assets/101%20-%20server%20and%20client> 。","slug":"uNET_1","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkauz00082quovzf8pl37"},{"title":"好玩：如何把 Github Contributions 填充满","date":"2015-07-21T04:50:00.000Z","_content":"\n先看效果：  \n\n![rockstar](/images/RockStar/rockstar.PNG)\n\n我们要使用 RockStar 这个 python 工具来实现这个效果。RockStar 的 Github 地址 [撮这里](https://github.com/avinassh/rockstar)。\n\nRockStar 只支持 Python 3，不能在 Python 2 上面。如果本机没有 Pyhon3 可以从 <http://python.org> 里面下载安装，当前版本的下载地址为 <https://www.python.org/downloads/release/python-343/>。\n\n使用 python 前我们需要在环境变量中加入 python3 的安装路径和脚本文件的路径。假如我们安装在 `C:\\Python34` 文件夹下，则加入下面地址到环境变量 `PATH` 中\n\n> C:\\Python34;C:\\Python34\\Scripts\n\n\n上面设置完成之后我们就可以用 python 来玩耍啦。首先我们打开命令行来安装 RockStar ，输入\n\n> pip install rockstar\n\n输入完成之后, 我们创建一个新文件夹，比如叫做 RSFunny, 并在这个文件夹下面创建一个 python 脚本，比如叫做 rockstar.py。 脚步的内容如下：\n\n<!--more-->\n\n{% codeblock %}\nfrom RockStar import RockStar\n\ncsharp_code = \"\"\"using System;\n\nclass HelloWorld\n{\n    static void Main()\n    {\n        Console.WriteLine(\"I'm Rocky\");\n    }\n}\"\"\"\n\n# 400 天\nrock_it_bro = RockStar(days=400, file_name='rockstar.cs', code=csharp_code)\nrock_it_bro.make_me_a_rockstar()\n{% endcodeblock %}\n\n更多的例子我们能参考这里 <https://github.com/avinassh/rockstar/tree/master/examples>。\n\t\n接下来，在命令行中跳转到到 RSFunny 目录下, 准备运行 rockstar.py。这里需要注意一下，因为脚本需要用到 git.exe，所以我们需要把 git.exe 的路径加入到当前的环境变量 `PATH` 中，不然会抛出找不到文件的错误。\n如果安装了 Github for Windows 客户端，我们可以从客户端的安装目录 `%AppData%\\..\\Local\\GitHub` 下找到 git.exe。添加完后，我们运行脚本：  \n\n> python rockstar.py\n\n运行完后，脚本将 RSFunny 目录变成一个 git 仓库。\n\n好了，万事具备，只欠发布到 Github 了。 建议使用最新版 Github for Windows 客户端，简单快捷，居家旅行必备。。。\n\n不知道怎么在 Github for Windows 客户端添加？ 那就点点左上角的 + 号，然后结合下面这个截图看看，相信应有收获的。 :) \n\n![gitAddRepo](/images/RockStar/gitAddRepo.PNG)\n\nEnjoy!\n","source":"_posts/rockstar.md","raw":"title: 好玩：如何把 Github Contributions 填充满\ndate: 2015-07-21 12:50\ncategory: 一点一滴\ntags: Python\n---\n\n先看效果：  \n\n![rockstar](/images/RockStar/rockstar.PNG)\n\n我们要使用 RockStar 这个 python 工具来实现这个效果。RockStar 的 Github 地址 [撮这里](https://github.com/avinassh/rockstar)。\n\nRockStar 只支持 Python 3，不能在 Python 2 上面。如果本机没有 Pyhon3 可以从 <http://python.org> 里面下载安装，当前版本的下载地址为 <https://www.python.org/downloads/release/python-343/>。\n\n使用 python 前我们需要在环境变量中加入 python3 的安装路径和脚本文件的路径。假如我们安装在 `C:\\Python34` 文件夹下，则加入下面地址到环境变量 `PATH` 中\n\n> C:\\Python34;C:\\Python34\\Scripts\n\n\n上面设置完成之后我们就可以用 python 来玩耍啦。首先我们打开命令行来安装 RockStar ，输入\n\n> pip install rockstar\n\n输入完成之后, 我们创建一个新文件夹，比如叫做 RSFunny, 并在这个文件夹下面创建一个 python 脚本，比如叫做 rockstar.py。 脚步的内容如下：\n\n<!--more-->\n\n{% codeblock %}\nfrom RockStar import RockStar\n\ncsharp_code = \"\"\"using System;\n\nclass HelloWorld\n{\n    static void Main()\n    {\n        Console.WriteLine(\"I'm Rocky\");\n    }\n}\"\"\"\n\n# 400 天\nrock_it_bro = RockStar(days=400, file_name='rockstar.cs', code=csharp_code)\nrock_it_bro.make_me_a_rockstar()\n{% endcodeblock %}\n\n更多的例子我们能参考这里 <https://github.com/avinassh/rockstar/tree/master/examples>。\n\t\n接下来，在命令行中跳转到到 RSFunny 目录下, 准备运行 rockstar.py。这里需要注意一下，因为脚本需要用到 git.exe，所以我们需要把 git.exe 的路径加入到当前的环境变量 `PATH` 中，不然会抛出找不到文件的错误。\n如果安装了 Github for Windows 客户端，我们可以从客户端的安装目录 `%AppData%\\..\\Local\\GitHub` 下找到 git.exe。添加完后，我们运行脚本：  \n\n> python rockstar.py\n\n运行完后，脚本将 RSFunny 目录变成一个 git 仓库。\n\n好了，万事具备，只欠发布到 Github 了。 建议使用最新版 Github for Windows 客户端，简单快捷，居家旅行必备。。。\n\n不知道怎么在 Github for Windows 客户端添加？ 那就点点左上角的 + 号，然后结合下面这个截图看看，相信应有收获的。 :) \n\n![gitAddRepo](/images/RockStar/gitAddRepo.PNG)\n\nEnjoy!\n","slug":"rockstar","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkav2000c2quoymv0jber"},{"title":"在 Unity uGUI 中绘制圆形图片","date":"2015-04-15T15:30:00.000Z","_content":"\n最近项目需要在 Unity 的新 UI 系统中实现圆形头像的功能，之前想通过 Mask 控件的方式来实现，但是一番努力后毫无头绪，只能祭上shader了。\n\n大体的思路就是在一个空的 Object 上面挂上 RawImage 组件，组件的 Material 挂上本文中的 shader。截取的逻辑是选取图片正中心 (0.5, 0.5) 为圆的中心点，绘制图片在圆内的像素点为图片的像素，然后图片在圆外的像素点设置为 alpha 为 0 的点，\n如 `(0, 0, 0, 0)`。逻辑是在 fragment shader 里面实现(shader 代码中的`frag`)。\n\n下面直接放出 shader:\n\n<!--more-->\n\n{% codeblock %}\nShader \"Sprites/Circle\"\n{\n    Properties\n    {\n    [PerRendererData] _MainTex (\"Sprite Texture\", 2D) = \"white\" {}\n    _Color (\"Tint\", Color) = (1,1,1,1)\n    _Center(\"Center\", vector) = (0.5, 0.5, 1.0, 1.0)\n    _RadiusScale(\"Radius Scale\", Range(0, 1)) = 0.5\n    _HorizontalScale(\"Horizontal Scale\", Range(0, 1.0)) = 1.0\n    _VerticalScale(\"Vertical Scale\", Range(0, 1.0)) = 1.0\n    }\n\n    SubShader\n    {\n    Tags\n    {\n        \"Queue\"=\"Overlay\"\n        \"IgnoreProjector\"=\"True\"\n        \"RenderType\"=\"Transparent\"\n        \"PreviewType\"=\"Plane\"\n        \"CanUseSpriteAtlas\"=\"True\"\n    }\n\n    Cull Off\n    Lighting Off\n    ZWrite Off\n    Blend One OneMinusSrcAlpha\n\n    Pass\n    {\n    CGPROGRAM\n        #pragma vertex vert\n        #pragma fragment frag\n        #pragma multi_compile _ PIXELSNAP_ON\n        #include \"UnityCG.cginc\"\n\n        struct appdata_t\n        {\n        float4 vertex   : POSITION;\n        float4 color    : COLOR;\n        float2 texcoord : TEXCOORD0;\n        };\n\n        struct v2f\n        {\n        float4 vertex   : SV_POSITION;\n        fixed4 color    : COLOR;\n        half2 texcoord  : TEXCOORD0;\n        };\n\n        fixed4 _Color;\n        float _RadiusScale;\n        float4 _Center;\n        float _HorizontalScale;\n        float _VerticalScale;\n\n        v2f vert(appdata_t IN)\n        {\n        v2f OUT;\n        OUT.vertex = mul(UNITY_MATRIX_MVP, IN.vertex);\n        OUT.texcoord = IN.texcoord;\n        OUT.color = IN.color * _Color;\n        #ifdef PIXELSNAP_ON\n        OUT.vertex = UnityPixelSnap (OUT.vertex);\n        #endif\n\n        return OUT;\n        }\n\n        sampler2D _MainTex;\n\n        fixed4 frag(v2f IN) : SV_Target\n        {\n        fixed4 c;\n        c = tex2D(_MainTex, IN.texcoord) * IN.color;\n\n        // adjust center and horizontal/verital scale\n        //\n        float2 scale = (_HorizontalScale, _VerticalScale);\n        float rs = length((_Center.xy - IN.texcoord.xy) / scale.xy);\n\n        if(rs < 0.5 * _RadiusScale)\n        {\n\n            c.rgb *= c.a;\n        }\n        else\n        {\n            c = (0, 0, 0, 0);\n        }\n\n        return c;\n        }\n    ENDCG\n    }\n   }\n}\n{% endcodeblock %}\n\nGithub 地址： <https://raw.githubusercontent.com/wudixiaop/Nana/master/Shader/Sprite-Circle.shader>\n","source":"_posts/cirleImageInUnity3D.md","raw":"title: 在 Unity uGUI 中绘制圆形图片\ndate: 2015-04-15 23:30\ncategory: Unity\ntags: Unity\n---\n\n最近项目需要在 Unity 的新 UI 系统中实现圆形头像的功能，之前想通过 Mask 控件的方式来实现，但是一番努力后毫无头绪，只能祭上shader了。\n\n大体的思路就是在一个空的 Object 上面挂上 RawImage 组件，组件的 Material 挂上本文中的 shader。截取的逻辑是选取图片正中心 (0.5, 0.5) 为圆的中心点，绘制图片在圆内的像素点为图片的像素，然后图片在圆外的像素点设置为 alpha 为 0 的点，\n如 `(0, 0, 0, 0)`。逻辑是在 fragment shader 里面实现(shader 代码中的`frag`)。\n\n下面直接放出 shader:\n\n<!--more-->\n\n{% codeblock %}\nShader \"Sprites/Circle\"\n{\n    Properties\n    {\n    [PerRendererData] _MainTex (\"Sprite Texture\", 2D) = \"white\" {}\n    _Color (\"Tint\", Color) = (1,1,1,1)\n    _Center(\"Center\", vector) = (0.5, 0.5, 1.0, 1.0)\n    _RadiusScale(\"Radius Scale\", Range(0, 1)) = 0.5\n    _HorizontalScale(\"Horizontal Scale\", Range(0, 1.0)) = 1.0\n    _VerticalScale(\"Vertical Scale\", Range(0, 1.0)) = 1.0\n    }\n\n    SubShader\n    {\n    Tags\n    {\n        \"Queue\"=\"Overlay\"\n        \"IgnoreProjector\"=\"True\"\n        \"RenderType\"=\"Transparent\"\n        \"PreviewType\"=\"Plane\"\n        \"CanUseSpriteAtlas\"=\"True\"\n    }\n\n    Cull Off\n    Lighting Off\n    ZWrite Off\n    Blend One OneMinusSrcAlpha\n\n    Pass\n    {\n    CGPROGRAM\n        #pragma vertex vert\n        #pragma fragment frag\n        #pragma multi_compile _ PIXELSNAP_ON\n        #include \"UnityCG.cginc\"\n\n        struct appdata_t\n        {\n        float4 vertex   : POSITION;\n        float4 color    : COLOR;\n        float2 texcoord : TEXCOORD0;\n        };\n\n        struct v2f\n        {\n        float4 vertex   : SV_POSITION;\n        fixed4 color    : COLOR;\n        half2 texcoord  : TEXCOORD0;\n        };\n\n        fixed4 _Color;\n        float _RadiusScale;\n        float4 _Center;\n        float _HorizontalScale;\n        float _VerticalScale;\n\n        v2f vert(appdata_t IN)\n        {\n        v2f OUT;\n        OUT.vertex = mul(UNITY_MATRIX_MVP, IN.vertex);\n        OUT.texcoord = IN.texcoord;\n        OUT.color = IN.color * _Color;\n        #ifdef PIXELSNAP_ON\n        OUT.vertex = UnityPixelSnap (OUT.vertex);\n        #endif\n\n        return OUT;\n        }\n\n        sampler2D _MainTex;\n\n        fixed4 frag(v2f IN) : SV_Target\n        {\n        fixed4 c;\n        c = tex2D(_MainTex, IN.texcoord) * IN.color;\n\n        // adjust center and horizontal/verital scale\n        //\n        float2 scale = (_HorizontalScale, _VerticalScale);\n        float rs = length((_Center.xy - IN.texcoord.xy) / scale.xy);\n\n        if(rs < 0.5 * _RadiusScale)\n        {\n\n            c.rgb *= c.a;\n        }\n        else\n        {\n            c = (0, 0, 0, 0);\n        }\n\n        return c;\n        }\n    ENDCG\n    }\n   }\n}\n{% endcodeblock %}\n\nGithub 地址： <https://raw.githubusercontent.com/wudixiaop/Nana/master/Shader/Sprite-Circle.shader>\n","slug":"cirleImageInUnity3D","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkav5000h2quon2n5qi4r"},{"title":"关于 Unity 编辑器一些事儿","date":"2014-11-05T14:30:00.000Z","_content":"\n** 本文只适合Unty 4.x**\n\n这里描述下Unity3D编辑器使用过程中遇到的坑及其解决方法\n\n#### 事件一：Unity3d编辑器启动时默认打开最近一次打开的项目 \n\n默认设置中，Unity3D启动时会自动打开默认最近一次打开的项目。每当只想打开小项目，而偏偏上次打开过一个大项目时，这点让人很抓狂。 \n \n**解决方法:**  \n> 1. 在编辑器中打开**Unity Preferences**窗口,通过 **Edit->Preferences...**打开\n> 2. 在**General**选项卡中把**Always Show Project Wizard**勾选上\n\n#### 事件二：Project Wizard中最近打开项目记录删除不了 \n\n一直不明白为啥不让删除呢？  \n\n**解决方法：**  \n> * **方法一：让项目地址失效**  \n>> * 重名名项目文件夹\n>> * 把项目移动到别的文件夹\n> * **方法二：修改注册表**  \n>> 删除 HKEY_CURRENT_USER\\Software\\Unity Technologies\\Unity Editor 4.x 下面以 RecentlyUsedProjectPaths 开头的项\n\n以后继续补充...\n","source":"_posts/about Unity3D editor.md","raw":"title: 关于 Unity 编辑器一些事儿\ndate: 2014-11-05 22:30\ncategory: Unity\ntags: Unity\n---\n\n** 本文只适合Unty 4.x**\n\n这里描述下Unity3D编辑器使用过程中遇到的坑及其解决方法\n\n#### 事件一：Unity3d编辑器启动时默认打开最近一次打开的项目 \n\n默认设置中，Unity3D启动时会自动打开默认最近一次打开的项目。每当只想打开小项目，而偏偏上次打开过一个大项目时，这点让人很抓狂。 \n \n**解决方法:**  \n> 1. 在编辑器中打开**Unity Preferences**窗口,通过 **Edit->Preferences...**打开\n> 2. 在**General**选项卡中把**Always Show Project Wizard**勾选上\n\n#### 事件二：Project Wizard中最近打开项目记录删除不了 \n\n一直不明白为啥不让删除呢？  \n\n**解决方法：**  \n> * **方法一：让项目地址失效**  \n>> * 重名名项目文件夹\n>> * 把项目移动到别的文件夹\n> * **方法二：修改注册表**  \n>> 删除 HKEY_CURRENT_USER\\Software\\Unity Technologies\\Unity Editor 4.x 下面以 RecentlyUsedProjectPaths 开头的项\n\n以后继续补充...\n","slug":"about Unity3D editor","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkav8000l2quokru21m20"},{"title":"远离 XCodeGhost 影响，各种 XCode 版本下载","date":"2015-09-23T08:33:00.000Z","_content":"\n最近 [XCodeGhost](http://baike.baidu.com/link?url=2582FqWOjsj0CU1shau0JPU--sgJ-moKqnYCcDy87QwZd5jPUwyxiFRbfjmrb8tpZcN8jfSu2Iw-Vokfjn8tJK) 病毒闹的沸沸扬扬,\n多款 app 受其影响。就个人觉得之所以会出现这么多从第三方下载 XCode 的情况，可能有如下几个原因引起：\n\n* 下载 XCode 太慢\n* 需要老版本的 XCode，但是苹果官网找不到 XCode 老版本\n* 习惯性从网盘等第三方下软件\n\n速度太慢的问题怎么解决相信网络上有一大推方法，这里就不多说了，下面主要列出 XCode 各个版本的下载地址（**需要 apple id**）:\n\n<!--more-->\n\n\n* Xcode 7\n\t* 7.1 beta: <https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1_beta/Xcode_7.1_beta.dmg>\n\t* 7.0 : <https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7/Xcode_7.dmg>\n* Xcode 6\n\t* 6.4: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.4/Xcode_6.4.dmg>\n\t* 6.3.2: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.3.2/Xcode_6.3.2.dmg>\n\t* 6.2: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.2/Xcode_6.2.dmg>\n\t* 6.1.1: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg>\n\t* 6.0.1: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.0.1/xcode_6.0.1.dmg>\n* Xcode 5\n\t* 5.1.1: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_5.1.1/xcode_5.1.1.dmg>\n\t* 5.0.2: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_5.0.2/xcode_5.0.2.dmg>\n* Xcode 4\n\t* 4.6.3: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg>\n\t* 4.5.2: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.5.2/xcode4520418508a.dmg>\n\t* 4.4.1: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.4.1/xcode_4.4.1_6938145.dmg>\n\t* 4.3.2: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.3.2/xcode_432_lion.dmg>\n\t* 4.2: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.2_for_lion_21264/installxcode_42_lion.dmg>\n\t* 4.1: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.1_for_lion_21263/installxcode_41_lion.dmg>\n\t* 4.0.2: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.0.2_and_ios_sdk_4.3/xcode_4.0.2_and_ios_sdk_4.3.dmg>\n* 其他更老版本\n\t* 3.2.6: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_3.2.6_and_ios_sdk_4.3__final/xcode_3.2.6_and_ios_sdk_4.3.dmg>\n\t* 3.1.4: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_3.1.4_developer_tools/xcode314_2809_developerdvd.dmg>\n\t* 3.0: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_3.0/xcode_3.0.dmg>\n\t* 2.5: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_2.5_developer_tools/xcode25_8m2558_developerdvd.dmg>\n\t* 2.4.1: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_2.4.1/xcode_2.4.1_8m1910_6936315.dmg>\n\t* 2.3: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_2.3/xcode_2.3_8m1780_oz693620813.dmg>\n\t* 2.2.1: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_tools_2.2.1/xcode_2.2.1_8g1165_018213632.dmg>\n\t* 1.5: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_v1.5/xcode_tools_1.5_cd.dmg.bin>\n\t* 1.0: <http://developer.apple.com/devcenter/download.action?path=/Mac_OS_X/Mac_OS_X_10.3_Build_7B85/7B85_Xcode_CD.dmg>\n\t\n下载地址来源于 <http://stackoverflow.com/questions/10335747/how-to-download-xcode-4-5-6-7-and-get-the-dmg-file>。","source":"_posts/Xcode download.md","raw":"title: 远离 XCodeGhost 影响，各种 XCode 版本下载\ndate: 2015-09-23 16:33\ncategory: Unity\ntags: Unity\n---\n\n最近 [XCodeGhost](http://baike.baidu.com/link?url=2582FqWOjsj0CU1shau0JPU--sgJ-moKqnYCcDy87QwZd5jPUwyxiFRbfjmrb8tpZcN8jfSu2Iw-Vokfjn8tJK) 病毒闹的沸沸扬扬,\n多款 app 受其影响。就个人觉得之所以会出现这么多从第三方下载 XCode 的情况，可能有如下几个原因引起：\n\n* 下载 XCode 太慢\n* 需要老版本的 XCode，但是苹果官网找不到 XCode 老版本\n* 习惯性从网盘等第三方下软件\n\n速度太慢的问题怎么解决相信网络上有一大推方法，这里就不多说了，下面主要列出 XCode 各个版本的下载地址（**需要 apple id**）:\n\n<!--more-->\n\n\n* Xcode 7\n\t* 7.1 beta: <https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1_beta/Xcode_7.1_beta.dmg>\n\t* 7.0 : <https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7/Xcode_7.dmg>\n* Xcode 6\n\t* 6.4: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.4/Xcode_6.4.dmg>\n\t* 6.3.2: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.3.2/Xcode_6.3.2.dmg>\n\t* 6.2: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.2/Xcode_6.2.dmg>\n\t* 6.1.1: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg>\n\t* 6.0.1: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.0.1/xcode_6.0.1.dmg>\n* Xcode 5\n\t* 5.1.1: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_5.1.1/xcode_5.1.1.dmg>\n\t* 5.0.2: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_5.0.2/xcode_5.0.2.dmg>\n* Xcode 4\n\t* 4.6.3: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg>\n\t* 4.5.2: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.5.2/xcode4520418508a.dmg>\n\t* 4.4.1: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.4.1/xcode_4.4.1_6938145.dmg>\n\t* 4.3.2: <https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.3.2/xcode_432_lion.dmg>\n\t* 4.2: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.2_for_lion_21264/installxcode_42_lion.dmg>\n\t* 4.1: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.1_for_lion_21263/installxcode_41_lion.dmg>\n\t* 4.0.2: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.0.2_and_ios_sdk_4.3/xcode_4.0.2_and_ios_sdk_4.3.dmg>\n* 其他更老版本\n\t* 3.2.6: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_3.2.6_and_ios_sdk_4.3__final/xcode_3.2.6_and_ios_sdk_4.3.dmg>\n\t* 3.1.4: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_3.1.4_developer_tools/xcode314_2809_developerdvd.dmg>\n\t* 3.0: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_3.0/xcode_3.0.dmg>\n\t* 2.5: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_2.5_developer_tools/xcode25_8m2558_developerdvd.dmg>\n\t* 2.4.1: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_2.4.1/xcode_2.4.1_8m1910_6936315.dmg>\n\t* 2.3: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_2.3/xcode_2.3_8m1780_oz693620813.dmg>\n\t* 2.2.1: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_tools_2.2.1/xcode_2.2.1_8g1165_018213632.dmg>\n\t* 1.5: <http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_v1.5/xcode_tools_1.5_cd.dmg.bin>\n\t* 1.0: <http://developer.apple.com/devcenter/download.action?path=/Mac_OS_X/Mac_OS_X_10.3_Build_7B85/7B85_Xcode_CD.dmg>\n\t\n下载地址来源于 <http://stackoverflow.com/questions/10335747/how-to-download-xcode-4-5-6-7-and-get-the-dmg-file>。","slug":"Xcode download","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkava000o2quo1pxzudv3"},{"title":"Why I start ShaderlabVS","date":"2014-08-31T12:35:00.000Z","_content":"\nLast month, [SyntaxTree](http://unityvs.com/), the creator of UnityVS plugin for Visual Studio was acquired by Microsoft. Microsoft have published the UnityVS to Visual Studio users for free at the end of July.\n\nUnityVS is cool tool that make it's possible to debug Unity scripts in VS. But the tool is not support the Unity shaderlab syntax. it's pain for me to read/write shader in VS, So I created the ShaderlabVS to help myself and may would help someone who need it.\n","source":"_posts/Why I start ShaderlabVS.md","raw":"title: Why I start ShaderlabVS\ndate: 2014-08-31 20:35\ncategory: Shader\ntags: Shader\n---\n\nLast month, [SyntaxTree](http://unityvs.com/), the creator of UnityVS plugin for Visual Studio was acquired by Microsoft. Microsoft have published the UnityVS to Visual Studio users for free at the end of July.\n\nUnityVS is cool tool that make it's possible to debug Unity scripts in VS. But the tool is not support the Unity shaderlab syntax. it's pain for me to read/write shader in VS, So I created the ShaderlabVS to help myself and may would help someone who need it.\n","slug":"Why I start ShaderlabVS","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkavc000r2quoqnawtwbj"},{"title":"如何在Visual Studio中愉快的玩耍","date":"2014-12-24T06:50:00.000Z","_content":"\n好吧，其实我想要说一些我觉得可以在Visual Studio中提高效率的经验。下面直接进入正题：\n\n### 熟记并使用各种快捷键\n快捷键之所以叫快捷键就是因为它会让事情变得更快捷。好吧，其实我知道前面一句废话。下面就列举一些碰上常用的(基于Visual C# 2005快捷键映射)\n\n<!--more-->\n\n\n> * 注释: **Ctrl + E, C** (也就是，先**Ctrl**和**E**一起摁，然后摁**C**. 下面碰到有带组合键的情况类似)\n> * 取消注释: **Ctrl + E, U**\n> * 整行剪切: **Ctrl + X**\n> * 收起/展开光标所在行的概述(Outlining): **Ctrl + M, M**\n> * 收起概述(Outlining)到定义: **Ctrl + M, O**\n> * 收起/展开所有概述(Outlining): **Ctrl + M, L**\n> * 呼出自动补全窗口: **Ctrl + J**\n> * 回跳到光标上一次所在位置: **Ctrl + -** (这是减号)\n> * MSDN帮助: **F1** (光标移到类名或者方法名上，然后摁**F1**)\n> * 运行: **F5**\n> * 编译: **F6**\n> * 调试时Step Over/In: **F10**/**F11**\n> * 跳转到定义: **F12**\n> * 搜索和替换窗口: **Ctrl + Shift + F** 或者 **Ctrl + Shift + H**\n> * 当然还有超级好用的自能感应: **Ctrl + .** (或者**Ctrl + Shift + F10**)\n\n\n当然还有很多其他快捷，但是平时自己用的少，就不列举了。\n\n\n### 偷懒技巧一：使用代码片段管理器(Code Snippets Manager)\n\n\n如果还不知道有这个东西的童鞋可以在Vistual Studio的工具菜单中找到。具体怎么用大家可以参照别的童鞋们的文章\n\n\n* [Visual Studio 小技巧：自定义代码片断](http://www.cnblogs.com/cyq1162/archive/2013/06/14/3135373.html)\n* [使用Visual Studio Snippet(片断)提交开发效率](http://kb.cnblogs.com/page/42164/)\n\n\n简单一句话描述Code Snippets使用就是：如果用C#举例，编写代码的时候，输入代码片段的快捷键(比如for), 然后摁两下Tab键，接下来就知道怎么做了。\n\n\n按惯例，列举一些C#常用的:\n> * 循环: **for**, **foreach**\n> * 生成类: **class**\n> * 生成构造函数: **ctor**\n> * 生成属性: **prop**, **propfull**, **propdp**(Wpf系列中的依赖属性)\n\n\n### 偷懒技巧二: Toolbox\n\n文字看多了，咱们来看视频吧\n\n{% iframe //channel9.msdn.com/Series/vstips/lazycodesnippets/player?format=html5 %}\n\n### 成为高手~~\n\n\n不想成为标题党的程序员不是一个好写手。好吧，其实我是来推荐**VsVim**这个插件的。。。\n\n\n首先，我们需要安装**VsVim**。童鞋们可以在VS工具菜单下的扩展及更新(Extension and Updates)里查找并安装。具体可以参照这篇文章: <http://www.tuicool.com/articles/YF7RNv>\n\n\n然后开始练技能打怪练级:\n\n\n* <http://coolshell.cn/articles/5426.html>\n* <https://github.com/jaredpar/VsVim/wiki/faq>\n\n\n再然后会慢慢发现平时编码时摸鼠标的次数越来少。。。\n\n再然后。。。没有再然后了。。\n","source":"_posts/VSTips.md","raw":"title: 如何在Visual Studio中愉快的玩耍\ncategory: 一点一滴\ndate: 2014-12-24 14:50\ntags: Visual Studio\n---\n\n好吧，其实我想要说一些我觉得可以在Visual Studio中提高效率的经验。下面直接进入正题：\n\n### 熟记并使用各种快捷键\n快捷键之所以叫快捷键就是因为它会让事情变得更快捷。好吧，其实我知道前面一句废话。下面就列举一些碰上常用的(基于Visual C# 2005快捷键映射)\n\n<!--more-->\n\n\n> * 注释: **Ctrl + E, C** (也就是，先**Ctrl**和**E**一起摁，然后摁**C**. 下面碰到有带组合键的情况类似)\n> * 取消注释: **Ctrl + E, U**\n> * 整行剪切: **Ctrl + X**\n> * 收起/展开光标所在行的概述(Outlining): **Ctrl + M, M**\n> * 收起概述(Outlining)到定义: **Ctrl + M, O**\n> * 收起/展开所有概述(Outlining): **Ctrl + M, L**\n> * 呼出自动补全窗口: **Ctrl + J**\n> * 回跳到光标上一次所在位置: **Ctrl + -** (这是减号)\n> * MSDN帮助: **F1** (光标移到类名或者方法名上，然后摁**F1**)\n> * 运行: **F5**\n> * 编译: **F6**\n> * 调试时Step Over/In: **F10**/**F11**\n> * 跳转到定义: **F12**\n> * 搜索和替换窗口: **Ctrl + Shift + F** 或者 **Ctrl + Shift + H**\n> * 当然还有超级好用的自能感应: **Ctrl + .** (或者**Ctrl + Shift + F10**)\n\n\n当然还有很多其他快捷，但是平时自己用的少，就不列举了。\n\n\n### 偷懒技巧一：使用代码片段管理器(Code Snippets Manager)\n\n\n如果还不知道有这个东西的童鞋可以在Vistual Studio的工具菜单中找到。具体怎么用大家可以参照别的童鞋们的文章\n\n\n* [Visual Studio 小技巧：自定义代码片断](http://www.cnblogs.com/cyq1162/archive/2013/06/14/3135373.html)\n* [使用Visual Studio Snippet(片断)提交开发效率](http://kb.cnblogs.com/page/42164/)\n\n\n简单一句话描述Code Snippets使用就是：如果用C#举例，编写代码的时候，输入代码片段的快捷键(比如for), 然后摁两下Tab键，接下来就知道怎么做了。\n\n\n按惯例，列举一些C#常用的:\n> * 循环: **for**, **foreach**\n> * 生成类: **class**\n> * 生成构造函数: **ctor**\n> * 生成属性: **prop**, **propfull**, **propdp**(Wpf系列中的依赖属性)\n\n\n### 偷懒技巧二: Toolbox\n\n文字看多了，咱们来看视频吧\n\n{% iframe //channel9.msdn.com/Series/vstips/lazycodesnippets/player?format=html5 %}\n\n### 成为高手~~\n\n\n不想成为标题党的程序员不是一个好写手。好吧，其实我是来推荐**VsVim**这个插件的。。。\n\n\n首先，我们需要安装**VsVim**。童鞋们可以在VS工具菜单下的扩展及更新(Extension and Updates)里查找并安装。具体可以参照这篇文章: <http://www.tuicool.com/articles/YF7RNv>\n\n\n然后开始练技能打怪练级:\n\n\n* <http://coolshell.cn/articles/5426.html>\n* <https://github.com/jaredpar/VsVim/wiki/faq>\n\n\n再然后会慢慢发现平时编码时摸鼠标的次数越来少。。。\n\n再然后。。。没有再然后了。。\n","slug":"VSTips","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkave000w2quo1ng84yla"},{"title":"如何在Github for Mac/Windows上使用非Github的仓库","date":"2015-01-28T08:54:00.000Z","_content":"\n__[2015-08-14 更新]__ 之前的 Github for Windows 和 Github for Mac 已经合并成 Github Desktop 了。下载地址为 <https://desktop.github.com>\n\n你或许跟我一样，不想花太多时间去\"精通\"git的各种命令，想用简单明了的方法来玩git。而Github的客户端恰是这种良药。使用过的童鞋可能有过跟我一样困惑：Github客户端在界面上只能管理Github的代码仓库，怎么才能管理非Github的仓库呢？\n\n\n这个问题也就是本文要解决的内容。先讲Github for Mac, 然后是Github for Windows\n\n<!--more-->\n\n### Github for Mac\n\n首先创建一个本地的仓库, 假设取名为**Freekick**\n\n![mac_1](/images/GitClient/mac_1.png)\n\n然后把git仓库的https地址设置为**Freekick**仓库的**Primary remote repository**。在**Settings**选项卡中设置。\n\n![mac_2](/images/GitClient/mac_2.png)\n\n上一步完成之后点击**Updae Remote**按钮，之后会弹出输入账号密码的对话框。输入正确的账号密码即可。\n\n![mac_3](/images/GitClient/mac_3.png)\n\n然后切换到**Changes**选项卡，点击右上角的**publish**按钮。\n\n![mac_4](/images/GitClient/mac_4.png)\n\n最后Github for Mac会自动同步仓库。\n\n![mac_5](/images/GitClient/mac_5.png)\n\n### Github for Windows\n\n在Windows上只需要把git仓库的https地址拖拽到Github for Windows客户端上，然后会弹出对话框。输入正确的账号密码后，Github for Windows会自动同步代码。拖拽的时候最好把浏览器窗户缩小，如下图所示\n\n![windows_1](/images/GitClient/windows_1.png)\n\n### 写在最后\n\nGithub客户端不能本地创建新的仓库，然后发布到除Github之外的代码托管服务器上。如果需要新建一个仓库，我们可以先创建好一个空的新仓库，然后再用本文提到的方法来同步仓库来达到目的。\n\n另外，由于Github客户端是为Github量身定做的，当管理非Github仓库时，会有少量跟github相关的功能不能用。但是个人觉得这个不影响体验。我们可以通过下面的地址在官方下载Github客户端：\n\n- **Github for Windows:** <https://windows.github.com/>  \n- **Github for Mac:** <https://mac.github.com/>\n","source":"_posts/UserGithubClientForNonGithubRepos.md","raw":"title: 如何在Github for Mac/Windows上使用非Github的仓库\ndate: 2015-1-28 16:54\ncategory: 一点一滴\ntags: Git\n---\n\n__[2015-08-14 更新]__ 之前的 Github for Windows 和 Github for Mac 已经合并成 Github Desktop 了。下载地址为 <https://desktop.github.com>\n\n你或许跟我一样，不想花太多时间去\"精通\"git的各种命令，想用简单明了的方法来玩git。而Github的客户端恰是这种良药。使用过的童鞋可能有过跟我一样困惑：Github客户端在界面上只能管理Github的代码仓库，怎么才能管理非Github的仓库呢？\n\n\n这个问题也就是本文要解决的内容。先讲Github for Mac, 然后是Github for Windows\n\n<!--more-->\n\n### Github for Mac\n\n首先创建一个本地的仓库, 假设取名为**Freekick**\n\n![mac_1](/images/GitClient/mac_1.png)\n\n然后把git仓库的https地址设置为**Freekick**仓库的**Primary remote repository**。在**Settings**选项卡中设置。\n\n![mac_2](/images/GitClient/mac_2.png)\n\n上一步完成之后点击**Updae Remote**按钮，之后会弹出输入账号密码的对话框。输入正确的账号密码即可。\n\n![mac_3](/images/GitClient/mac_3.png)\n\n然后切换到**Changes**选项卡，点击右上角的**publish**按钮。\n\n![mac_4](/images/GitClient/mac_4.png)\n\n最后Github for Mac会自动同步仓库。\n\n![mac_5](/images/GitClient/mac_5.png)\n\n### Github for Windows\n\n在Windows上只需要把git仓库的https地址拖拽到Github for Windows客户端上，然后会弹出对话框。输入正确的账号密码后，Github for Windows会自动同步代码。拖拽的时候最好把浏览器窗户缩小，如下图所示\n\n![windows_1](/images/GitClient/windows_1.png)\n\n### 写在最后\n\nGithub客户端不能本地创建新的仓库，然后发布到除Github之外的代码托管服务器上。如果需要新建一个仓库，我们可以先创建好一个空的新仓库，然后再用本文提到的方法来同步仓库来达到目的。\n\n另外，由于Github客户端是为Github量身定做的，当管理非Github仓库时，会有少量跟github相关的功能不能用。但是个人觉得这个不影响体验。我们可以通过下面的地址在官方下载Github客户端：\n\n- **Github for Windows:** <https://windows.github.com/>  \n- **Github for Mac:** <https://mac.github.com/>\n","slug":"UserGithubClientForNonGithubRepos","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkavg00102quoa56ibbbf"},{"title":"UNet 0x06：Command","date":"2015-08-23T04:01:00.000Z","_content":"\n最开始我们来对上篇文章 {% post_link UNet_5 [UNet 0x05: SyncVar] %} 中的程序做点修改。在这里也建议朋友们先阅读上篇，然后继续阅读下面内容。\n\n我们先把只在 Server 端绘制的按钮：\n\n{% codeblock %}\nif (isServer)\n{\n    if (GUI.Button(new Rect(10, 56, 160, 24), \"ChangeState\"))\n    {\n        ChangeState();\n    }\n}\n{% endcodeblock %}\n\t\n改成在 Client 端绘制\n\t\n<!--more-->\n\n\n{% codeblock %}\nif (!isServer) // 这里是改变的地方\n{\n    if (GUI.Button(new Rect(10, 56, 160, 24), \"ChangeState\"))\n    {\n        ChangeState();\n    }\n}\n{% endcodeblock %}\n\t\n改完之后我们运行程序会得到一个结果：无论我们怎么点 ChangeState 按钮，Client 端左上角文字有变化，而 Server 端左上角的文字都不会变化。\n\n这为什么呢？我们上篇文章中提到 SyncVar 只能从 Server 到 Client 端的方向起作用，所以我们上面点击 ChangeState 按钮\n是在 Client 端执行的，只改变了 Client 端的值，不会对 Server 端起作用。\n\n这篇要介绍的就是能从 Client 端做出的改变也能同步的所有终端的功能。它就是 NetworkBevhaiour 提供 __sending commands__ 功能。\n\n### Command\n\n那什么是 Command 呢？如果了解设计模式的朋友应该知道有种设计模式叫做 Command 模式（命令模式），这里的 Command 代表一种行为，\nUNet 中的 Command 也是代表一种行为，换句话说就是一个函数。但是在 UNet 中这个函数有些特别的规定，它要求：\n\n* 函数的名字 __必须以 Cmd 开头__，这里注意大小写哟。\n* 必须带上 __[Command]__ 属性\n\n用代码来示范下就是：\n\n{% codeblock %}\n[Command]\nprivate void CmdDoSomething()\n{\n    // do something\n}\n{% endcodeblock %}\n\n这里还有几点需要知道的：\n\n* Command 是从 Client 端发起的。当需要从 Client 端发出改变的时候使用它。\n* 每个客户端的 spawn 之后的对象，都会在其他各端（包括 Server）有同样的实例。而真实执行 Command 的是在 Server 上\n的那个实例。所以其实 Command 的执行最终也是在 Server 上的，只不过 Client 会发送请求，要求 Server 上对应的实例来\n执行这个 Command。这正好符合 UNet 是以 Server 为主导的理念。\n\n接下来我们继续对上篇文章中的代码做些修改。\n\n首先，我们新加入一个 Command 方法：\n\n{% codeblock %}\n[Command]\nprivate void CmdChangeState()\n{\n    ChangeState();\n}\n{% endcodeblock %}\n\t\n然后我们把 ChangeState 调用的方法从 `ChangeState()` 改成 `CmdChangeState()`：\n\n{% codeblock %}\nvoid OnGUI()\n{\n    GUI.Label(new Rect(10, 20, 120, 24), State);\n    \n    if (!isServer)\n    {\n        if (GUI.Button(new Rect(10, 56, 160, 24), \"ChangeState\"))\n        {\n            CmdChangeState();\n        }\n    }\n} \n{% endcodeblock %}\n\t\n这样我们就利用了 Command 方法 `CmdChangeState` 来作出改变了。\n\n### 示例代码\n\n下面是加上 Command 方法之后的最终代码。这样每次在 Client 端点击 ChangeState 按钮的时候，各个终端中 State 字段的值都会发生改变。\nDemo 程序的地址为: <https://github.com/wudixiaop/UNet/tree/master/Assets/106%20-%20Command> 。\n\n{% codeblock %}\nusing UnityEngine;\nusing UnityEngine.Networking;\n\npublic class CommandSample : NetworkBehaviour {\n\n[SyncVar]\nstring State = \"Init State\";\n\nprivate void ChangeState()\n{\n    State = Random.Range(0, int.MaxValue).ToString();\n}\n\n[Command]\nprivate void CmdChangeState()\n{\n    ChangeState();\n}\n\nvoid OnGUI()\n{\n    GUI.Label(new Rect(10, 20, 120, 24), State);\n    \n    if (!isServer)\n    {\n        if (GUI.Button(new Rect(10, 56, 160, 24), \"ChangeState\"))\n        {\n            //  ChangeState();\n            CmdChangeState();\n        }\n    }\n}\n{% endcodeblock %}\n\n### SyncVar Vs Command\n\n下面是一张从 Unity 手册中借来的一种图片，\n\n![UNetDirection](/images/UNet/UNetDirections.jpg)\n\n上面图中的 `State Updates` 是指的 SyncVar。我们从图中可以了解到：\n\n* SyncVar 是从 Server -> Client 方向来改变所有端的同一对象实例的状态\n* Command 是从 Client -> Server 方向来改变所有端的同一对象实例的状态","source":"_posts/UNet_6.md","raw":"title: UNet 0x06：Command\ndate: 2015-08-23 12:01\ncategory: Unity\ntags: UNet\n---\n\n最开始我们来对上篇文章 {% post_link UNet_5 [UNet 0x05: SyncVar] %} 中的程序做点修改。在这里也建议朋友们先阅读上篇，然后继续阅读下面内容。\n\n我们先把只在 Server 端绘制的按钮：\n\n{% codeblock %}\nif (isServer)\n{\n    if (GUI.Button(new Rect(10, 56, 160, 24), \"ChangeState\"))\n    {\n        ChangeState();\n    }\n}\n{% endcodeblock %}\n\t\n改成在 Client 端绘制\n\t\n<!--more-->\n\n\n{% codeblock %}\nif (!isServer) // 这里是改变的地方\n{\n    if (GUI.Button(new Rect(10, 56, 160, 24), \"ChangeState\"))\n    {\n        ChangeState();\n    }\n}\n{% endcodeblock %}\n\t\n改完之后我们运行程序会得到一个结果：无论我们怎么点 ChangeState 按钮，Client 端左上角文字有变化，而 Server 端左上角的文字都不会变化。\n\n这为什么呢？我们上篇文章中提到 SyncVar 只能从 Server 到 Client 端的方向起作用，所以我们上面点击 ChangeState 按钮\n是在 Client 端执行的，只改变了 Client 端的值，不会对 Server 端起作用。\n\n这篇要介绍的就是能从 Client 端做出的改变也能同步的所有终端的功能。它就是 NetworkBevhaiour 提供 __sending commands__ 功能。\n\n### Command\n\n那什么是 Command 呢？如果了解设计模式的朋友应该知道有种设计模式叫做 Command 模式（命令模式），这里的 Command 代表一种行为，\nUNet 中的 Command 也是代表一种行为，换句话说就是一个函数。但是在 UNet 中这个函数有些特别的规定，它要求：\n\n* 函数的名字 __必须以 Cmd 开头__，这里注意大小写哟。\n* 必须带上 __[Command]__ 属性\n\n用代码来示范下就是：\n\n{% codeblock %}\n[Command]\nprivate void CmdDoSomething()\n{\n    // do something\n}\n{% endcodeblock %}\n\n这里还有几点需要知道的：\n\n* Command 是从 Client 端发起的。当需要从 Client 端发出改变的时候使用它。\n* 每个客户端的 spawn 之后的对象，都会在其他各端（包括 Server）有同样的实例。而真实执行 Command 的是在 Server 上\n的那个实例。所以其实 Command 的执行最终也是在 Server 上的，只不过 Client 会发送请求，要求 Server 上对应的实例来\n执行这个 Command。这正好符合 UNet 是以 Server 为主导的理念。\n\n接下来我们继续对上篇文章中的代码做些修改。\n\n首先，我们新加入一个 Command 方法：\n\n{% codeblock %}\n[Command]\nprivate void CmdChangeState()\n{\n    ChangeState();\n}\n{% endcodeblock %}\n\t\n然后我们把 ChangeState 调用的方法从 `ChangeState()` 改成 `CmdChangeState()`：\n\n{% codeblock %}\nvoid OnGUI()\n{\n    GUI.Label(new Rect(10, 20, 120, 24), State);\n    \n    if (!isServer)\n    {\n        if (GUI.Button(new Rect(10, 56, 160, 24), \"ChangeState\"))\n        {\n            CmdChangeState();\n        }\n    }\n} \n{% endcodeblock %}\n\t\n这样我们就利用了 Command 方法 `CmdChangeState` 来作出改变了。\n\n### 示例代码\n\n下面是加上 Command 方法之后的最终代码。这样每次在 Client 端点击 ChangeState 按钮的时候，各个终端中 State 字段的值都会发生改变。\nDemo 程序的地址为: <https://github.com/wudixiaop/UNet/tree/master/Assets/106%20-%20Command> 。\n\n{% codeblock %}\nusing UnityEngine;\nusing UnityEngine.Networking;\n\npublic class CommandSample : NetworkBehaviour {\n\n[SyncVar]\nstring State = \"Init State\";\n\nprivate void ChangeState()\n{\n    State = Random.Range(0, int.MaxValue).ToString();\n}\n\n[Command]\nprivate void CmdChangeState()\n{\n    ChangeState();\n}\n\nvoid OnGUI()\n{\n    GUI.Label(new Rect(10, 20, 120, 24), State);\n    \n    if (!isServer)\n    {\n        if (GUI.Button(new Rect(10, 56, 160, 24), \"ChangeState\"))\n        {\n            //  ChangeState();\n            CmdChangeState();\n        }\n    }\n}\n{% endcodeblock %}\n\n### SyncVar Vs Command\n\n下面是一张从 Unity 手册中借来的一种图片，\n\n![UNetDirection](/images/UNet/UNetDirections.jpg)\n\n上面图中的 `State Updates` 是指的 SyncVar。我们从图中可以了解到：\n\n* SyncVar 是从 Server -> Client 方向来改变所有端的同一对象实例的状态\n* Command 是从 Client -> Server 方向来改变所有端的同一对象实例的状态","slug":"UNet_6","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkavi00142quoe64tyyvm"},{"title":"UNet 0x05：SyncVar","date":"2015-08-15T04:01:00.000Z","_content":"\n开篇需要先介绍一个 UNet 系统里面提供的一个类，名字叫做 __NetworkBehaviour__。看到名字，不禁让人想起\n MonoBehaviour。NetworkBehaviour 继承自 MonoBehaviour，所以基于 NetworkBehaviour 的脚本也是能挂在 \n GameObject 上面的。\n\nNetworkBehaviour 给我们提供了什么功能呢？大概是如下几点：\n\n* Synchronized Variables\n* Network callbacks\n* Server and Client functions\n* Sending Commands\n* Client RPC Calls\n* Networked Events\n\n为了让描述更准确，上面采用了 [官方手册](http://docs.unity3d.com/Manual/class-NetworkBehaviour.html) \n中的英文描述。这篇的主角就是 Synchronized Variables。\n\n<!--more-->\n\n### SyncVar 初见\n\n我们在接下来把 Synchronized Variables 简称为 SyncVar 。我们先给它来下个粗略的定义：\n\n> 它是 NetworkBehaviour 的一个带有 [SyncVar] 属性的字段\n\n注意定义中 __SyncVar 是字段，不是属性__。示意代码大概是这个样子：\n\n{% codeblock %}\npublic class SpaceShip : NetworkBehaviour\n{\n    [SyncVar]\n    public int health;\n\n    [SyncVar]\n    public string playerName;\n}\n{% endcodeblock %}\n\t\n上面代码中带有两个 SyncVar。\n\n当 SyncVar 发生改变时，UNet 会从 Server 端向所有有效的 Client 端发送这些改变。注意这里的方向，是从 Server \n到 Client ，而不是从 Client 到 Server 的方向。\n\n### SyncVar 数据类型\n\n既然 SyncVar 是字段，字段是有数据类型的。UNet 中这样规定：\n\n* __可以是__ 所有基本数据类型，比如 string，int，float，bool 等\n* __可以是__ 结构数据，比如 Vector3 等\n* __不可以是__ 类、列表、集合\n\n大概就是 __值类型可以，引用类型不可以__。当然大部分情况下是这样，特殊情况是存在的。除了 `String` 这个特殊的\n引用类型除外，下面会介绍。\n\n那就是疑问了，既然不能是列表和集合，那如果真要同步一组数组怎么办？\n\nUNet 提供了一些特殊的类，称之为 SyncList, 这些类是:\n\n* SyncListString\n* SyncListFloat\n* SyncListInt\n* SyncListUInt\n* SyncListBool \n\n他们都继承自 `SyncList<T>` 泛型类。当然内建类型有局限性，不能满足所有需求，所以 UNet 还给我们提供\n了 `SyncListStruct<T>` 泛型类，我们可以通过定义它的子类来扩展，从而达到我们的需求。下面是一个 `SyncListStruct<T>` 的例子：\n \n{% codeblock %}\npublic class MyScript : NetworkBehaviour\n{\n\n    public struct POW\n    {\n        public int pow;\n        public float f;\n    }\n\n    public class SyncListPOW : SyncListStruct<POW>\n    {\n\n    }\n\n    public SyncListPOW m_pows = new SyncListPOW();\n} \n{% endcodeblock %}\n\n注意到没有？上面的 __m_pows__ 字段并没有 [SyncVar] 属性。这里有一点非常重要，__SyncList 类型\n的字段，不需要带上 [SyncVar] 属性__。这下子，上面给出的定义要改改了。\n\n### SyncVar 定义\n\n让我们来重新给 SyncVar 下定义：\n\n> 它是 NetworkBehaviour 中的一个字段， 如果\n>\n> * 它的类型是基本类型或结构，则需要带上 [SyncVar] 属性\n> * 它的类型继承自 SyncList<T> 或者 SyncListStruct<T>，则不需要带上 [SyncVar] 属性\n\t\n### 代码示例\n\nDemo 可以再这里找到：<https://github.com/wudixiaop/UNet/tree/master/Assets/105%20-%20Sync%20Var>\n\t\nSyncVar 相关代码如下：\n\n{% codeblock %}\nusing UnityEngine.Networking;\nusing UnityEngine;\n\npublic class SyncVarSample : NetworkBehaviour\n{\n    [SyncVar]\n    string State = \"Init State\";\n\n    private void ChangeState()\n    {\n        \n        State = Random.Range(0, int.MaxValue).ToString();\n    }\n\n    void OnGUI()\n    {\n        GUI.Label(new Rect(10, 20, 120, 24), State);\n        \n        // 因为 UNet 是以 Server 为主导的系统，只有在 Server 端改变值才能起作用\n        //\n        if (isServer)\n        {\n            if (GUI.Button(new Rect(10, 56, 160, 24), \"ChangeState\"))\n            {\n                ChangeState();\n            }\n        }\n    }\n}\n{% endcodeblock %}\n\n需要将上面脚本挂到 Spawn Prefab 上面（Spawn Prefab详细参照 {% post_link UNet_4 [上一篇文章] %}）。\n\n将 Demo 程序 build 之后，单独运行 build 出来的程序，并启动 Server。在 Unity 编辑器中运行程序，连接 Server。\n我们会得到如下截图的样子。\n\n![syncvaroutput](/images/UNet/syncvarOutput.jpg)\n\n我们每次点击 ChangeState 按钮，左上角的数字就会发生变化。Server 改变了 State 字段的值，Client 端也对应发生改变。\n\n这篇就到这里。Enjoy!\n","source":"_posts/UNet_5.md","raw":"title: UNet 0x05：SyncVar\ndate: 2015-08-15 12:01\ncategory: Unity\ntags: UNet\n---\n\n开篇需要先介绍一个 UNet 系统里面提供的一个类，名字叫做 __NetworkBehaviour__。看到名字，不禁让人想起\n MonoBehaviour。NetworkBehaviour 继承自 MonoBehaviour，所以基于 NetworkBehaviour 的脚本也是能挂在 \n GameObject 上面的。\n\nNetworkBehaviour 给我们提供了什么功能呢？大概是如下几点：\n\n* Synchronized Variables\n* Network callbacks\n* Server and Client functions\n* Sending Commands\n* Client RPC Calls\n* Networked Events\n\n为了让描述更准确，上面采用了 [官方手册](http://docs.unity3d.com/Manual/class-NetworkBehaviour.html) \n中的英文描述。这篇的主角就是 Synchronized Variables。\n\n<!--more-->\n\n### SyncVar 初见\n\n我们在接下来把 Synchronized Variables 简称为 SyncVar 。我们先给它来下个粗略的定义：\n\n> 它是 NetworkBehaviour 的一个带有 [SyncVar] 属性的字段\n\n注意定义中 __SyncVar 是字段，不是属性__。示意代码大概是这个样子：\n\n{% codeblock %}\npublic class SpaceShip : NetworkBehaviour\n{\n    [SyncVar]\n    public int health;\n\n    [SyncVar]\n    public string playerName;\n}\n{% endcodeblock %}\n\t\n上面代码中带有两个 SyncVar。\n\n当 SyncVar 发生改变时，UNet 会从 Server 端向所有有效的 Client 端发送这些改变。注意这里的方向，是从 Server \n到 Client ，而不是从 Client 到 Server 的方向。\n\n### SyncVar 数据类型\n\n既然 SyncVar 是字段，字段是有数据类型的。UNet 中这样规定：\n\n* __可以是__ 所有基本数据类型，比如 string，int，float，bool 等\n* __可以是__ 结构数据，比如 Vector3 等\n* __不可以是__ 类、列表、集合\n\n大概就是 __值类型可以，引用类型不可以__。当然大部分情况下是这样，特殊情况是存在的。除了 `String` 这个特殊的\n引用类型除外，下面会介绍。\n\n那就是疑问了，既然不能是列表和集合，那如果真要同步一组数组怎么办？\n\nUNet 提供了一些特殊的类，称之为 SyncList, 这些类是:\n\n* SyncListString\n* SyncListFloat\n* SyncListInt\n* SyncListUInt\n* SyncListBool \n\n他们都继承自 `SyncList<T>` 泛型类。当然内建类型有局限性，不能满足所有需求，所以 UNet 还给我们提供\n了 `SyncListStruct<T>` 泛型类，我们可以通过定义它的子类来扩展，从而达到我们的需求。下面是一个 `SyncListStruct<T>` 的例子：\n \n{% codeblock %}\npublic class MyScript : NetworkBehaviour\n{\n\n    public struct POW\n    {\n        public int pow;\n        public float f;\n    }\n\n    public class SyncListPOW : SyncListStruct<POW>\n    {\n\n    }\n\n    public SyncListPOW m_pows = new SyncListPOW();\n} \n{% endcodeblock %}\n\n注意到没有？上面的 __m_pows__ 字段并没有 [SyncVar] 属性。这里有一点非常重要，__SyncList 类型\n的字段，不需要带上 [SyncVar] 属性__。这下子，上面给出的定义要改改了。\n\n### SyncVar 定义\n\n让我们来重新给 SyncVar 下定义：\n\n> 它是 NetworkBehaviour 中的一个字段， 如果\n>\n> * 它的类型是基本类型或结构，则需要带上 [SyncVar] 属性\n> * 它的类型继承自 SyncList<T> 或者 SyncListStruct<T>，则不需要带上 [SyncVar] 属性\n\t\n### 代码示例\n\nDemo 可以再这里找到：<https://github.com/wudixiaop/UNet/tree/master/Assets/105%20-%20Sync%20Var>\n\t\nSyncVar 相关代码如下：\n\n{% codeblock %}\nusing UnityEngine.Networking;\nusing UnityEngine;\n\npublic class SyncVarSample : NetworkBehaviour\n{\n    [SyncVar]\n    string State = \"Init State\";\n\n    private void ChangeState()\n    {\n        \n        State = Random.Range(0, int.MaxValue).ToString();\n    }\n\n    void OnGUI()\n    {\n        GUI.Label(new Rect(10, 20, 120, 24), State);\n        \n        // 因为 UNet 是以 Server 为主导的系统，只有在 Server 端改变值才能起作用\n        //\n        if (isServer)\n        {\n            if (GUI.Button(new Rect(10, 56, 160, 24), \"ChangeState\"))\n            {\n                ChangeState();\n            }\n        }\n    }\n}\n{% endcodeblock %}\n\n需要将上面脚本挂到 Spawn Prefab 上面（Spawn Prefab详细参照 {% post_link UNet_4 [上一篇文章] %}）。\n\n将 Demo 程序 build 之后，单独运行 build 出来的程序，并启动 Server。在 Unity 编辑器中运行程序，连接 Server。\n我们会得到如下截图的样子。\n\n![syncvaroutput](/images/UNet/syncvarOutput.jpg)\n\n我们每次点击 ChangeState 按钮，左上角的数字就会发生变化。Server 改变了 State 字段的值，Client 端也对应发生改变。\n\n这篇就到这里。Enjoy!\n","slug":"UNet_5","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkavk00172quophd0en43"},{"title":"UNet 0x04： 做一个简单的 Network Manager 界面","date":"2015-08-12T06:01:00.000Z","_content":"\n上一篇中我们引入了 NetworkManager 组件，然后在代码里面通过它来建立了网络连接。这篇让我们来把连接部分的代码独立出来，并提供 GUI 来达到管理 Server / Client 的开启和停止的目的。\n这样我们以后就可以重复利用代码了。\n\n下面是我们这个简单的 NetworkManger 界面提供的功能：\n\n* 可以启动 / 停止 Server，并且多个程序端只能启动一个 Server\n* 可以启动 / 停止 Client 并连接 Server\n* 当 Server 停止时，所有 Client 端界面都会重置\n\n这个简单的界面如下：\n\n<!--more-->\n\n![ui](/images/UNet/SimpleUI.PNG)\n\n本篇中的 demo 可以 [戳这里](https://github.com/wudixiaop/UNet/tree/master/Assets/104%20-%20simple%20network%20GUI) 得到，下面就 Demo 细说一下。\n\n### 代码\n\n我们通过 NetworkManager 的 `StartServer()` / `StopServer()` 方法来开启 / 停止 Server, `StartClient()` / `StopClient()` 方法来启动 / 停止 Client。我们可以新建一个 GameObject，\n然后把下面脚本挂在它上面。脚本代码如下:\n\n{% codeblock %}\nusing UnityEngine;\nusing UnityEngine.Networking;\n\npublic class SimpleNetworkGUI : MonoBehaviour\n{\n    bool isHaveNetworkRole = false;\n    \n    void Start()\n    {\n        isHaveNetworkRole = false;\n    }\n    \n    private void OnDisconnected(NetworkMessage msg)\n    {\n        isHaveNetworkRole = false;\n        Application.LoadLevel(Application.loadedLevel);\n    }\n    \n    void OnGUI()\n    {\n        if(isHaveNetworkRole)\n        {\n            if(GUI.Button(new Rect(Screen.width / 2 - 80, Screen.height / 2 - 12, 160, 24), \"Stop\"))\n            {\n                NetworkManager.singleton.StopServer();\n                NetworkManager.singleton.StopClient();\n                OnDisconnected(null);\n            }\n            return;\n        }\n        \n        if(GUI.Button(new Rect(Screen.width / 2f - 80, Screen.height / 2 - 12, 160, 24), \"Start Server\"))\n        {\n            isHaveNetworkRole = NetworkManager.singleton.StartServer();\n        }\n        \n        if(GUI.Button(new Rect(Screen.width / 2f - 80, Screen.height / 2 + 24, 160, 24), \"Start Client\"))\n        {\n            var client = NetworkManager.singleton.StartClient();\n            client.RegisterHandler(MsgType.Disconnect, OnDisconnected);\n            isHaveNetworkRole = true;\n        }\n    }\n}\n{% endcodeblock %}\n\n### 关于 Demo 其他一些需要知道的\n\n* 首先，代码中利用了 NetworkManager 组件。我们可以把这个组件挂到挂有上面 UI 脚本的 GameObject 之上。\n* 为了演示效果，Demo 里面创建了一个Prefab， 这个 Prefab 会传递给上面的 NetworkManager 组件（Spawn Info 下的 Player Prefab）。当 Client 连接已经启动的 Server 的时候，Server 端会创建这个 Perfab 的实例。\n这个 Prefab 比较特殊，它上面需要添加 __NetworkIndentity__ 组件，这样才能传递过去给 NetworkManager。\n\n到这里，可能有的朋友有疑问。什么 Spawn？ NetworkIndentity 又是什么鬼？\n\n### UNet 中的 Spawn\n\n换句话说，Spawn 就是网络对象实例的初始化这个行为，再换句话说就是创建网络对象。在 UNet 中用 Spawn 来描述，而不是用 Instantiate。\n\nUNet 是个以 Server 为主导的系统，所有的 Spawn 行为都要在 Server 端发生，通过调用 `NetworkServer.Spawn( GameObject go )` 方法，产生的对象会在各个 Client 出现对应的实例。\n\n### 网络对象与 NetworkIndentity\n\n每个网络对象（Networked Object）都需要在根上带上 NetworkIndentity 组件。那 NetworkIndentity 组件是什么？ 大概是这个样子：\n\n* 它是标志对象网络身份的一个组件\n* 拥有系统用来跟踪对象的信息，比如 SenceId, NetworkID, AssetID 等\n* 所有需要 Spawn 的 Prefab 都必须在对象根上带有这个组件\n\n对了，需要注意一点。带有 NetworkIndentity 组件的对象，在未 Spawn 之前是不可用的，Disabled 状态，即使在 Hierarchy 里面有它的实例也会自动被 Disabled.\n\n### NetworkManagerHUD 组件\n\n为什么要提到这个组件呢。因为它也是一个 NetworkManager 管理的界面。它是 Unity 提供给我们的，提供比我们这篇文章所给的更加丰富的功能。平时开发调试的时候，建议使用这个控件。\n引出 NetworkManagerHUD 组件也是这篇文章的目的。\n\n好了，这篇就到这里。Enjoy!\n","source":"_posts/UNet_4.md","raw":"title: UNet 0x04： 做一个简单的 Network Manager 界面\ndate: 2015-08-12 14:01\ncategory: Unity\ntags: UNet\n---\n\n上一篇中我们引入了 NetworkManager 组件，然后在代码里面通过它来建立了网络连接。这篇让我们来把连接部分的代码独立出来，并提供 GUI 来达到管理 Server / Client 的开启和停止的目的。\n这样我们以后就可以重复利用代码了。\n\n下面是我们这个简单的 NetworkManger 界面提供的功能：\n\n* 可以启动 / 停止 Server，并且多个程序端只能启动一个 Server\n* 可以启动 / 停止 Client 并连接 Server\n* 当 Server 停止时，所有 Client 端界面都会重置\n\n这个简单的界面如下：\n\n<!--more-->\n\n![ui](/images/UNet/SimpleUI.PNG)\n\n本篇中的 demo 可以 [戳这里](https://github.com/wudixiaop/UNet/tree/master/Assets/104%20-%20simple%20network%20GUI) 得到，下面就 Demo 细说一下。\n\n### 代码\n\n我们通过 NetworkManager 的 `StartServer()` / `StopServer()` 方法来开启 / 停止 Server, `StartClient()` / `StopClient()` 方法来启动 / 停止 Client。我们可以新建一个 GameObject，\n然后把下面脚本挂在它上面。脚本代码如下:\n\n{% codeblock %}\nusing UnityEngine;\nusing UnityEngine.Networking;\n\npublic class SimpleNetworkGUI : MonoBehaviour\n{\n    bool isHaveNetworkRole = false;\n    \n    void Start()\n    {\n        isHaveNetworkRole = false;\n    }\n    \n    private void OnDisconnected(NetworkMessage msg)\n    {\n        isHaveNetworkRole = false;\n        Application.LoadLevel(Application.loadedLevel);\n    }\n    \n    void OnGUI()\n    {\n        if(isHaveNetworkRole)\n        {\n            if(GUI.Button(new Rect(Screen.width / 2 - 80, Screen.height / 2 - 12, 160, 24), \"Stop\"))\n            {\n                NetworkManager.singleton.StopServer();\n                NetworkManager.singleton.StopClient();\n                OnDisconnected(null);\n            }\n            return;\n        }\n        \n        if(GUI.Button(new Rect(Screen.width / 2f - 80, Screen.height / 2 - 12, 160, 24), \"Start Server\"))\n        {\n            isHaveNetworkRole = NetworkManager.singleton.StartServer();\n        }\n        \n        if(GUI.Button(new Rect(Screen.width / 2f - 80, Screen.height / 2 + 24, 160, 24), \"Start Client\"))\n        {\n            var client = NetworkManager.singleton.StartClient();\n            client.RegisterHandler(MsgType.Disconnect, OnDisconnected);\n            isHaveNetworkRole = true;\n        }\n    }\n}\n{% endcodeblock %}\n\n### 关于 Demo 其他一些需要知道的\n\n* 首先，代码中利用了 NetworkManager 组件。我们可以把这个组件挂到挂有上面 UI 脚本的 GameObject 之上。\n* 为了演示效果，Demo 里面创建了一个Prefab， 这个 Prefab 会传递给上面的 NetworkManager 组件（Spawn Info 下的 Player Prefab）。当 Client 连接已经启动的 Server 的时候，Server 端会创建这个 Perfab 的实例。\n这个 Prefab 比较特殊，它上面需要添加 __NetworkIndentity__ 组件，这样才能传递过去给 NetworkManager。\n\n到这里，可能有的朋友有疑问。什么 Spawn？ NetworkIndentity 又是什么鬼？\n\n### UNet 中的 Spawn\n\n换句话说，Spawn 就是网络对象实例的初始化这个行为，再换句话说就是创建网络对象。在 UNet 中用 Spawn 来描述，而不是用 Instantiate。\n\nUNet 是个以 Server 为主导的系统，所有的 Spawn 行为都要在 Server 端发生，通过调用 `NetworkServer.Spawn( GameObject go )` 方法，产生的对象会在各个 Client 出现对应的实例。\n\n### 网络对象与 NetworkIndentity\n\n每个网络对象（Networked Object）都需要在根上带上 NetworkIndentity 组件。那 NetworkIndentity 组件是什么？ 大概是这个样子：\n\n* 它是标志对象网络身份的一个组件\n* 拥有系统用来跟踪对象的信息，比如 SenceId, NetworkID, AssetID 等\n* 所有需要 Spawn 的 Prefab 都必须在对象根上带有这个组件\n\n对了，需要注意一点。带有 NetworkIndentity 组件的对象，在未 Spawn 之前是不可用的，Disabled 状态，即使在 Hierarchy 里面有它的实例也会自动被 Disabled.\n\n### NetworkManagerHUD 组件\n\n为什么要提到这个组件呢。因为它也是一个 NetworkManager 管理的界面。它是 Unity 提供给我们的，提供比我们这篇文章所给的更加丰富的功能。平时开发调试的时候，建议使用这个控件。\n引出 NetworkManagerHUD 组件也是这篇文章的目的。\n\n好了，这篇就到这里。Enjoy!\n","slug":"UNet_4","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkavl001a2quozcbutu3k"},{"title":"UNet 0x03：NetworkManager 初见","date":"2015-08-10T06:04:00.000Z","_content":"\n阅读本章之前, 建议先阅读 {% post_link uNET_1 [UNet 0x01: 网络连接的建立] %} 和 {% post_link UNet_2 [UNet 0x02: 发送消息] %} 这两篇文章。\n\n前两篇文章我们建立 Client / Server 间的连接的时候，手动配置了 Server 的端口和 Client 要连接的目标 Server 及其端口。这些都是在代码里面实现\n的。这篇文章我们引入 UNet 提供的一个网络管理组件来达到同样的效果。这个组件的名字叫做 NetworkManager。\n\nNetworkManager 组件提供了很多功能，但是这篇文章只引入 NetworkManager 组件，不打算深入讲这个组件。下面是 NetworkManager 在 Inspector 里面的长相：\n\n![networkmanager](/images/UNet/NetworkManagerInspector.PNG)\n\n上图中 Network Info 部分就是就是配置 Server 地址及其端口的地方。\n\n接下来看看 NetworkManager 如何启动一个 Server / Client / Host。\n\n<!--more-->\n\n### 利用 NetowrkManager 的方法替换之前代码\n\n利用 NetworkManager 的方法替换之前的代码，大体为：\n\n* 之前我们用 `NetworkServer.listen(port)` 来启动一个 Server 并监听某个端口。NetworkManager 提供 `StartServer()` 方法替代\n* 之前我们单独创建了 NetowrkClint 类的实例开创建 Client。 NetworkManager 提供 `StartClient()` 方法替代\n* 如果想启动 Host (Server + Local Client)，NetworkManager 提供 `StartHost()` 方法\n\n### 得到 NetworkManager 实例\n\nNetworkManager 组件挂上 GameObject 之后我们可以像其他组件一同通过 `GetComponent<T>()` 这个方法来得到其实例，但是这推荐使用 `NetworkManager.singleton` \n来得到其实例。\n\n### 为什么要使用 NetworkManager\n\n我觉得大概有如下几点：\n\n* NetworkManager 包装了很多信息的设置，提供统一的入口\n* 利用现成 NetworkManager 提供的功能，简化代码\n\n但总体上的目的还是简化，复用代码。\n\n### 代码示例\n\n下面代码和 {% post_link UNet_2 [UNet 0x02: 发送消息] %} 一样，也是发送消息。功能上的区别就是下面代码中 Client 会每隔 5 秒自动发送消息给 Server。\n\n{% codeblock %}\nusing UnityEngine;\nusing UnityEngine.Networking;\n\npublic class ComBaseOnNetworkManager : MonoBehaviour {\n\n    private NetworkClient client;\n\n    private float interval = 5f;\n    private float time = 0f;\n    \n    void Start () {\n        SetupServer();\n        SetupClient();\n    }\n    \n    void Update()\n    {\n        time += Time.deltaTime;\n        if(time >= interval)\n        {\n            time = time - interval;\n            SendMessageToServer();\n        }\n    }\n    \n    private void SetupServer()\n    {\n        if(NetworkServer.active)\n        {\n            return;\n        }\n        \n        NetworkServer.RegisterHandler(MessageX.MsgType, OnMessageReceived);\n        \n        NetworkManager.singleton.StartServer();\n    }\n    \n    private void SetupClient()\n    {\n        client = NetworkManager.singleton.StartClient();\n    }\n    \n    private void OnMessageReceived(NetworkMessage msg)\n    {\n        Debug.Log(string.Format(\"SERVER: {0}\", msg.ReadMessage<MessageX>()));\n    }\n    \n    private void SendMessageToServer()\n    {\n        MessageX mx = new MessageX();\n        mx.From = \"NetworkMangerBase Sample\";\n        mx.Message = \"Hello Rocky!\";\n        \n        client.Send(MessageX.MsgType, mx);\n    }\n}\n{% endcodeblock %}\n\n代码可以在这里找到：[Github 地址](https://github.com/wudixiaop/UNet/tree/master/Assets/103%20-%20introduce%20NetworkManager)。\n\t\n新建一个 GameObject， 在它挂上上面的脚本，然后添加 NetworkManager 组件，然后运行项目。控制台会得到类似下面的输出结果：\n\n![output](/images/UNet/103Output.PNG)\n\nEnjoy!","source":"_posts/UNet_3.md","raw":"title: UNet 0x03：NetworkManager 初见\ndate: 2015-08-10 14:04\ncategory: Unity\ntags: UNet\n---\n\n阅读本章之前, 建议先阅读 {% post_link uNET_1 [UNet 0x01: 网络连接的建立] %} 和 {% post_link UNet_2 [UNet 0x02: 发送消息] %} 这两篇文章。\n\n前两篇文章我们建立 Client / Server 间的连接的时候，手动配置了 Server 的端口和 Client 要连接的目标 Server 及其端口。这些都是在代码里面实现\n的。这篇文章我们引入 UNet 提供的一个网络管理组件来达到同样的效果。这个组件的名字叫做 NetworkManager。\n\nNetworkManager 组件提供了很多功能，但是这篇文章只引入 NetworkManager 组件，不打算深入讲这个组件。下面是 NetworkManager 在 Inspector 里面的长相：\n\n![networkmanager](/images/UNet/NetworkManagerInspector.PNG)\n\n上图中 Network Info 部分就是就是配置 Server 地址及其端口的地方。\n\n接下来看看 NetworkManager 如何启动一个 Server / Client / Host。\n\n<!--more-->\n\n### 利用 NetowrkManager 的方法替换之前代码\n\n利用 NetworkManager 的方法替换之前的代码，大体为：\n\n* 之前我们用 `NetworkServer.listen(port)` 来启动一个 Server 并监听某个端口。NetworkManager 提供 `StartServer()` 方法替代\n* 之前我们单独创建了 NetowrkClint 类的实例开创建 Client。 NetworkManager 提供 `StartClient()` 方法替代\n* 如果想启动 Host (Server + Local Client)，NetworkManager 提供 `StartHost()` 方法\n\n### 得到 NetworkManager 实例\n\nNetworkManager 组件挂上 GameObject 之后我们可以像其他组件一同通过 `GetComponent<T>()` 这个方法来得到其实例，但是这推荐使用 `NetworkManager.singleton` \n来得到其实例。\n\n### 为什么要使用 NetworkManager\n\n我觉得大概有如下几点：\n\n* NetworkManager 包装了很多信息的设置，提供统一的入口\n* 利用现成 NetworkManager 提供的功能，简化代码\n\n但总体上的目的还是简化，复用代码。\n\n### 代码示例\n\n下面代码和 {% post_link UNet_2 [UNet 0x02: 发送消息] %} 一样，也是发送消息。功能上的区别就是下面代码中 Client 会每隔 5 秒自动发送消息给 Server。\n\n{% codeblock %}\nusing UnityEngine;\nusing UnityEngine.Networking;\n\npublic class ComBaseOnNetworkManager : MonoBehaviour {\n\n    private NetworkClient client;\n\n    private float interval = 5f;\n    private float time = 0f;\n    \n    void Start () {\n        SetupServer();\n        SetupClient();\n    }\n    \n    void Update()\n    {\n        time += Time.deltaTime;\n        if(time >= interval)\n        {\n            time = time - interval;\n            SendMessageToServer();\n        }\n    }\n    \n    private void SetupServer()\n    {\n        if(NetworkServer.active)\n        {\n            return;\n        }\n        \n        NetworkServer.RegisterHandler(MessageX.MsgType, OnMessageReceived);\n        \n        NetworkManager.singleton.StartServer();\n    }\n    \n    private void SetupClient()\n    {\n        client = NetworkManager.singleton.StartClient();\n    }\n    \n    private void OnMessageReceived(NetworkMessage msg)\n    {\n        Debug.Log(string.Format(\"SERVER: {0}\", msg.ReadMessage<MessageX>()));\n    }\n    \n    private void SendMessageToServer()\n    {\n        MessageX mx = new MessageX();\n        mx.From = \"NetworkMangerBase Sample\";\n        mx.Message = \"Hello Rocky!\";\n        \n        client.Send(MessageX.MsgType, mx);\n    }\n}\n{% endcodeblock %}\n\n代码可以在这里找到：[Github 地址](https://github.com/wudixiaop/UNet/tree/master/Assets/103%20-%20introduce%20NetworkManager)。\n\t\n新建一个 GameObject， 在它挂上上面的脚本，然后添加 NetworkManager 组件，然后运行项目。控制台会得到类似下面的输出结果：\n\n![output](/images/UNet/103Output.PNG)\n\nEnjoy!","slug":"UNet_3","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkavn001d2quokucithwu"},{"title":"UNet 0x02：发送消息","date":"2015-08-07T08:04:00.000Z","_content":"\n在 {% post_link uNET_1 [上一篇文章] %} 中介绍了如何在 UNet 中建立网络连接，接下来我们在这篇文章中说说建立连接之后怎么在 Client / Server 间发送消息。\n\n这篇文章涉及的是 UNet HLAPI 部分消息发送所涉及到一些概念，最后会给出一个示例代码。按之前的风格，我们继续来抱着问题讲述今天的主题。\n\n有两个问题：\n\n* UNet HLAPI 中消息怎么表示？\n* UNet HLAPI 中消息怎么发送和接收？\n\n### UNet HLAPI 中的消息\n\n新的网路系统 UNet 提供了一个抽象类，叫做 `MessageBase`, 它的原型大概是下面这样:\n\n<!--more-->\n\n{% codeblock %}\npublic abstract class MessageBase\n{\n    // De-serialize the contents of the reader into this message\n    public virtual void Deserialize(NetworkReader reader) {}\n\n    // Serialize the contents of this message into the writer\n    public virtual void Serialize(NetworkWriter writer) {}\n}\n{% endcodeblock %}\n\t\n`MessageBase` 提供了系列化/反序列化的功能，我们 __需要通过继承这个类来自定义消息__ 。所以一般情况下 UNet HLAPI 中的消息都是 `MessageBase` 的子类。\n\nUNet 在 `UnityEngine.Networking.NetworkSystem` 命名空间中提供了一些内建的类供我们使用，例如:\n\n* EmptyMessage\n* StringMessage\n* IntegerMessage\n* ErrorMessage\n\n当然我们也可以不使用内建的类，自己自定义新消息类。比如我们定义一个（我单纯的自认为）高大上的名字的类，叫做 `MessageX`，继承自 `MessageBase`：\n\n{% codeblock %}\n\tusing UnityEngine.Networking;\n\t\n\t// Customize message and Type\n\t//\n\tpublic class MessageX : MessageBase\n\t{\n\t    public static readonly short MsgType = short.MaxValue;\n\t    \n\t    // Use Field here, NOT Property\n\t    //\n\t    public string Message;\n\t    public string From;\n\t\n\t    public override string ToString()\n\t    {\n\t        return string.Format(\"Message '{0}' from '{1}'\", Message, From);\n\t    }\n\t}\n{% endcodeblock %}\n\n这里要说一下一个自定义消息类型的坑：__要使用字段来代替属性__，如果使用了属性会导致接收不到发送的消息数据。\n\n错误的写法：\n\n{% codeblock %}\npublic class MessageX : MessageBase\n{\n    public string Message { get; set; }\n}\n{% endcodeblock %}\n\t\n正确的写法：\n\n{% codeblock %}\npublic class MessageX : MessageBase\n{\n    public string Message;\n}\n{% endcodeblock %}\n\n\n这个坑请注意下，以防掉入~~\t\n\n### 发送消息的 API\n\n上小节，我们有了 `MessageX` 这个高大上名字的消息，我们怎么发出去，然后怎么接受呢？\n\n先说发送。UNet 中下面几个方法都可以发送:\n\n* __NetworkClient.Send( short msgType, MessageBase msg)__\n* __NetworkConnection.Send( short msgType, MessageBase msg)__\n* __NetworkServer.SendToAll( short msgType, MessageBase msg)__\n* __NetworkServer.SendToReady( short msgType, MessageBase msg)__\n* __NetworkServer.SendToClient( int connectionId, short msgType, MessageBase msg)__\n* __NetworkServer.SendUnreliableToAll( short msgType, MessageBase msg)__\n* __NetworkServer.SendUnreliableToReady( short msgType, MessageBase msg)__\n* __NetworkServer.SendToClientOfPlayer( GameObject player, short msgType, MessageBase msg)__\n\n各个方法用各自的用途，具体可以参照 [NetworkClient](http://docs.unity3d.com/ScriptReference/Networking.NetworkClient.html)、\n[NetworkConnection](http://docs.unity3d.com/ScriptReference/Networking.NetworkConnection.html) 和 \n[NetworkServer](http://docs.unity3d.com/ScriptReference/Networking.NetworkServer.html) 官方 API 文档。\n\n本文章中将使用 `NetworkClient.Send(short msgType, MessageBase msg)` 方法，在 Client 端给 Server 端发送消息。发送的代码示意：\n\n{% codeblock %}\nMessageX mx = new MessageX();\nmx.Message = messageInput.text;\nmx.From = fromInput.text;\n\nclient.Send(MessageX.MsgType, mx);\n{% endcodeblock %}\n\n`Send` 方法中第二个参数是消息的实例，这个很明显，不需要特别解释。那第一个参数 msgType 又是什么的？ 看过上一篇文章 {% post_link uNET_1 [UNet 0x01: 网络连接的建立] %}\n的朋友们可能马上就想起来在 __事件注册 RegisterHandler__ 小节中也有 msgType。对的，就是这个。消息接收就是通过事件注册的方式来处理。接收的示意代码如下：\n\n\t:::C#\n\t// 注册消息处理事件\n\tNetworkServer.RegisterHandler(MessageX.MsgType, OnMessageXReceived);\n\t\n\tpublic void OnMessageXReceived(NetworkMessage msg)\n    {\n        MessageX mx = msg.ReadMessage<MessageX>();\n        Debug.Log(string.Format(\"SERVER: {0}\", mx));\n    }\n\t\n上面使用到了 `NetworkMessage.ReadMessage<T>()` 方法来得到发送过来的 `MessageX` 类型的消息。\n\n\n### 将所有串联起来的示例\n\n我们创建一个简单的 UI 如下\n\n![UI](/images/UNet/sendMessageUI.PNG)\n\n我们创建一个 `SendMessageX` 类用来接收 UI 输入的文字，然后发送给 Server, 用 `Debug.log()` 输出到控制台窗口。`SendMessageX` 类的代码如下：\n\n{% codeblock %}\nusing UnityEngine;\nusing UnityEngine.Networking;\nusing UnityEngine.UI;\n\npublic class SendMessageX : MonoBehaviour\n{\n    public int serverPort = 4444;\n    public InputField messageInput;\n    public InputField fromInput;\n\n    void Start()\n    {\n        SetupServer();\n        SetupClient();\n    }\n\n    #region Server \n\n    private void SetupServer()\n    {\n        if (NetworkServer.active)\n        {\n            return;\n        }\n\n        NetworkServer.RegisterHandler(MsgType.Connect, OnConnected);\n        NetworkServer.RegisterHandler(MessageX.MsgType, OnMessageXReceived);\n\n        bool success = NetworkServer.Listen(serverPort);\n\n        if (success)\n        {\n            Debug.Log(\"Server Started\");\n        }\n        else\n        {\n            Debug.Log(\"Start Server failed\");\n        }\n    }\n\n    private void OnConnected(NetworkMessage msg)\n    {\n        Debug.Log(\"A client connected!\");\n    }\n\n    private void OnMessageXReceived(NetworkMessage msg)\n    {\n        MessageX mx = msg.ReadMessage<MessageX>();\n        Debug.Log(string.Format(\"SERVER: {0}\", mx));\n    }\n\n    #endregion\n\n    #region Client\n\n    NetworkClient client;\n\n    private void SetupClient()\n    {\n        if (client == null)\n        {\n            client = new NetworkClient();\n            client.Connect(\"127.0.0.1\", serverPort);\n        }\n    }\n\n    public void SendMesssageXToServer()\n    {\n        MessageX mx = new MessageX();\n        mx.Message = messageInput.text;\n        mx.From = fromInput.text;\n\n        client.Send(MessageX.MsgType, mx);\n        \n        Debug.Log(string.Format(\"CLIENT: {0}\", mx));\n    }\n\n    #endregion\n}\n{% endcodeblock %}\n\n如果将 `Remote Client` 输入到 __From__、`Hello World` 输入到 __Message__ 输入框之后，点击 __Send Message__ 按钮，我们得到如下输出结果：\n\n![sendMessageOutput](/images/UNet/sendMessageOutput.PNG)\n\n所有代码可以在这里找到：<https://github.com/wudixiaop/UNet/tree/master/Assets/102%20-%20send%20message>\n\t\nEnjoy!","source":"_posts/UNet_2.md","raw":"title: UNet 0x02：发送消息\ndate: 2015-08-07 16:04\ncategory: Unity\ntags: \n- UNet \n---\n\n在 {% post_link uNET_1 [上一篇文章] %} 中介绍了如何在 UNet 中建立网络连接，接下来我们在这篇文章中说说建立连接之后怎么在 Client / Server 间发送消息。\n\n这篇文章涉及的是 UNet HLAPI 部分消息发送所涉及到一些概念，最后会给出一个示例代码。按之前的风格，我们继续来抱着问题讲述今天的主题。\n\n有两个问题：\n\n* UNet HLAPI 中消息怎么表示？\n* UNet HLAPI 中消息怎么发送和接收？\n\n### UNet HLAPI 中的消息\n\n新的网路系统 UNet 提供了一个抽象类，叫做 `MessageBase`, 它的原型大概是下面这样:\n\n<!--more-->\n\n{% codeblock %}\npublic abstract class MessageBase\n{\n    // De-serialize the contents of the reader into this message\n    public virtual void Deserialize(NetworkReader reader) {}\n\n    // Serialize the contents of this message into the writer\n    public virtual void Serialize(NetworkWriter writer) {}\n}\n{% endcodeblock %}\n\t\n`MessageBase` 提供了系列化/反序列化的功能，我们 __需要通过继承这个类来自定义消息__ 。所以一般情况下 UNet HLAPI 中的消息都是 `MessageBase` 的子类。\n\nUNet 在 `UnityEngine.Networking.NetworkSystem` 命名空间中提供了一些内建的类供我们使用，例如:\n\n* EmptyMessage\n* StringMessage\n* IntegerMessage\n* ErrorMessage\n\n当然我们也可以不使用内建的类，自己自定义新消息类。比如我们定义一个（我单纯的自认为）高大上的名字的类，叫做 `MessageX`，继承自 `MessageBase`：\n\n{% codeblock %}\n\tusing UnityEngine.Networking;\n\t\n\t// Customize message and Type\n\t//\n\tpublic class MessageX : MessageBase\n\t{\n\t    public static readonly short MsgType = short.MaxValue;\n\t    \n\t    // Use Field here, NOT Property\n\t    //\n\t    public string Message;\n\t    public string From;\n\t\n\t    public override string ToString()\n\t    {\n\t        return string.Format(\"Message '{0}' from '{1}'\", Message, From);\n\t    }\n\t}\n{% endcodeblock %}\n\n这里要说一下一个自定义消息类型的坑：__要使用字段来代替属性__，如果使用了属性会导致接收不到发送的消息数据。\n\n错误的写法：\n\n{% codeblock %}\npublic class MessageX : MessageBase\n{\n    public string Message { get; set; }\n}\n{% endcodeblock %}\n\t\n正确的写法：\n\n{% codeblock %}\npublic class MessageX : MessageBase\n{\n    public string Message;\n}\n{% endcodeblock %}\n\n\n这个坑请注意下，以防掉入~~\t\n\n### 发送消息的 API\n\n上小节，我们有了 `MessageX` 这个高大上名字的消息，我们怎么发出去，然后怎么接受呢？\n\n先说发送。UNet 中下面几个方法都可以发送:\n\n* __NetworkClient.Send( short msgType, MessageBase msg)__\n* __NetworkConnection.Send( short msgType, MessageBase msg)__\n* __NetworkServer.SendToAll( short msgType, MessageBase msg)__\n* __NetworkServer.SendToReady( short msgType, MessageBase msg)__\n* __NetworkServer.SendToClient( int connectionId, short msgType, MessageBase msg)__\n* __NetworkServer.SendUnreliableToAll( short msgType, MessageBase msg)__\n* __NetworkServer.SendUnreliableToReady( short msgType, MessageBase msg)__\n* __NetworkServer.SendToClientOfPlayer( GameObject player, short msgType, MessageBase msg)__\n\n各个方法用各自的用途，具体可以参照 [NetworkClient](http://docs.unity3d.com/ScriptReference/Networking.NetworkClient.html)、\n[NetworkConnection](http://docs.unity3d.com/ScriptReference/Networking.NetworkConnection.html) 和 \n[NetworkServer](http://docs.unity3d.com/ScriptReference/Networking.NetworkServer.html) 官方 API 文档。\n\n本文章中将使用 `NetworkClient.Send(short msgType, MessageBase msg)` 方法，在 Client 端给 Server 端发送消息。发送的代码示意：\n\n{% codeblock %}\nMessageX mx = new MessageX();\nmx.Message = messageInput.text;\nmx.From = fromInput.text;\n\nclient.Send(MessageX.MsgType, mx);\n{% endcodeblock %}\n\n`Send` 方法中第二个参数是消息的实例，这个很明显，不需要特别解释。那第一个参数 msgType 又是什么的？ 看过上一篇文章 {% post_link uNET_1 [UNet 0x01: 网络连接的建立] %}\n的朋友们可能马上就想起来在 __事件注册 RegisterHandler__ 小节中也有 msgType。对的，就是这个。消息接收就是通过事件注册的方式来处理。接收的示意代码如下：\n\n\t:::C#\n\t// 注册消息处理事件\n\tNetworkServer.RegisterHandler(MessageX.MsgType, OnMessageXReceived);\n\t\n\tpublic void OnMessageXReceived(NetworkMessage msg)\n    {\n        MessageX mx = msg.ReadMessage<MessageX>();\n        Debug.Log(string.Format(\"SERVER: {0}\", mx));\n    }\n\t\n上面使用到了 `NetworkMessage.ReadMessage<T>()` 方法来得到发送过来的 `MessageX` 类型的消息。\n\n\n### 将所有串联起来的示例\n\n我们创建一个简单的 UI 如下\n\n![UI](/images/UNet/sendMessageUI.PNG)\n\n我们创建一个 `SendMessageX` 类用来接收 UI 输入的文字，然后发送给 Server, 用 `Debug.log()` 输出到控制台窗口。`SendMessageX` 类的代码如下：\n\n{% codeblock %}\nusing UnityEngine;\nusing UnityEngine.Networking;\nusing UnityEngine.UI;\n\npublic class SendMessageX : MonoBehaviour\n{\n    public int serverPort = 4444;\n    public InputField messageInput;\n    public InputField fromInput;\n\n    void Start()\n    {\n        SetupServer();\n        SetupClient();\n    }\n\n    #region Server \n\n    private void SetupServer()\n    {\n        if (NetworkServer.active)\n        {\n            return;\n        }\n\n        NetworkServer.RegisterHandler(MsgType.Connect, OnConnected);\n        NetworkServer.RegisterHandler(MessageX.MsgType, OnMessageXReceived);\n\n        bool success = NetworkServer.Listen(serverPort);\n\n        if (success)\n        {\n            Debug.Log(\"Server Started\");\n        }\n        else\n        {\n            Debug.Log(\"Start Server failed\");\n        }\n    }\n\n    private void OnConnected(NetworkMessage msg)\n    {\n        Debug.Log(\"A client connected!\");\n    }\n\n    private void OnMessageXReceived(NetworkMessage msg)\n    {\n        MessageX mx = msg.ReadMessage<MessageX>();\n        Debug.Log(string.Format(\"SERVER: {0}\", mx));\n    }\n\n    #endregion\n\n    #region Client\n\n    NetworkClient client;\n\n    private void SetupClient()\n    {\n        if (client == null)\n        {\n            client = new NetworkClient();\n            client.Connect(\"127.0.0.1\", serverPort);\n        }\n    }\n\n    public void SendMesssageXToServer()\n    {\n        MessageX mx = new MessageX();\n        mx.Message = messageInput.text;\n        mx.From = fromInput.text;\n\n        client.Send(MessageX.MsgType, mx);\n        \n        Debug.Log(string.Format(\"CLIENT: {0}\", mx));\n    }\n\n    #endregion\n}\n{% endcodeblock %}\n\n如果将 `Remote Client` 输入到 __From__、`Hello World` 输入到 __Message__ 输入框之后，点击 __Send Message__ 按钮，我们得到如下输出结果：\n\n![sendMessageOutput](/images/UNet/sendMessageOutput.PNG)\n\n所有代码可以在这里找到：<https://github.com/wudixiaop/UNet/tree/master/Assets/102%20-%20send%20message>\n\t\nEnjoy!","slug":"UNet_2","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkavo001g2quo7xbtkq6j"},{"title":"ShaderlabVS 的一些常见问题","date":"2015-12-27T13:33:08.000Z","_content":"\n谢谢朋友们这一年多来对 ShaderlabVS 插件的支持。这里整理出一些朋友给我的留言或者邮件中提到的常见问题，希望对大家有帮助。\n\n### 常见问题\n\n#### 黑色背景下文字看不清楚，如何改变字体颜色\n\n1. 打开 VS -> 工具 -> 选项 -> 环境 -> 字体和颜色,\n2. 显示其设置 下拉列表中选择 文本编辑器 （如果没改过，这就是默认的）。\n3. 在 显示项(D) 文字下面的列表框中选择以 “Shaderlab-” 开头的项，然后改变前景色\n4. 改完后确定就可以了\n\n#### 插件安装碰到错误: `扩展“ShaderlabVS”需要的 .NET Framework 版本没有安装。\n尝试安装已移除 .Net Framework 依赖版本的 0.6.1。  \n\n下载地址：\n- VS2015: http://pan.baidu.com/s/1pK5GIU3\n- VS2012 / VS2013: http://pan.baidu.com/s/1pK5GIU3 \n\n<!--more-->\n\n#### 插件安装上后没有效果 \n\n一般是由于 .shader 或者 .cginc 文件没有和 ShaderlabVS 插件没有关联上。原因可能是：\n\n- 安装了其他跟 .shader 和 .cginc 文件相关的其他插件\n- 如果是 VS2015, 在插件安装之后需要执行 [vs2015-register.cmd](https://github.com/wudixiaop/ShaderlabVS/tree/master/Tools) \n来关联插件\n\n#### 其他问题\n发邮件到 rockylai@shuiguzi.com，我会尽量解答。","source":"_posts/ShaderlabVSFAQ.md","raw":"title: ShaderlabVS 的一些常见问题\ndate: 2015-12-27 21:33:08\ntags: Shader\ncategory: Shader\n---\n\n谢谢朋友们这一年多来对 ShaderlabVS 插件的支持。这里整理出一些朋友给我的留言或者邮件中提到的常见问题，希望对大家有帮助。\n\n### 常见问题\n\n#### 黑色背景下文字看不清楚，如何改变字体颜色\n\n1. 打开 VS -> 工具 -> 选项 -> 环境 -> 字体和颜色,\n2. 显示其设置 下拉列表中选择 文本编辑器 （如果没改过，这就是默认的）。\n3. 在 显示项(D) 文字下面的列表框中选择以 “Shaderlab-” 开头的项，然后改变前景色\n4. 改完后确定就可以了\n\n#### 插件安装碰到错误: `扩展“ShaderlabVS”需要的 .NET Framework 版本没有安装。\n尝试安装已移除 .Net Framework 依赖版本的 0.6.1。  \n\n下载地址：\n- VS2015: http://pan.baidu.com/s/1pK5GIU3\n- VS2012 / VS2013: http://pan.baidu.com/s/1pK5GIU3 \n\n<!--more-->\n\n#### 插件安装上后没有效果 \n\n一般是由于 .shader 或者 .cginc 文件没有和 ShaderlabVS 插件没有关联上。原因可能是：\n\n- 安装了其他跟 .shader 和 .cginc 文件相关的其他插件\n- 如果是 VS2015, 在插件安装之后需要执行 [vs2015-register.cmd](https://github.com/wudixiaop/ShaderlabVS/tree/master/Tools) \n来关联插件\n\n#### 其他问题\n发邮件到 rockylai@shuiguzi.com，我会尽量解答。","slug":"ShaderlabVSFAQ","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkavr001j2quoe2kphayw"},{"title":"瞎聊 Unity Shader 系列之九：用来包装变量的 Properties","date":"2015-05-08T06:03:00.000Z","_content":"\n为了像其他程序语言一样重用代码，Shaderlab 把可变部分提取出来，集中放到一个区域去。这个区域就是 {% post_link Shader_6 [初始 shaderlab]%} 这节中提到的的 `Properties`\n可选项。 在这个区域内每一个元素被叫做 Property。我们把他叫做属性吧。这些属性都包括在 `Properties { }` 语句块内。\n\n### Shaderlab 的属性\n\n属性的语法是:\n\n> 属性名 (\"Inspector 显示的名字\", 类型) = 默认值\n\nShaderlab 提供不同的数据类型（详情见下面）。如果把这些类型和默认值格式填充进上面的语法后，会变成下面的样子：\n\n<!--more-->\n\n> 数值类：\n>> name (\"display name\", Range (min, max)) = number  \n>> name (\"display name\", Float) = number  \n>> name (\"display name\", Int) = number  \n>> name (\"display name\", Color) = (number,number,number,number)  \n>> name (\"display name\", Vector) = (number,number,number,number)  \n\n> 纹理类：\n>> name (\"display name\", 2D) = \"defaulttexture\" {}  \n>> name (\"display name\", Cube) = \"defaulttexture\" {}  \n>> name (\"display name\", 3D) = \"defaulttexture\" {}  \n\n上面 `defaulttexture` 可以是 “white”, “black”, “gray” 或者 “bump”。\n\n对应在 Inspector 不同类型显示的默认样式如图所示：\n\n![properties](/images/Shader/9/properties.png)\n\n上面是默认样式，最后显示的样式还可以自己定制，详情可以参考 [这个页面](http://docs.unity3d.com/ScriptReference/MaterialPropertyDrawer.html)。\n\n需要说明下，还有个 Rect 类型，在官方手册介绍 [Properties 的介绍页面](http://docs.unity3d.com/Manual/SL-Properties.html) 中没有提到。估计是 Unity5 之后去掉了。\n\n注意，在 `Properites` 语句块里面声明完了，如果要被 CG 等语言关联上，**还需要在 `CGPROGRAM ... ENDCG` 语句块内 再次声明同名字的变量 后属性才起作用**。这个从逻辑上\n好理解，因为要被 CG 等语言利用，所以应该跟 CG 等语言放在一起，而 CG 等语言程序就包括在 `CGPROGRAM ... ENDCG` 语句块内。\n\n### 与 CG 等语言变量类型映射关系\n\nShaderlab 提供的类型最终会映射成 CG 等语言变量类型，他们的映射关系为：\n\n- **Color** 和 **Vector** 对应为 float4, half4 或者 fixed4 类型\n- **Range** 和 **Float** 对应为 float, half, fixed 类型\n- **Int** 对应为 int 类型\n- **2D** 对应为 sampler2D 类型\n- **Cube** 对应为 samplerCUBE 类型\n- **3D** 对应为 sampler3D 类型\n\n上面可以看到，有些属性是可以对应成好几类类型。Float 是 32 位高精度浮点数, half 是 16 位中等精度浮点数, Fixed 一般是 11 低位浮点数。为了性能建议使用的数据选择合适的类型。\n下面有两个建议（在移动设备上尤其重要）：\n\n- 对于 Color 和 单位向量，使用 fixed 类型\n- 对于其他的类型，如果范围和精度都适合的话选择 half, 否则选择 float\n\n最后放上上面的图片所用的 shader 代码：\n\n{% codeblock %}\nShader \"Custom/Properties\" {\n    Properties {\n        _RangeType (\"Range 类型\", Range(0,1)) = 0.5\n        _FloatType (\"Float 类型\", Float) = 1.0\n        _IntType (\"Int 类型\", Int) = 1\n        _ColorType (\"Color 类型\", Color) = (1, 1, 1, 1)\n        _VectorType (\"Vector 类型\", vector) = (0, 0, 0, 0)\n        _2DType (\"2D纹理类型\", 2D) = \"while\" {}\n        _CubeType (\"Cube 类型\", Cube) = \"black\" {}\n        _3DType (\"3D纹理类型\", 3D) = \"gray\" {}\n        _RectType(\"Rectangle\", Rect) = \"\" {}\n    }\n\n    SubShader {\n        Tags { \"RenderType\"=\"Opaque\" }\n        LOD 200\n\n        CGPROGRAM\n\n        #pragma surface surf Standard fullforwardshadows\n        #pragma target 3.0\n\n        // 再次声明跟属性一样的名字的变量\n        float _RangeType;\n        float _FloatType;\n        int _IntType;\n        fixed4 _ColorType;\n        float4 _VectorType;\n        sampler2D _2DType;\n        samplerCUBE _CubeType;\n        sampler3D _3DType;\n        float4 _RectType;\n\n        struct Input {\n            float2 uv_MainTex;\n        };\n\n        void surf (Input IN, inout SurfaceOutputStandard o) {\n            o.Alpha = (0, 0, 0, 0);\n        }\n\n        ENDCG\n    }\n}\n{% endcodeblock %}\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","source":"_posts/Shader_9.md","raw":"title: 瞎聊 Unity Shader 系列之九：用来包装变量的 Properties\ndate: 2015-05-08 14:03\ncategory: Shader\ntags: Shader\n---\n\n为了像其他程序语言一样重用代码，Shaderlab 把可变部分提取出来，集中放到一个区域去。这个区域就是 {% post_link Shader_6 [初始 shaderlab]%} 这节中提到的的 `Properties`\n可选项。 在这个区域内每一个元素被叫做 Property。我们把他叫做属性吧。这些属性都包括在 `Properties { }` 语句块内。\n\n### Shaderlab 的属性\n\n属性的语法是:\n\n> 属性名 (\"Inspector 显示的名字\", 类型) = 默认值\n\nShaderlab 提供不同的数据类型（详情见下面）。如果把这些类型和默认值格式填充进上面的语法后，会变成下面的样子：\n\n<!--more-->\n\n> 数值类：\n>> name (\"display name\", Range (min, max)) = number  \n>> name (\"display name\", Float) = number  \n>> name (\"display name\", Int) = number  \n>> name (\"display name\", Color) = (number,number,number,number)  \n>> name (\"display name\", Vector) = (number,number,number,number)  \n\n> 纹理类：\n>> name (\"display name\", 2D) = \"defaulttexture\" {}  \n>> name (\"display name\", Cube) = \"defaulttexture\" {}  \n>> name (\"display name\", 3D) = \"defaulttexture\" {}  \n\n上面 `defaulttexture` 可以是 “white”, “black”, “gray” 或者 “bump”。\n\n对应在 Inspector 不同类型显示的默认样式如图所示：\n\n![properties](/images/Shader/9/properties.png)\n\n上面是默认样式，最后显示的样式还可以自己定制，详情可以参考 [这个页面](http://docs.unity3d.com/ScriptReference/MaterialPropertyDrawer.html)。\n\n需要说明下，还有个 Rect 类型，在官方手册介绍 [Properties 的介绍页面](http://docs.unity3d.com/Manual/SL-Properties.html) 中没有提到。估计是 Unity5 之后去掉了。\n\n注意，在 `Properites` 语句块里面声明完了，如果要被 CG 等语言关联上，**还需要在 `CGPROGRAM ... ENDCG` 语句块内 再次声明同名字的变量 后属性才起作用**。这个从逻辑上\n好理解，因为要被 CG 等语言利用，所以应该跟 CG 等语言放在一起，而 CG 等语言程序就包括在 `CGPROGRAM ... ENDCG` 语句块内。\n\n### 与 CG 等语言变量类型映射关系\n\nShaderlab 提供的类型最终会映射成 CG 等语言变量类型，他们的映射关系为：\n\n- **Color** 和 **Vector** 对应为 float4, half4 或者 fixed4 类型\n- **Range** 和 **Float** 对应为 float, half, fixed 类型\n- **Int** 对应为 int 类型\n- **2D** 对应为 sampler2D 类型\n- **Cube** 对应为 samplerCUBE 类型\n- **3D** 对应为 sampler3D 类型\n\n上面可以看到，有些属性是可以对应成好几类类型。Float 是 32 位高精度浮点数, half 是 16 位中等精度浮点数, Fixed 一般是 11 低位浮点数。为了性能建议使用的数据选择合适的类型。\n下面有两个建议（在移动设备上尤其重要）：\n\n- 对于 Color 和 单位向量，使用 fixed 类型\n- 对于其他的类型，如果范围和精度都适合的话选择 half, 否则选择 float\n\n最后放上上面的图片所用的 shader 代码：\n\n{% codeblock %}\nShader \"Custom/Properties\" {\n    Properties {\n        _RangeType (\"Range 类型\", Range(0,1)) = 0.5\n        _FloatType (\"Float 类型\", Float) = 1.0\n        _IntType (\"Int 类型\", Int) = 1\n        _ColorType (\"Color 类型\", Color) = (1, 1, 1, 1)\n        _VectorType (\"Vector 类型\", vector) = (0, 0, 0, 0)\n        _2DType (\"2D纹理类型\", 2D) = \"while\" {}\n        _CubeType (\"Cube 类型\", Cube) = \"black\" {}\n        _3DType (\"3D纹理类型\", 3D) = \"gray\" {}\n        _RectType(\"Rectangle\", Rect) = \"\" {}\n    }\n\n    SubShader {\n        Tags { \"RenderType\"=\"Opaque\" }\n        LOD 200\n\n        CGPROGRAM\n\n        #pragma surface surf Standard fullforwardshadows\n        #pragma target 3.0\n\n        // 再次声明跟属性一样的名字的变量\n        float _RangeType;\n        float _FloatType;\n        int _IntType;\n        fixed4 _ColorType;\n        float4 _VectorType;\n        sampler2D _2DType;\n        samplerCUBE _CubeType;\n        sampler3D _3DType;\n        float4 _RectType;\n\n        struct Input {\n            float2 uv_MainTex;\n        };\n\n        void surf (Input IN, inout SurfaceOutputStandard o) {\n            o.Alpha = (0, 0, 0, 0);\n        }\n\n        ENDCG\n    }\n}\n{% endcodeblock %}\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","slug":"Shader_9","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkavs001m2quojtzmwiw8"},{"title":"瞎聊 Unity Shader 系列之八：#pragma 指令","date":"2015-05-07T08:13:00.000Z","_content":"\n第三节 {% post_link Shader_3 [Shader 土地上的语言们] %} 里面说到过 CG 和 HLSL 等语言被 `GGPROGRAM ... ENDCG` 语句块里面。这节的主角 #pragma 出现的位置就是在这个语句块里面，用来做编译指示的。就好比告诉\n Shaderlab 的编译器，你应该这么干应该那么干。这里把 #pragma 叫做编译指令吧。\n\n`CGPROGRAM ... ENDCG` 语句块根据 Shaderlab 写作方式不同，它的位置也不同。\n\n- 如果是 **surface shader**, 它在 Subshader 语句块里面，不是在 Pass 语句块里面\n- 如果是 **vertex&&framgment shader**，它是 Pass 语句块里面\n\n其实 surface shader 最终会编译成 vertex&&framgment shader, 最终结果是一样的的。surface shader 会被编译成含多个 Pass 的 vertex&&fragment shader, 而这些都用相同的编译指令。我们可以从 Inspector 的 shader\n属性信息里面去打开被编译为 vertex&&fragment shader 后的代码。\n\n![surface shader](/images/Shader/8/surfaceshader.png)\n\n如果本身不是 surface shader 的话，上面那个 show generated code 按钮是不会出现的。上面提到 #pragma 是在 `CGPROGRAM ... ENDCG` 语句块里面的，所以它出现的位置也符合上面提到的特征。\n\n<!--more-->\n\n### Surface Shader 的编译指令\n\n这类 shader 必须指明\n\n- surfaceFuction 是什么\n- 关照模型是什么\n\n语法是\n\n>   #pragma surface surfaceFunction lightModel [optionalparams]\n\n\n从上面语法能知道，它有一些可以选的参数。具体参考 [这个页面](http://docs.unity3d.com/Manual/SL-SurfaceShaders.html)\n\n伪代码大概是这样：\n\n{% codeblock %}\nShader \"shader 的名字\" {\n\n    Subshader {\n        // CGPROGRAM ... ENDCG 在 Subshader 里面\n        CGPROGRAM\n\n        // surfaceFunction 是 surf,\n        // 光照模型是 Standard\n        // [...] 表示可选参数\n        #pragma surface surf Standard [...]\n\n\n        // surfaceFunction\n        void surf () {\n\n        }\n\n        ENCG\n    }\n}\n{% endcodeblock %}\n\n### Vertex&&Fragment Shader 的编译指令\n\n这里的指令集分三类:\n\n- CG/HLSL 程序相关\n- 面向的 {% post_link Shader_1 [Shader Model]%}\n- 渲染的平台\n\n具体参考 [这个页面](http://docs.unity3d.com/Manual/SL-ShaderPrograms.html)\n\n伪代码大概是这样：\n\n{% codeblock %}\nShader \"shader 的名字\" {\n\n    Subshader {\n\n        pass {\n            // CGPROGRAM ... ENDCG 在 Pass 里面\n            CGPROGRAM\n\n            // vertex shader 的函数是 vert\n            #pragma vertex vert\n\n            // fragment shader 的函数是 fragment\n            #pragma fragment frag\n\n            vert() {\n\n            }\n\n            frag () {\n\n            }\n\n            ENDCG\n        }\n    }\n}\n{% endcodeblock %}\n\n代码中的 vertex shader 和 fragment shader 在渲染管道中的位置请参考这系列文章第二节 {% post_link Shader_2 [渲染管道] %}。\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","source":"_posts/Shader_8.md","raw":"title: 瞎聊 Unity Shader 系列之八：#pragma 指令\ndate: 2015-05-07 16:13\ncategory: Shader\ntags: Shader\n---\n\n第三节 {% post_link Shader_3 [Shader 土地上的语言们] %} 里面说到过 CG 和 HLSL 等语言被 `GGPROGRAM ... ENDCG` 语句块里面。这节的主角 #pragma 出现的位置就是在这个语句块里面，用来做编译指示的。就好比告诉\n Shaderlab 的编译器，你应该这么干应该那么干。这里把 #pragma 叫做编译指令吧。\n\n`CGPROGRAM ... ENDCG` 语句块根据 Shaderlab 写作方式不同，它的位置也不同。\n\n- 如果是 **surface shader**, 它在 Subshader 语句块里面，不是在 Pass 语句块里面\n- 如果是 **vertex&&framgment shader**，它是 Pass 语句块里面\n\n其实 surface shader 最终会编译成 vertex&&framgment shader, 最终结果是一样的的。surface shader 会被编译成含多个 Pass 的 vertex&&fragment shader, 而这些都用相同的编译指令。我们可以从 Inspector 的 shader\n属性信息里面去打开被编译为 vertex&&fragment shader 后的代码。\n\n![surface shader](/images/Shader/8/surfaceshader.png)\n\n如果本身不是 surface shader 的话，上面那个 show generated code 按钮是不会出现的。上面提到 #pragma 是在 `CGPROGRAM ... ENDCG` 语句块里面的，所以它出现的位置也符合上面提到的特征。\n\n<!--more-->\n\n### Surface Shader 的编译指令\n\n这类 shader 必须指明\n\n- surfaceFuction 是什么\n- 关照模型是什么\n\n语法是\n\n>   #pragma surface surfaceFunction lightModel [optionalparams]\n\n\n从上面语法能知道，它有一些可以选的参数。具体参考 [这个页面](http://docs.unity3d.com/Manual/SL-SurfaceShaders.html)\n\n伪代码大概是这样：\n\n{% codeblock %}\nShader \"shader 的名字\" {\n\n    Subshader {\n        // CGPROGRAM ... ENDCG 在 Subshader 里面\n        CGPROGRAM\n\n        // surfaceFunction 是 surf,\n        // 光照模型是 Standard\n        // [...] 表示可选参数\n        #pragma surface surf Standard [...]\n\n\n        // surfaceFunction\n        void surf () {\n\n        }\n\n        ENCG\n    }\n}\n{% endcodeblock %}\n\n### Vertex&&Fragment Shader 的编译指令\n\n这里的指令集分三类:\n\n- CG/HLSL 程序相关\n- 面向的 {% post_link Shader_1 [Shader Model]%}\n- 渲染的平台\n\n具体参考 [这个页面](http://docs.unity3d.com/Manual/SL-ShaderPrograms.html)\n\n伪代码大概是这样：\n\n{% codeblock %}\nShader \"shader 的名字\" {\n\n    Subshader {\n\n        pass {\n            // CGPROGRAM ... ENDCG 在 Pass 里面\n            CGPROGRAM\n\n            // vertex shader 的函数是 vert\n            #pragma vertex vert\n\n            // fragment shader 的函数是 fragment\n            #pragma fragment frag\n\n            vert() {\n\n            }\n\n            frag () {\n\n            }\n\n            ENDCG\n        }\n    }\n}\n{% endcodeblock %}\n\n代码中的 vertex shader 和 fragment shader 在渲染管道中的位置请参考这系列文章第二节 {% post_link Shader_2 [渲染管道] %}。\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","slug":"Shader_8","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkavv001p2quoyu4hhfd0"},{"title":"瞎聊 Unity Shader 系列之七：究竟谁先被渲染？","date":"2015-05-06T08:05:00.000Z","_content":"\n这节的问题: 假设有很多对象需要渲染，而你想自己指定这些对象被渲染的顺序的话应该怎么做？\n\n先上答案：使用 Subshader 的 Queue 标签指定。\n\n那 Queue 标签又是是那么？？ 我们继续往下看，先介绍 Subshader 的标签\n\n### Subshader 的标签\n\n在上一节 {% post_link Shader_6 [初识 Shaderlab] %} 中我们知道 Subshader 语句块内有个 `[Tags]` 可选项，它的作用是是配置渲染引擎应该 **什么时候 和 怎么样** 去渲染。这就是 Subshader 的标签。\n\n它的语法是：\n\n> Tags { \"TagName1\" = \"Value1\" \"TagName2\" = \"Value2\" ... }\n\n就是 Tags 语法块内带有若干键值对项（理论上可有很多很多个这种键值对）。可以填写的些键值对可以参考 [这个页面](http://docs.unity3d.com/Manual/SL-SubshaderTags.html)\n\n需要注意一点 **它只能写在 Subshader 语句块里面，不能写在 Pass 语句块里面**。\n\n<!--more-->\n\n### Queue 标签\n\nQueue 标签是上面提到的可选键值对项中的一个，也就是决定对象被渲染顺序的标签。根据上面的语法，我们可以这么写：\n\n> Tags { \"Queue\" = \"XXXX\" }\n\n上面的 `XXXX` 是 Queue 标签的值，这个值在内部是整数型的索引。**数值越小，越先被渲染**。但是不要以为直接填整数就可以，Shaderlab 不支持直接填数值，而是先定义好了 5 个具有描述性的词来代替单调的数值。他们是：\n\n- **Background：** 对应数值为 1000，用于需要被最先渲染的对象，如背景什么的。\n- **Geometry：** 对应数值为 2000, 用于不透明的物体。这个是默认的选项（如果不指明 Queue 标签的值，自动给你指定为 Geometry）。\n- **AlphaTest：** 对应的数值为 2450, 用于需要使用 AlphaTest 的对象来提高性能。AlphaTest 类似于裁剪 (clip) 功能。\n- **Transparent：** 对应的数值为 3000， 用于需要使用 alpha blending 的对象，比如粒子，玻璃等。\n- **Overlay：** 对应的数值为 4000，用于最后被渲染的对象，比如 UI。\n\n渲染顺序的示意图如下：\n\n![queue](/images/Shader/7/queue.png)\n\n前面提到虽然 Queue 内部是整型数值，但是写 shader 的时候不能给它指定整型数值，那要是前置给它指定为整型数值会怎么样？\n\n答案是：会被忽略，使用默认的值，也就是 Geometry。同样的，随便填写的值也是会被忽略并使用默认值代替。 比如 `asd1123`。\n\n还有 Shaderlab 还对上面五类做了延伸，让他们 **支持加减法**。比如想让对象在 Background 之后 Geometry 之前渲染，我们可以这么写:\n\n> Tags { \"Queue\" = \"Geometry-1\"}\n\n这里有几点比较重要：\n\n- `Geometry-1` 中间不能有空格\n- 这个语法是整型数值的加减法。 `Geometry-1` 和 `Background+999` 得到的结果是一样的，因为 2000 - 1 = 1000 + 999。\n\n我们在 Unity 编辑器里面选中 shader 文件，然后从 Inspector 里查看 Shader 的 Render queue 属性值，如下图：\n\n![render queue](/images/Shader/7/geometry_1.png)\n\n最后基于上一节 {% post_link Shader_6 [初识 Shaderlab] %} 中的精简骨架，我们来写一个伪代码，看看插入 Queue 标签后的样子。  \n\n{% codeblock %}\nShader \"shader 的名字\" {\n\n    SubShader {\n        Tags { \"Queue\" = \"Transparent\" }\n\n        Pass {\n\n        }\n    }\n}\n{% endcodeblock %}\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)\n","source":"_posts/Shader_7.md","raw":"title: 瞎聊 Unity Shader 系列之七：究竟谁先被渲染？\ndate: 2015-05-06 16:05\ncategory: Shader\ntags: Shader\n---\n\n这节的问题: 假设有很多对象需要渲染，而你想自己指定这些对象被渲染的顺序的话应该怎么做？\n\n先上答案：使用 Subshader 的 Queue 标签指定。\n\n那 Queue 标签又是是那么？？ 我们继续往下看，先介绍 Subshader 的标签\n\n### Subshader 的标签\n\n在上一节 {% post_link Shader_6 [初识 Shaderlab] %} 中我们知道 Subshader 语句块内有个 `[Tags]` 可选项，它的作用是是配置渲染引擎应该 **什么时候 和 怎么样** 去渲染。这就是 Subshader 的标签。\n\n它的语法是：\n\n> Tags { \"TagName1\" = \"Value1\" \"TagName2\" = \"Value2\" ... }\n\n就是 Tags 语法块内带有若干键值对项（理论上可有很多很多个这种键值对）。可以填写的些键值对可以参考 [这个页面](http://docs.unity3d.com/Manual/SL-SubshaderTags.html)\n\n需要注意一点 **它只能写在 Subshader 语句块里面，不能写在 Pass 语句块里面**。\n\n<!--more-->\n\n### Queue 标签\n\nQueue 标签是上面提到的可选键值对项中的一个，也就是决定对象被渲染顺序的标签。根据上面的语法，我们可以这么写：\n\n> Tags { \"Queue\" = \"XXXX\" }\n\n上面的 `XXXX` 是 Queue 标签的值，这个值在内部是整数型的索引。**数值越小，越先被渲染**。但是不要以为直接填整数就可以，Shaderlab 不支持直接填数值，而是先定义好了 5 个具有描述性的词来代替单调的数值。他们是：\n\n- **Background：** 对应数值为 1000，用于需要被最先渲染的对象，如背景什么的。\n- **Geometry：** 对应数值为 2000, 用于不透明的物体。这个是默认的选项（如果不指明 Queue 标签的值，自动给你指定为 Geometry）。\n- **AlphaTest：** 对应的数值为 2450, 用于需要使用 AlphaTest 的对象来提高性能。AlphaTest 类似于裁剪 (clip) 功能。\n- **Transparent：** 对应的数值为 3000， 用于需要使用 alpha blending 的对象，比如粒子，玻璃等。\n- **Overlay：** 对应的数值为 4000，用于最后被渲染的对象，比如 UI。\n\n渲染顺序的示意图如下：\n\n![queue](/images/Shader/7/queue.png)\n\n前面提到虽然 Queue 内部是整型数值，但是写 shader 的时候不能给它指定整型数值，那要是前置给它指定为整型数值会怎么样？\n\n答案是：会被忽略，使用默认的值，也就是 Geometry。同样的，随便填写的值也是会被忽略并使用默认值代替。 比如 `asd1123`。\n\n还有 Shaderlab 还对上面五类做了延伸，让他们 **支持加减法**。比如想让对象在 Background 之后 Geometry 之前渲染，我们可以这么写:\n\n> Tags { \"Queue\" = \"Geometry-1\"}\n\n这里有几点比较重要：\n\n- `Geometry-1` 中间不能有空格\n- 这个语法是整型数值的加减法。 `Geometry-1` 和 `Background+999` 得到的结果是一样的，因为 2000 - 1 = 1000 + 999。\n\n我们在 Unity 编辑器里面选中 shader 文件，然后从 Inspector 里查看 Shader 的 Render queue 属性值，如下图：\n\n![render queue](/images/Shader/7/geometry_1.png)\n\n最后基于上一节 {% post_link Shader_6 [初识 Shaderlab] %} 中的精简骨架，我们来写一个伪代码，看看插入 Queue 标签后的样子。  \n\n{% codeblock %}\nShader \"shader 的名字\" {\n\n    SubShader {\n        Tags { \"Queue\" = \"Transparent\" }\n\n        Pass {\n\n        }\n    }\n}\n{% endcodeblock %}\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)\n","slug":"Shader_7","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkavx001s2quoshnj1uoy"},{"title":"瞎聊 Unity Shader 系列之六：初识 Shaderlab","date":"2015-05-05T09:55:00.000Z","_content":"\n好吧，其实这不算初识 Shaderlab 了，因为在 {% post_link Shader_3 [shaderlab 土地上的语言们] %} 这节中已经说到在 shaderlab 中有三种方式来写 shader。\n这节的内容主要是来认识下 shaderlab 语法写出来的 shader 长得什么样子。\n\n下面有段基于 shaderlab 的 shader 的大概框架的伪代码，在之前要解释下代码中带中括号的部分，如 `[Properties]`, 表示是可以选择的，也就是说可以不写。\n\n<!--more-->\n\n{% codeblock %}\n//shader 的名字会显示在 Unity 的 Inspector 中选择 shader 的菜单里面\nShader \"shader 的名字\" {\n    // 属性\n    [Properties]\n\n    // 可能存在多个 subshader。Unity 会在所有 subshader 列表中选择当前环境中可用的第一个 subshader\n    Subshader {\n        // subshader 的标签\n        [Tags]\n\n        // 给多个 pass 公用的设置\n        [Common State]\n\n        // 可能存在多个 pass, 每个 pass 都会引起一次渲染过程\n        Pass {\n            // pass 的标签\n            [Pass Tags]\n\n            // 渲染设置, 如颜色混合\n            [Render Setup]\n\n            // 纹理设置，只有在 fixed function shader 中才可用\n            [Texture Setup]\n        }\n\n        // 可以有多个 pass\n        [其他的 Pass]\n    }\n\n    // 可以有多个 subshader\n    [其他的 Subshader]\n\n    // 当所有 subshader 失败的时候, 使用 Fallback 指定的 shader\n    [Fallback]\n\n    // 当有自定义 shader 的设置 UI 时候用\n    [CustomEditor]\n}\n{% endcodeblock %}\n\n上面伪代码中的注释解释了各个部分的作用，如果去除可选部分，最后就留下**精简的骨架**:\n\n{% codeblock %}\nShader \"shader 的名字\" {\n\n    Subshader {\n\n        Pass { }\n    }\n}\n{% endcodeblock %}\n\n而大部分 shader 都是在上面代码基础上扩展的。\n\n这节就到这里，会在后面的章节继续聊 shaderlab。\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","source":"_posts/Shader_6.md","raw":"title: 瞎聊 Unity Shader 系列之六：初识 Shaderlab\ndate: 2015-05-05 17:55\ncategory: Shader\ntags: Shader\n---\n\n好吧，其实这不算初识 Shaderlab 了，因为在 {% post_link Shader_3 [shaderlab 土地上的语言们] %} 这节中已经说到在 shaderlab 中有三种方式来写 shader。\n这节的内容主要是来认识下 shaderlab 语法写出来的 shader 长得什么样子。\n\n下面有段基于 shaderlab 的 shader 的大概框架的伪代码，在之前要解释下代码中带中括号的部分，如 `[Properties]`, 表示是可以选择的，也就是说可以不写。\n\n<!--more-->\n\n{% codeblock %}\n//shader 的名字会显示在 Unity 的 Inspector 中选择 shader 的菜单里面\nShader \"shader 的名字\" {\n    // 属性\n    [Properties]\n\n    // 可能存在多个 subshader。Unity 会在所有 subshader 列表中选择当前环境中可用的第一个 subshader\n    Subshader {\n        // subshader 的标签\n        [Tags]\n\n        // 给多个 pass 公用的设置\n        [Common State]\n\n        // 可能存在多个 pass, 每个 pass 都会引起一次渲染过程\n        Pass {\n            // pass 的标签\n            [Pass Tags]\n\n            // 渲染设置, 如颜色混合\n            [Render Setup]\n\n            // 纹理设置，只有在 fixed function shader 中才可用\n            [Texture Setup]\n        }\n\n        // 可以有多个 pass\n        [其他的 Pass]\n    }\n\n    // 可以有多个 subshader\n    [其他的 Subshader]\n\n    // 当所有 subshader 失败的时候, 使用 Fallback 指定的 shader\n    [Fallback]\n\n    // 当有自定义 shader 的设置 UI 时候用\n    [CustomEditor]\n}\n{% endcodeblock %}\n\n上面伪代码中的注释解释了各个部分的作用，如果去除可选部分，最后就留下**精简的骨架**:\n\n{% codeblock %}\nShader \"shader 的名字\" {\n\n    Subshader {\n\n        Pass { }\n    }\n}\n{% endcodeblock %}\n\n而大部分 shader 都是在上面代码基础上扩展的。\n\n这节就到这里，会在后面的章节继续聊 shaderlab。\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","slug":"Shader_6","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkavz001v2quotk4temyw"},{"title":"瞎聊 Unity Shader 系列之五：RGBA 101","date":"2015-05-04T05:55:00.000Z","_content":"\n这节说说 fragment shader 最后输出的像素的颜色表示方法 RGBA。\n\n玩过 Photoshop 的同学可能知道，存在好几种颜色模式来表示颜色，[比如 RGB 和 CMYK](http://baike.baidu.com/view/1139658.htm). 由于显示器的发光物体，所以使用的 RGB 模式。\nUnity 中也采用这种表示方法。\n\n### RGB模式\nRGB是用红绿蓝混合来表示的颜色。R 是红色， G 表示绿色， B 是蓝色。一般用8为来表示一个颜色通道，每个通道有 256 个等级（0~255）。它有如下特性：\n\n- `(0, 0, 0)` 表示黑色\n- `(255, 255, 255)` 表示白色\n- 三个通道数值相同的时候是灰色，比如 `(128, 128, 128)`\n- 数值越大颜色越亮，反之数值越小越暗\n\n![RGB](/images/Shader/5/rgb.png)\n\n但是 Unity Shader 中并不用 256 个等级来表示颜色数值，而是用标准化（取值0~1）的数值来表示。换句话说就是所有通道都除以 255 得到标准化的结果。\n\n### RGBA 中的 A 是什么\n\nA 叫做 alpha，其数值表示不透明度。 据说提出者用 alpha 来命名源于经典的线性插值方程 αA + (1-α)B 所用的希腊字母 α。Unity 中的 aplha blending 基于这个线性方程。\n\n### 混合模式\n\n抽象一下就是对两个颜色做运算后得到结果颜色的过程。这个过程其实就是个运算公式。下面列举两个 Photoshop 中常见的正片叠底和滤色两个混合模式的计算公式。C为结果色，A 和 B 是需要混合的颜色。\n\n- **正片叠底(Multiply):** C=A*B\n- **滤色(Screen):** C=1-(1-A)*(1-B)\n\n\n我们要叠加模型多个贴图（比如法线贴图和模型贴图）的时候就可以利用到混合模式。更多混合模式公式参考[这个文档](http://wenku.baidu.com/view/da9d22d9ad51f01dc281f1f9.html)。\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","source":"_posts/Shader_5.md","raw":"title: 瞎聊 Unity Shader 系列之五：RGBA 101\ndate: 2015-05-04 13:55\ncategory: Shader\ntags: Shader\n---\n\n这节说说 fragment shader 最后输出的像素的颜色表示方法 RGBA。\n\n玩过 Photoshop 的同学可能知道，存在好几种颜色模式来表示颜色，[比如 RGB 和 CMYK](http://baike.baidu.com/view/1139658.htm). 由于显示器的发光物体，所以使用的 RGB 模式。\nUnity 中也采用这种表示方法。\n\n### RGB模式\nRGB是用红绿蓝混合来表示的颜色。R 是红色， G 表示绿色， B 是蓝色。一般用8为来表示一个颜色通道，每个通道有 256 个等级（0~255）。它有如下特性：\n\n- `(0, 0, 0)` 表示黑色\n- `(255, 255, 255)` 表示白色\n- 三个通道数值相同的时候是灰色，比如 `(128, 128, 128)`\n- 数值越大颜色越亮，反之数值越小越暗\n\n![RGB](/images/Shader/5/rgb.png)\n\n但是 Unity Shader 中并不用 256 个等级来表示颜色数值，而是用标准化（取值0~1）的数值来表示。换句话说就是所有通道都除以 255 得到标准化的结果。\n\n### RGBA 中的 A 是什么\n\nA 叫做 alpha，其数值表示不透明度。 据说提出者用 alpha 来命名源于经典的线性插值方程 αA + (1-α)B 所用的希腊字母 α。Unity 中的 aplha blending 基于这个线性方程。\n\n### 混合模式\n\n抽象一下就是对两个颜色做运算后得到结果颜色的过程。这个过程其实就是个运算公式。下面列举两个 Photoshop 中常见的正片叠底和滤色两个混合模式的计算公式。C为结果色，A 和 B 是需要混合的颜色。\n\n- **正片叠底(Multiply):** C=A*B\n- **滤色(Screen):** C=1-(1-A)*(1-B)\n\n\n我们要叠加模型多个贴图（比如法线贴图和模型贴图）的时候就可以利用到混合模式。更多混合模式公式参考[这个文档](http://wenku.baidu.com/view/da9d22d9ad51f01dc281f1f9.html)。\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","slug":"Shader_5","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkaw0001y2quorpuv8u9u"},{"title":"瞎聊 Unity Shader 系列之四：坐标系","date":"2015-04-30T05:55:00.000Z","_content":"\n这节从很平常一段对话开始：\n\n> **甲跟乙说：** 喂，你看到那个人没有？  \n> **乙：** 你说的是哪个？  \n> **甲：** 就是那棵树旁边那个。  \n\n从对话里面我们知道：**要描述一个物体的位置，我们需要借助参照物。** 其实甲也可以这么说：\n\n> **甲：** 在那个个子很高的人左手边那位。\n\n所以说 **参照物是可以选择的，可变的**。\n\n我们把上面对话推广到坐标系上，来给坐标系下个山寨的定义：**坐标系是为了描述物体位置而存在，我们借助的参照物是它的原点\n。由于可以选择不同的参照物，所以我们可以选择不同的原点。** 原点很重要，我们利用坐标系的时候首先要知道原点在哪里。\n\n既然原点可以任意选，那不是说会出现很多坐标系？ 是的，但是我们使用几种约定的坐标系就好了。\n\n<!--more-->\n\n### 那些坐标系们\n\n下面是我们平时会碰到的一些坐标系。按规定，原点的各个轴是数值都是 0 来表示。\n\n- **物体坐标系 (Object Space)：** 有时也叫做 Local Space。是 3D 模型内部的坐标系，原点 `(0, 0, 0)` 一般是模型中心。\n- **世界坐标系 (World Space)：** Unity 系统中的绝对坐标系，原点是在场景的 `(0，0，0)` 位置处。\n- **视口坐标系 (Viewport Space)：** 以摄像机为原点，朝向为 Z 轴的坐标系。原点 `(0, 0, 0)` 是摄像机的位置。\n- **屏幕坐标系 (Screen Space)：** 原点 `(0, 0)` 在屏幕的左下角，右上角为 `(Screen.width，Screen.height)`。\n\n那问题来了。这些坐标系们有什么关系？\n\n我们以立方体为例。我们从 {% post_link Shader_2 [渲染管线] %} 小节中知道，Mesh Renderer 组件得到模型数据之后它会执行 vertex shader（Unity 默认的 Shader 给我提供了）。\nvertex shader 里面做了下面这些事：\n\n1. 先把立方体从模型的物体坐标系转换成世界坐标系，**从 物体 到 世界**。这样子，它和摄像机（世界坐标）的位置就用同一个坐标系描述了。\n2. 再把立方体从世界坐标转换成视口坐标系，也就是摄像机因为原点的坐标系，**从 世界 到 视口**。这样它是在摄像机的正面，还是在反面了。\n3. 最后在投射到屏幕坐标系上， **从 视口 到 屏幕**。这样知道哪些区域需要绘制在屏幕上，哪些不需要。\n\n总结上面一系列变换关系就是： **物体 到 世界 再到 视口 再到 屏幕**。中间经过了三次变换 (transform)。这些变换在数学上通过 **矩阵** 来描述的。这里有个知识点：\n矩阵可以表示变换。在这里推荐关于 3D 数学的一本经典好书 [《3D数学基础图形与游戏开发》](http://pan.baidu.com/s/1eQ8eSYQ)。\n\n到现在是不是有种跃跃欲试，但是想想又头大的感觉，在 Unity 里面这些矩阵具体的数值是什么？要是自己去运算那多复杂啊。别急，Unity 给我们已经提供了这些矩阵当作 Shader\n的内置变量（[详情参考这个链接](http://docs.unity3d.com/Manual/SL-UnityShaderVariables.html)），可以在编程的时候直接使用。在这里只是说一下，我们利用 `UNITY_MATRIX_MVP`\n 这个矩阵就可以达到变换到屏幕坐标系的目的。至于怎么做，会在以后的文章中会提到。\n\n### 左手和右手坐标系\n\n这两不是新坐标系，是建立三维坐标系的两种选择。换句话说对于处于同一个物体，可以用基于左手坐标系规则来建立三维坐标系，也可以用基于右手坐标系规则来建立三维空间，他们的区别是坐标轴的数值会有差异。\n\n为什么叫做左手和右手，看看下面的图就知道了。\n\n![leftAndright](/images/Shader/4/leftandRightHandCoordinate.png)\n\n一般情况下左手和右手坐标系的数值做转换的话只需把 Z 值乘以 -1 即可。比如左手坐标系的 `(1, 1, 1)` 转成为右手坐标系是  `(1, 1, -1)`。\n\n<hr>\n\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","source":"_posts/Shader_4.md","raw":"title: 瞎聊 Unity Shader 系列之四：坐标系\ndate: 2015-04-30 13:55\ncategory: Shader\ntags: Shader\n---\n\n这节从很平常一段对话开始：\n\n> **甲跟乙说：** 喂，你看到那个人没有？  \n> **乙：** 你说的是哪个？  \n> **甲：** 就是那棵树旁边那个。  \n\n从对话里面我们知道：**要描述一个物体的位置，我们需要借助参照物。** 其实甲也可以这么说：\n\n> **甲：** 在那个个子很高的人左手边那位。\n\n所以说 **参照物是可以选择的，可变的**。\n\n我们把上面对话推广到坐标系上，来给坐标系下个山寨的定义：**坐标系是为了描述物体位置而存在，我们借助的参照物是它的原点\n。由于可以选择不同的参照物，所以我们可以选择不同的原点。** 原点很重要，我们利用坐标系的时候首先要知道原点在哪里。\n\n既然原点可以任意选，那不是说会出现很多坐标系？ 是的，但是我们使用几种约定的坐标系就好了。\n\n<!--more-->\n\n### 那些坐标系们\n\n下面是我们平时会碰到的一些坐标系。按规定，原点的各个轴是数值都是 0 来表示。\n\n- **物体坐标系 (Object Space)：** 有时也叫做 Local Space。是 3D 模型内部的坐标系，原点 `(0, 0, 0)` 一般是模型中心。\n- **世界坐标系 (World Space)：** Unity 系统中的绝对坐标系，原点是在场景的 `(0，0，0)` 位置处。\n- **视口坐标系 (Viewport Space)：** 以摄像机为原点，朝向为 Z 轴的坐标系。原点 `(0, 0, 0)` 是摄像机的位置。\n- **屏幕坐标系 (Screen Space)：** 原点 `(0, 0)` 在屏幕的左下角，右上角为 `(Screen.width，Screen.height)`。\n\n那问题来了。这些坐标系们有什么关系？\n\n我们以立方体为例。我们从 {% post_link Shader_2 [渲染管线] %} 小节中知道，Mesh Renderer 组件得到模型数据之后它会执行 vertex shader（Unity 默认的 Shader 给我提供了）。\nvertex shader 里面做了下面这些事：\n\n1. 先把立方体从模型的物体坐标系转换成世界坐标系，**从 物体 到 世界**。这样子，它和摄像机（世界坐标）的位置就用同一个坐标系描述了。\n2. 再把立方体从世界坐标转换成视口坐标系，也就是摄像机因为原点的坐标系，**从 世界 到 视口**。这样它是在摄像机的正面，还是在反面了。\n3. 最后在投射到屏幕坐标系上， **从 视口 到 屏幕**。这样知道哪些区域需要绘制在屏幕上，哪些不需要。\n\n总结上面一系列变换关系就是： **物体 到 世界 再到 视口 再到 屏幕**。中间经过了三次变换 (transform)。这些变换在数学上通过 **矩阵** 来描述的。这里有个知识点：\n矩阵可以表示变换。在这里推荐关于 3D 数学的一本经典好书 [《3D数学基础图形与游戏开发》](http://pan.baidu.com/s/1eQ8eSYQ)。\n\n到现在是不是有种跃跃欲试，但是想想又头大的感觉，在 Unity 里面这些矩阵具体的数值是什么？要是自己去运算那多复杂啊。别急，Unity 给我们已经提供了这些矩阵当作 Shader\n的内置变量（[详情参考这个链接](http://docs.unity3d.com/Manual/SL-UnityShaderVariables.html)），可以在编程的时候直接使用。在这里只是说一下，我们利用 `UNITY_MATRIX_MVP`\n 这个矩阵就可以达到变换到屏幕坐标系的目的。至于怎么做，会在以后的文章中会提到。\n\n### 左手和右手坐标系\n\n这两不是新坐标系，是建立三维坐标系的两种选择。换句话说对于处于同一个物体，可以用基于左手坐标系规则来建立三维坐标系，也可以用基于右手坐标系规则来建立三维空间，他们的区别是坐标轴的数值会有差异。\n\n为什么叫做左手和右手，看看下面的图就知道了。\n\n![leftAndright](/images/Shader/4/leftandRightHandCoordinate.png)\n\n一般情况下左手和右手坐标系的数值做转换的话只需把 Z 值乘以 -1 即可。比如左手坐标系的 `(1, 1, 1)` 转成为右手坐标系是  `(1, 1, -1)`。\n\n<hr>\n\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","slug":"Shader_4","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkaw300212quo2m140n7r"},{"title":"瞎聊 Unity Shader 系列之三：Shader 土地上的语言们","date":"2015-04-29T06:33:00.000Z","_content":"\n这节是关于 Unity 平台上 shader 语言的选择。\n\n计算机行业的各公司（或者组织）似乎都遵循着某种规则。当他们在某个领域划出了一亩三分地，当上了地主后, 就要用方法圈住干活的农民。让他们觉得在我这里不会饿死，有饭吃，你要到别家\n干活的话，需要重头再来，这是一个很亏本的买卖。这个方法就是制定自己体系（软硬件中的各种协议，接口，语言，框架），脱离这套体系，在别的地方玩不起来。开个玩笑来取名这个规矩叫做**圈地规则**吧。\n\n### Shader 语言们\n\n根据上面提到的圈地规则，下面来隆重的介绍下 shader 这块地上地主们建立起来的体系：CG, HLSL 和 GLSL 语言\n\n- **CG：** C for Graphics 的简称，是 NVIDIA 公司开发的语言。从名字上来看的出它是 C 语言的亲戚，现实是它保留了 C 语言的大部分语义。\n- **HLSL：** High Level Shader Language 的简称，由微软开发的语言。语法跟 CG 非常的相似。\n- **GLSL：** OpenGL Shading Language 的简称，OPENGL 组件开发的，语法也是基于 C 语言的。\n\n那么问题来了，Shader 语言到底哪家强？这个也发生过强烈的讨论。\n\n<!--more-->\n\n其实这个问题好回答，既然跟着 Unity 地主干，听 Unity 地主的话就好了。那么另外一个问题又来了，Unity 地主的观点又是什么？\n\n### Unity 体系规则 Shaderlab\n\n根据圈地规则，Unity 地主也有自己的体系，那就是 Shaderlab。那 shaderlab 又是什么呢？ 这是一个能包容 CG, HLSL 和 GLSL，并且有自己语法体系的东西。\n\n- 能包容 CG, HLSL, 和 GLSL 意思是说在它里面能使用这三种语言。Shaderlab 中用特定的语法块来指定他们：\n    - GG 和 HLSL 包括在 `CGPROGRAM ... ENDCG` 语法块内\n    - GLSL 包括在 `GLSLPROGRAM ... ENDGLSL` 语法块内\n- 有自己的语法系统是指它有自己独特的语法，并且独立于上面三种语言（这句似乎是废话。。。）\n\nUnity 官方比较提倡 CG 或 HLSL 语言。所以我们首选这两个中的其中一个了。之前提到，其实这两语法非常相似，所以其实学好了其中一门就差不多等于学了两门语言。（好像很划算的样子！）\n\n### 在 Shaderlab 中写 Shader 的三种方式\n\nUnity 手册 Shader 参考章节[开篇](http://docs.unity3d.com/Manual/SL-Reference.html)就写道 :\n\n> Shaders in Unity can be written in one of three different ways:\n>\n> as [**surface shaders**](http://docs.unity3d.com/Manual/SL-SurfaceShaders.html),  \n> as [**vertex and fragment shaders**](http://docs.unity3d.com/Manual/SL-ShaderPrograms.html) or  \n> as fixed function shaders.\n>\n\n也就是说有三种 shader 的变体。\n\n#### Fixed function shaders\n\n这种 shader 一般用于不支持可编程 shader 模型的老设备上面， 比如 iPhone3。Unity 用 shaderlab 的语法来配置。\n\n#### vertex and fragment shaders\n\n参考名字，这个主要是玩转 vertex 和 fragment shader 的。参考 {% post_link Shader_2 [渲染管线] %} 章节可以知道这两个 shader 处于什么位置。\n\n#### surface shaders\n\nUnity 提倡如果想写跟光线交互的 shader 使用这种方式写。那 surface shader 又是什么。 [Unity 手册里面有段话道出了真相：](http://docs.unity3d.com/Manual/SL-SurfaceShaders.html)\n\n> Surface Shader compiler then figures out what inputs are needed, what outputs are filled and so on, ** and generates actual vertex&pixel shaders,**\n> as well as rendering passes to handle forward and deferred rendering.\n\n原来 surface shader 最终会被编译成 vertex&fragment shader，这只是换了个汤。当然汤里家里点佐料就是 Unity 帮你处理光线而不用自己写算法。\n\n### 总结\nUnity Shaderlab 是基于shader语言上建立了自己的一套语法规则，我们不仅要学习 shaderlab 语法，也要学习 shader 语言。Unity 官方提倡使用 CG 或 HLSL 语言。\n\n### 参考\n- [Unity Manual](http://docs.unity3d.com/Manual/ShadersOverview.html)\n- [GPU 编程与CG 语言之阳春白雪下里巴人](http://pan.baidu.com/s/1rsaho)（点击链接即可下载），推荐此书。\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","source":"_posts/Shader_3.md","raw":"title: 瞎聊 Unity Shader 系列之三：Shader 土地上的语言们\ndate: 2015-04-29 14:33\ncategory: Shader\ntags: Shader\n---\n\n这节是关于 Unity 平台上 shader 语言的选择。\n\n计算机行业的各公司（或者组织）似乎都遵循着某种规则。当他们在某个领域划出了一亩三分地，当上了地主后, 就要用方法圈住干活的农民。让他们觉得在我这里不会饿死，有饭吃，你要到别家\n干活的话，需要重头再来，这是一个很亏本的买卖。这个方法就是制定自己体系（软硬件中的各种协议，接口，语言，框架），脱离这套体系，在别的地方玩不起来。开个玩笑来取名这个规矩叫做**圈地规则**吧。\n\n### Shader 语言们\n\n根据上面提到的圈地规则，下面来隆重的介绍下 shader 这块地上地主们建立起来的体系：CG, HLSL 和 GLSL 语言\n\n- **CG：** C for Graphics 的简称，是 NVIDIA 公司开发的语言。从名字上来看的出它是 C 语言的亲戚，现实是它保留了 C 语言的大部分语义。\n- **HLSL：** High Level Shader Language 的简称，由微软开发的语言。语法跟 CG 非常的相似。\n- **GLSL：** OpenGL Shading Language 的简称，OPENGL 组件开发的，语法也是基于 C 语言的。\n\n那么问题来了，Shader 语言到底哪家强？这个也发生过强烈的讨论。\n\n<!--more-->\n\n其实这个问题好回答，既然跟着 Unity 地主干，听 Unity 地主的话就好了。那么另外一个问题又来了，Unity 地主的观点又是什么？\n\n### Unity 体系规则 Shaderlab\n\n根据圈地规则，Unity 地主也有自己的体系，那就是 Shaderlab。那 shaderlab 又是什么呢？ 这是一个能包容 CG, HLSL 和 GLSL，并且有自己语法体系的东西。\n\n- 能包容 CG, HLSL, 和 GLSL 意思是说在它里面能使用这三种语言。Shaderlab 中用特定的语法块来指定他们：\n    - GG 和 HLSL 包括在 `CGPROGRAM ... ENDCG` 语法块内\n    - GLSL 包括在 `GLSLPROGRAM ... ENDGLSL` 语法块内\n- 有自己的语法系统是指它有自己独特的语法，并且独立于上面三种语言（这句似乎是废话。。。）\n\nUnity 官方比较提倡 CG 或 HLSL 语言。所以我们首选这两个中的其中一个了。之前提到，其实这两语法非常相似，所以其实学好了其中一门就差不多等于学了两门语言。（好像很划算的样子！）\n\n### 在 Shaderlab 中写 Shader 的三种方式\n\nUnity 手册 Shader 参考章节[开篇](http://docs.unity3d.com/Manual/SL-Reference.html)就写道 :\n\n> Shaders in Unity can be written in one of three different ways:\n>\n> as [**surface shaders**](http://docs.unity3d.com/Manual/SL-SurfaceShaders.html),  \n> as [**vertex and fragment shaders**](http://docs.unity3d.com/Manual/SL-ShaderPrograms.html) or  \n> as fixed function shaders.\n>\n\n也就是说有三种 shader 的变体。\n\n#### Fixed function shaders\n\n这种 shader 一般用于不支持可编程 shader 模型的老设备上面， 比如 iPhone3。Unity 用 shaderlab 的语法来配置。\n\n#### vertex and fragment shaders\n\n参考名字，这个主要是玩转 vertex 和 fragment shader 的。参考 {% post_link Shader_2 [渲染管线] %} 章节可以知道这两个 shader 处于什么位置。\n\n#### surface shaders\n\nUnity 提倡如果想写跟光线交互的 shader 使用这种方式写。那 surface shader 又是什么。 [Unity 手册里面有段话道出了真相：](http://docs.unity3d.com/Manual/SL-SurfaceShaders.html)\n\n> Surface Shader compiler then figures out what inputs are needed, what outputs are filled and so on, ** and generates actual vertex&pixel shaders,**\n> as well as rendering passes to handle forward and deferred rendering.\n\n原来 surface shader 最终会被编译成 vertex&fragment shader，这只是换了个汤。当然汤里家里点佐料就是 Unity 帮你处理光线而不用自己写算法。\n\n### 总结\nUnity Shaderlab 是基于shader语言上建立了自己的一套语法规则，我们不仅要学习 shaderlab 语法，也要学习 shader 语言。Unity 官方提倡使用 CG 或 HLSL 语言。\n\n### 参考\n- [Unity Manual](http://docs.unity3d.com/Manual/ShadersOverview.html)\n- [GPU 编程与CG 语言之阳春白雪下里巴人](http://pan.baidu.com/s/1rsaho)（点击链接即可下载），推荐此书。\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","slug":"Shader_3","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkaw500242quo6f2enc4c"},{"title":"瞎聊 Unity Shader 系列之二：渲染管线","date":"2015-04-28T03:07:00.000Z","_content":"\n这节描述的是图形渲染的大致过程。\n\n为了更好理解和记忆这节内容，先来学下面几个词。\n\n- **渲染管线(Rendering Pipeline)：** 一提到管线，感觉很高大上的样子。说的俗一点就是可以理解为流水线。渲染管线我们可暂时理解为 **从得到模型数据到绘制出图像** 这一过程的称呼。\n- **Vertex Shader：** 对顶点数据编程的一段程序。 人类有懒惰的天性，习惯用简化的词汇来表达同一个东西。对 Vertex Shader 也不例外，一般称其为 VS ，但是在本系列文章中会保持全称。\n- **Fragment Shader：** 对像素数据编程的一段程序。这里 fragment 可以理解为带有信息（颜色，坐标等）的像素 (Pixel), 一般也简称其为 FS 或者 PS 。 在本系列文章中会保持其全称。\n- **FrameBuffer：** 缓存帧数据的存储区，它一般包含的是要显示到显示设备上的位图数据（也就是图片数据）。\n- **Fixed Function：** 由于一些硬件支持等历史原因，早期的图形 API  **只支持对 GPU 做配置**，这部分只可配置的功能就是 fixed fucntion。\n这里注意下，fixed function 的功能只能配置，不像 Vertex Shader　和 fragment Shader 可以编程（写自己的算法）。\n\n\n### 渲染管线 (Rendering Pipeline)\n\n看图说话\n\n![2.renderingpipeline.jpg](/images/Shader/2/rendering-pipeline.jpg)\n\n上面是可编程的渲染管线模型的示意。下面多说几点：\n\n - 输入阶段。Unity 使用 Mesh Renderer 等组件读取模型顶点数据，然后调用图形 API，将数据传递给 GPU。\n - 现实中同时会进行多条渲染管线，他们是**并行的**。 这点概念比较重要，以后还会提到它。我们记住 GPU 并行能力很强。\n - 最后输出的 FrameBuffer (可以理解为渲染出来的图片) 有几率被抛弃掉，也就是说不显示在显示设备上。这个以后单独说明原因。好比残酷的现实世界，努力了（整个渲染过程）也不一定会成功（被显示出来）。\n\n<!--more-->\n\n### 总结\n渲染管道是从得模型数据到图像生成过程的一种描述。Vertex Shader 能对顶点数据写处理算法，而 Fragment Shader 能对像素数据写处理算法。\n\n\n### 参考：\n- [Cg Programming in Unity](http://en.wikibooks.org/wiki/Cg_Programming/Programmable_Graphics_Pipeline)\n- [Fixed-function](http://en.wikipedia.org/wiki/Fixed-function)\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","source":"_posts/Shader_2.md","raw":"title: 瞎聊 Unity Shader 系列之二：渲染管线\ndate: 2015-04-28 11:07\ncategory: Shader\ntags: Shader\n---\n\n这节描述的是图形渲染的大致过程。\n\n为了更好理解和记忆这节内容，先来学下面几个词。\n\n- **渲染管线(Rendering Pipeline)：** 一提到管线，感觉很高大上的样子。说的俗一点就是可以理解为流水线。渲染管线我们可暂时理解为 **从得到模型数据到绘制出图像** 这一过程的称呼。\n- **Vertex Shader：** 对顶点数据编程的一段程序。 人类有懒惰的天性，习惯用简化的词汇来表达同一个东西。对 Vertex Shader 也不例外，一般称其为 VS ，但是在本系列文章中会保持全称。\n- **Fragment Shader：** 对像素数据编程的一段程序。这里 fragment 可以理解为带有信息（颜色，坐标等）的像素 (Pixel), 一般也简称其为 FS 或者 PS 。 在本系列文章中会保持其全称。\n- **FrameBuffer：** 缓存帧数据的存储区，它一般包含的是要显示到显示设备上的位图数据（也就是图片数据）。\n- **Fixed Function：** 由于一些硬件支持等历史原因，早期的图形 API  **只支持对 GPU 做配置**，这部分只可配置的功能就是 fixed fucntion。\n这里注意下，fixed function 的功能只能配置，不像 Vertex Shader　和 fragment Shader 可以编程（写自己的算法）。\n\n\n### 渲染管线 (Rendering Pipeline)\n\n看图说话\n\n![2.renderingpipeline.jpg](/images/Shader/2/rendering-pipeline.jpg)\n\n上面是可编程的渲染管线模型的示意。下面多说几点：\n\n - 输入阶段。Unity 使用 Mesh Renderer 等组件读取模型顶点数据，然后调用图形 API，将数据传递给 GPU。\n - 现实中同时会进行多条渲染管线，他们是**并行的**。 这点概念比较重要，以后还会提到它。我们记住 GPU 并行能力很强。\n - 最后输出的 FrameBuffer (可以理解为渲染出来的图片) 有几率被抛弃掉，也就是说不显示在显示设备上。这个以后单独说明原因。好比残酷的现实世界，努力了（整个渲染过程）也不一定会成功（被显示出来）。\n\n<!--more-->\n\n### 总结\n渲染管道是从得模型数据到图像生成过程的一种描述。Vertex Shader 能对顶点数据写处理算法，而 Fragment Shader 能对像素数据写处理算法。\n\n\n### 参考：\n- [Cg Programming in Unity](http://en.wikibooks.org/wiki/Cg_Programming/Programmable_Graphics_Pipeline)\n- [Fixed-function](http://en.wikipedia.org/wiki/Fixed-function)\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","slug":"Shader_2","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkaw700272quop2fxsyft"},{"title":"瞎聊 Unity Shader 系列之十一：深度缓存","date":"2015-06-09T07:17:00.000Z","_content":"\n第二节 {% post_link Shader_2 [渲染管线] %} 中提到了 Frame Buffer, 这个是用来存储帧位图的数据存储区域。 这里在介绍另外一个缓存, 叫深度缓存 (Depth Buffer), 也叫作 Z-Buffer。从名字上来看这是一个\n存储深度（数据）的存储区。下面我们带着两个问题来解释这个深度缓存。\n\n> 1. 存储的深度数据是什么\n> 2. 有什么用处\n\n\n### 深度是什么\n\n第四节 {% post_link shader_4 [坐标系] %} 中提到，要描述一个物体的位置，需要借助参照物。我们这里扩展一下， 要 **用数值来表述一个物体的某种属性，要有这个数值参照的原点**。 既然深度值是数值，那它的\n参照原点是什么呢？ 答案是观察者的视角，换句话说就是 Camera。\n\n在 {% post_link Shader_2 [渲染管线] %} 这节中提到， Vertex Shader 之后有一个插值过程，生成像素。这个像素的 X 和 Y 坐标为屏幕坐标， Z 坐标轴数值就是深度，存储在深度缓存里面。  \n\n### 有什么用处\n\n首先让我们来思考一个问题\n\n> 假设有两个物体都经过渲染后的像素在屏幕坐标系中是同一个点，那哪个像素应该渲染？\n\n我想现在你应该会想到，当然是渲染里观察者更近的一个像素啦。这个一般来说是对的，但是也不全对。 因为远近是用深度数值来表示，但是渲染的逻辑在 Shaderlab 里面可以用 ZTest 设置，它的语法是\n\n{% codeblock %}\nZTest Less | Greater | LEqual | GEqual | Equal | NotEqual | Always\n{% endcodeblock %}\t\n\nZTest 默认的值是 LEqual, 也就是渲染在物体在这个深度值同位置或者之前的物体，不渲染之后的物体。\n\n<!--more-->\n\n你也许会想，那如果连个像素的深度值一样怎么办？ 深度值一样的情况也叫做 **深度冲突** (Z-fighting)。解决方法是给其中某一个物体设置偏移量。 Shaderlab 中语法是:\n\n{% codeblock %}\nOffset Factor, Units\n{% endcodeblock%}\n\nOffset 根据一个插值公式来计算出新的深度值。有兴趣的可以 [参考这里](https://msdn.microsoft.com/en-us/library/windows/desktop/dd373973%28v=vs.85%29.aspx)\n\n我们也可以打开和关闭深度写入功能，在 Shaderlab 中用 ZWrite 来控制，它的语法是:\n\n{% codeblock %}\nZWrite On | Off\n{% endcodeblock %}\n\n### 在 Unity 图像渲染中顺序中的位置\n\n![PipelineCullDepth](/images/Shader/11/PipelineCullDepth.png)\n\n图片来自 Unity 官方手册 <http://docs.unity3d.com/Manual/SL-CullAndDepth.html>\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","source":"_posts/Shader_11.md","raw":"title: 瞎聊 Unity Shader 系列之十一：深度缓存\ndate: 2015-06-09 15:17\ncategory: Shader\ntags: Shader\n---\n\n第二节 {% post_link Shader_2 [渲染管线] %} 中提到了 Frame Buffer, 这个是用来存储帧位图的数据存储区域。 这里在介绍另外一个缓存, 叫深度缓存 (Depth Buffer), 也叫作 Z-Buffer。从名字上来看这是一个\n存储深度（数据）的存储区。下面我们带着两个问题来解释这个深度缓存。\n\n> 1. 存储的深度数据是什么\n> 2. 有什么用处\n\n\n### 深度是什么\n\n第四节 {% post_link shader_4 [坐标系] %} 中提到，要描述一个物体的位置，需要借助参照物。我们这里扩展一下， 要 **用数值来表述一个物体的某种属性，要有这个数值参照的原点**。 既然深度值是数值，那它的\n参照原点是什么呢？ 答案是观察者的视角，换句话说就是 Camera。\n\n在 {% post_link Shader_2 [渲染管线] %} 这节中提到， Vertex Shader 之后有一个插值过程，生成像素。这个像素的 X 和 Y 坐标为屏幕坐标， Z 坐标轴数值就是深度，存储在深度缓存里面。  \n\n### 有什么用处\n\n首先让我们来思考一个问题\n\n> 假设有两个物体都经过渲染后的像素在屏幕坐标系中是同一个点，那哪个像素应该渲染？\n\n我想现在你应该会想到，当然是渲染里观察者更近的一个像素啦。这个一般来说是对的，但是也不全对。 因为远近是用深度数值来表示，但是渲染的逻辑在 Shaderlab 里面可以用 ZTest 设置，它的语法是\n\n{% codeblock %}\nZTest Less | Greater | LEqual | GEqual | Equal | NotEqual | Always\n{% endcodeblock %}\t\n\nZTest 默认的值是 LEqual, 也就是渲染在物体在这个深度值同位置或者之前的物体，不渲染之后的物体。\n\n<!--more-->\n\n你也许会想，那如果连个像素的深度值一样怎么办？ 深度值一样的情况也叫做 **深度冲突** (Z-fighting)。解决方法是给其中某一个物体设置偏移量。 Shaderlab 中语法是:\n\n{% codeblock %}\nOffset Factor, Units\n{% endcodeblock%}\n\nOffset 根据一个插值公式来计算出新的深度值。有兴趣的可以 [参考这里](https://msdn.microsoft.com/en-us/library/windows/desktop/dd373973%28v=vs.85%29.aspx)\n\n我们也可以打开和关闭深度写入功能，在 Shaderlab 中用 ZWrite 来控制，它的语法是:\n\n{% codeblock %}\nZWrite On | Off\n{% endcodeblock %}\n\n### 在 Unity 图像渲染中顺序中的位置\n\n![PipelineCullDepth](/images/Shader/11/PipelineCullDepth.png)\n\n图片来自 Unity 官方手册 <http://docs.unity3d.com/Manual/SL-CullAndDepth.html>\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","slug":"Shader_11","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkaw8002a2quoeqt2mvid"},{"title":"瞎聊 Unity Shader 系列之十：数据的标签：语义绑定","date":"2015-05-14T07:53:00.000Z","_content":"\n这节内容跟 {% post_link Shader_2 [渲染管线] %} 内容关系比较紧密，建议先了解渲染管线的整个流程。\n\n我们知道渲染管线整个流水线都有数据的输入输出，这样就存在几个问题：\n\n1. 这些数据都是什么？\n2. 这些数据输入或输出到哪里？\n3. Shader 里面怎么体现？\n\n这节内容主要是讲上面三个问题\n\n### 数据的种类\n\n一般情况能利用的有如下几种：\n\n- 坐标系中的位置 (position)\n- 法线 (normal)\n- 切线 (tanent)\n- 颜色 (color)\n- 纹理坐标 (texture coordinate)\n\n### 数据的输入输出\n\n数据存放在寄存器里面。输入的时候从寄存器读取数据，输出的时候将数据写到寄存器里面。\n\n### Shader 中的体现\n\n首先是数据的种类的表示。现实生活中，我们也喜欢物品分类，然后对分类取个名字或贴个标签，以后我们便可以从这一类中存取属于这类的物品。Shader 里面也有类似的做法，给 Shader 函数输入输出的数据结构打上标签。\n这种标签叫做 **语义（Semantic）**， 打标签的行为叫做 **语义绑定** 。一般用一个冒号后面带上标签的名字来表示。长相大概是这个要样子 `:XXXXX` （XXXXX 表示语义）。\n\n我们有了标签，那我们把它放在 shader 代码什么地方呢？ 之前提到我们是给函数输入输出的数据结构打上标签，而函数的输入就是参数。对于参数，我们可以使用**结构体**也可以直接使用**基础数据类型**，所以能出现如下两种位置：\n\n<!--more-->\n\n使用基础数据类型做参数时，大概是这个样子：  \n\n>  void shaderFunction(dataType variableName :XXXXX)\n\n使用结构体声明中时（这个结构体要当作 shader 函数的参数）大概是这个样子:\n\n> struct StructName {  \n>     datatype propertyName :XXXXX  \n> }  \n\n另外一种是函数的输出，如果直接给返回值后面带上标签，代码会长成这个样子：\n\n> dataType :XXXXX shaderFunction()  \n> {  \n>    .....  \n> }  \n\n但是 CG 等语言**没有像上面那么做**（个人觉得上面的方式会容易让人误解为标签就是返回值类型，其实不是），而是将标签移到函数的括号后面，所以最后应该只长成这个样子：\n\n> dataType shaderFunction() : XXXXX  \n> {  \n>   ......  \n> }  \n\n好了，就上面3个位置。 那语义（上面的 `XXXXX`）都有哪些呢？ 一般有如下几种：\n\n- **POSITION：** 表示顶点在物体坐标内的位置\n- **SV_POSITION：** 表示被转换到投射空间后的坐标位置 (通过 UNITY_MATRIX_MVP 这个矩阵可以转换)，可以参照 {% post_link Shader_4 [坐标系] %} 这一节内容。\n- **COLOR：** 表示颜色\n- **NORMAL：** 表示法线\n- **TANGENT：** 表示切线\n- **TEXCOORD0** 和 **TEXCOORD1 :** 纹理坐标 UV0 和 UV1。UV 换个说法就是 XY 坐标，只不过是为了怕重名导致的混淆，所以叫做UV。 U 表示横坐标， V表示纵坐标。\n\n现在我们知道通过标签来表示数据的分类, 那怎么表示输入和输出呢？答案是用关键词 in, out, inout。 光从名字上来看我们就知道 in 表示输入， out 表示输出， inout 表示输入输出。\n参数如果特别表明，默认为输入。可以参考下在 Unity 编辑器里面的创建的默认 shader， 里面就有这几个关键词的用法。\n\n最后要说明一点，上面所说的在 Shaderlab 中都应该包括在 `CGPROGRAM ... ENDCG` 语句块里面，因为这个是 CG 等语言的内容。\n\n### 举个例子\n\n现在举个代码的例子来说明（如果对下面代码结构等不是很明白，强烈建议从头开始看本系列的文章）：\n\n{% codeblock 语义定义示例代码 %}\nShader \"Custom/Shader10\" {\n    SubShader {\n        Tags { \"RenderType\"=\"Opaque\" }\n\n        pass {\n\n            CGPROGRAM\n\n            #pragma vertex vert\n            #pragma fragment frag\n\n            // 结构体中使用语义绑定\n            struct VertexOutput {\n                float4 pos :SV_POSITION;\t   \t// 转换到投射空间后位置\n                float4 texcoord :TEXCOORD0;\t\t// 顶点颜色\n            };\n\n\n            VertexOutput vert(in float4 pos :POSITION /*参数中使用语义绑定*/)\n            {\n                VertexOutput output;\n                output.pos = mul(UNITY_MATRIX_MVP, pos);\n                output.texcoord = pos + float4(0.5, 0.5, 0.5, 0);\n                return output;\n                }\n\n            float4 frag(VertexOutput input) :COLOR // 函数后面使用语义绑定\n            {\n                return input.texcoord;\n            }\n\n            ENDCG\n        }\n\n    }\n}\n{% endcodeblock %}\n\n上面的 shader 如果用在立方体上渲染出漂亮的 RGB 立方体，如下图：\n\n![rgb cube](/images/Shader/10/rgb.png)\n\n### 总结\n\n用语义和语义绑定来表示数据和数据的流向。\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","source":"_posts/Shader_10.md","raw":"title: 瞎聊 Unity Shader 系列之十：数据的标签：语义绑定\ndate: 2015-05-14 15:53\ncategory: Shader\ntags: Shader\n---\n\n这节内容跟 {% post_link Shader_2 [渲染管线] %} 内容关系比较紧密，建议先了解渲染管线的整个流程。\n\n我们知道渲染管线整个流水线都有数据的输入输出，这样就存在几个问题：\n\n1. 这些数据都是什么？\n2. 这些数据输入或输出到哪里？\n3. Shader 里面怎么体现？\n\n这节内容主要是讲上面三个问题\n\n### 数据的种类\n\n一般情况能利用的有如下几种：\n\n- 坐标系中的位置 (position)\n- 法线 (normal)\n- 切线 (tanent)\n- 颜色 (color)\n- 纹理坐标 (texture coordinate)\n\n### 数据的输入输出\n\n数据存放在寄存器里面。输入的时候从寄存器读取数据，输出的时候将数据写到寄存器里面。\n\n### Shader 中的体现\n\n首先是数据的种类的表示。现实生活中，我们也喜欢物品分类，然后对分类取个名字或贴个标签，以后我们便可以从这一类中存取属于这类的物品。Shader 里面也有类似的做法，给 Shader 函数输入输出的数据结构打上标签。\n这种标签叫做 **语义（Semantic）**， 打标签的行为叫做 **语义绑定** 。一般用一个冒号后面带上标签的名字来表示。长相大概是这个要样子 `:XXXXX` （XXXXX 表示语义）。\n\n我们有了标签，那我们把它放在 shader 代码什么地方呢？ 之前提到我们是给函数输入输出的数据结构打上标签，而函数的输入就是参数。对于参数，我们可以使用**结构体**也可以直接使用**基础数据类型**，所以能出现如下两种位置：\n\n<!--more-->\n\n使用基础数据类型做参数时，大概是这个样子：  \n\n>  void shaderFunction(dataType variableName :XXXXX)\n\n使用结构体声明中时（这个结构体要当作 shader 函数的参数）大概是这个样子:\n\n> struct StructName {  \n>     datatype propertyName :XXXXX  \n> }  \n\n另外一种是函数的输出，如果直接给返回值后面带上标签，代码会长成这个样子：\n\n> dataType :XXXXX shaderFunction()  \n> {  \n>    .....  \n> }  \n\n但是 CG 等语言**没有像上面那么做**（个人觉得上面的方式会容易让人误解为标签就是返回值类型，其实不是），而是将标签移到函数的括号后面，所以最后应该只长成这个样子：\n\n> dataType shaderFunction() : XXXXX  \n> {  \n>   ......  \n> }  \n\n好了，就上面3个位置。 那语义（上面的 `XXXXX`）都有哪些呢？ 一般有如下几种：\n\n- **POSITION：** 表示顶点在物体坐标内的位置\n- **SV_POSITION：** 表示被转换到投射空间后的坐标位置 (通过 UNITY_MATRIX_MVP 这个矩阵可以转换)，可以参照 {% post_link Shader_4 [坐标系] %} 这一节内容。\n- **COLOR：** 表示颜色\n- **NORMAL：** 表示法线\n- **TANGENT：** 表示切线\n- **TEXCOORD0** 和 **TEXCOORD1 :** 纹理坐标 UV0 和 UV1。UV 换个说法就是 XY 坐标，只不过是为了怕重名导致的混淆，所以叫做UV。 U 表示横坐标， V表示纵坐标。\n\n现在我们知道通过标签来表示数据的分类, 那怎么表示输入和输出呢？答案是用关键词 in, out, inout。 光从名字上来看我们就知道 in 表示输入， out 表示输出， inout 表示输入输出。\n参数如果特别表明，默认为输入。可以参考下在 Unity 编辑器里面的创建的默认 shader， 里面就有这几个关键词的用法。\n\n最后要说明一点，上面所说的在 Shaderlab 中都应该包括在 `CGPROGRAM ... ENDCG` 语句块里面，因为这个是 CG 等语言的内容。\n\n### 举个例子\n\n现在举个代码的例子来说明（如果对下面代码结构等不是很明白，强烈建议从头开始看本系列的文章）：\n\n{% codeblock 语义定义示例代码 %}\nShader \"Custom/Shader10\" {\n    SubShader {\n        Tags { \"RenderType\"=\"Opaque\" }\n\n        pass {\n\n            CGPROGRAM\n\n            #pragma vertex vert\n            #pragma fragment frag\n\n            // 结构体中使用语义绑定\n            struct VertexOutput {\n                float4 pos :SV_POSITION;\t   \t// 转换到投射空间后位置\n                float4 texcoord :TEXCOORD0;\t\t// 顶点颜色\n            };\n\n\n            VertexOutput vert(in float4 pos :POSITION /*参数中使用语义绑定*/)\n            {\n                VertexOutput output;\n                output.pos = mul(UNITY_MATRIX_MVP, pos);\n                output.texcoord = pos + float4(0.5, 0.5, 0.5, 0);\n                return output;\n                }\n\n            float4 frag(VertexOutput input) :COLOR // 函数后面使用语义绑定\n            {\n                return input.texcoord;\n            }\n\n            ENDCG\n        }\n\n    }\n}\n{% endcodeblock %}\n\n上面的 shader 如果用在立方体上渲染出漂亮的 RGB 立方体，如下图：\n\n![rgb cube](/images/Shader/10/rgb.png)\n\n### 总结\n\n用语义和语义绑定来表示数据和数据的流向。\n\n<hr>\n鄙人才疏学浅，有出入的地方非常感谢能帮忙指正。:)","slug":"Shader_10","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkawa002d2quom8syy5qk"},{"title":"瞎聊 Unity Shader 系列之一：GPU 与 Shader Model","date":"2015-04-26T08:50:00.000Z","modified":"2015-04-27 15:54","_content":"\n我想首先唠叨下我为什么打算写这一系列的文章及文章的定位。\n\n我写的动力主要来源于如下原因：\n\n- 对之前学习的一些总结、复习和提炼\n- 尽可能的填充一些概念上的空白。 有不少关于 Unity shader 的文章只讲 Shaderlab 语法，讲各种光照模型等, 这对于缺乏概念的新手来说是不太好理解的。\n- 之前信誓旦旦的跟朋友说以后学了 shader 会写点文章出来，算是允诺。。。\n\n文章定位：\n\n- 这是学习笔记，不是教程。如果内容会有出入，非常感谢和希望您能指正。\n- 主要基础概念为主，可能很零散。\n\n之前有前辈说过，学习一门知识前，了解其由来对入门很有好处。我比较赞同这个观点，所以开篇我们来说写历史。\n\n### CPU 之外的另外一个 PU - GPU\n\n随着计算机处理图形的计算量越来越来大，CPU难以满足计算速度上的需求, 为了将图形的计算单独拿出来执行，上世纪70年代开始出现了为加速图形绘制的硬件。\n这些硬件跟大部分刚出来的新事物一样，功能有限，而且不太完善，当然那个时候也不叫 GPU。\n\n1999 年，NVIDIA 公司发布了 GeForce256, 并且提出一个 Graphics Process Unit (GPU) 概念。很多文章都提到这款显卡有划时代的意义，因为它使第一款\n带有可编程顶点处理能力的显卡，这意味着显卡从**之前的只可配置**上升到了**可编程**的高度，开发者从此可以实现自己顶点处理算法。NVIDIA 也是提出 GPU 这个词\n来对 GeForece256 与之前显卡做区分。\n\n2000 年以后， GPU 技术一直在不断的发展，处理和运算能力不断打变强变大。为了利用 GPU 强大的并行计算能力，出现了 CUDA 并行计算平台。有兴趣的同学可以关注下\n[CUDA官网](https://developer.nvidia.com/cuda-zone).\n\n<!--more-->\n\n### Shader Model\n\n首先我们要提下当今跟 GPU 打交道的形API：[Microsoft DirectX](http://en.wikipedia.org/wiki/DirectX)、 [OPENGL](https://www.opengl.org) 和\n 转为嵌入式设备设计的[OPENGL GS](https://www.khronos.org/opengles/)。Directx 是微软提供的图形 API, OPENGL 和 OPENGL ES 现在是由 [Khronos Group](http://baike.baidu.com/link?url=vW0PfmVKQC00WWRibyVSrnjRYVdVj1lk9HG6B4w9uc9lnlnWnYoDJd1puZu1CNf2_vacBBTFFbdMzZWCNkliSK) 团队维护开发的图形API。\n\n这些图形 API 都提供对 GPU 编程的能力，这能力就是我们说的 Shader。图形 API 的更新会提供不同的 shader 的能力 (当然是越来越强大)。\n微软提出了一个词叫 Shader Model, 并用不同的版本号来区分 Shader 的能力。通常我们也会称 Shader Model 为 SM。\n\n下面列出到现在为止 Shader Model 的各个版本与 DirectX 版本的对应关系：\n\n- Shader Model 1.0（DirectX8.0）\n- Shader Model 2.0（DirectX9.0b）\n- Shader Model 3.0（DirectX9.0c）\n- Shader Model 4.0（DirectX10）\n- Shader Model 4.1（DirectX10.1）\n- Shader Model 5.0（DirectX11）\n\n我们先不关注各个版本区别，只要知道版本号越高，提供的功能越来越强大。\n\n\n### 总结  \nGPU 为大量图形计算而生，而 Shader 是对 GPU 编程的技术。微软用 Shader Model 的不同版本号来区分不同 Shader 的能力。\n\n\n### 参考  \n\n- [Wikipidia: Graphics processing unit ](http://en.wikipedia.org/wiki/Graphics_processing_unit)\n- [_Real-Time Rendering, Third Edition_](http://www.amazon.com/gp/product/1568814240?tag=realtimerenderin&pldnSite=1)\n- [Shader Model](http://baike.baidu.com/link?url=DDy0sTi56RE9TiVdj5MOCqwmV7ATJEkBHQp7V8eRzA_lyq1HPOLgmBULeSo-Khw2-mb7Wst75LJF3_I3SjZAZa)","source":"_posts/Shader_1.md","raw":"title: 瞎聊 Unity Shader 系列之一：GPU 与 Shader Model\ndate: 2015-04-26 16:50\nmodified: 2015-04-27 15:54\ncategory: Shader\ntags: Shader\n---\n\n我想首先唠叨下我为什么打算写这一系列的文章及文章的定位。\n\n我写的动力主要来源于如下原因：\n\n- 对之前学习的一些总结、复习和提炼\n- 尽可能的填充一些概念上的空白。 有不少关于 Unity shader 的文章只讲 Shaderlab 语法，讲各种光照模型等, 这对于缺乏概念的新手来说是不太好理解的。\n- 之前信誓旦旦的跟朋友说以后学了 shader 会写点文章出来，算是允诺。。。\n\n文章定位：\n\n- 这是学习笔记，不是教程。如果内容会有出入，非常感谢和希望您能指正。\n- 主要基础概念为主，可能很零散。\n\n之前有前辈说过，学习一门知识前，了解其由来对入门很有好处。我比较赞同这个观点，所以开篇我们来说写历史。\n\n### CPU 之外的另外一个 PU - GPU\n\n随着计算机处理图形的计算量越来越来大，CPU难以满足计算速度上的需求, 为了将图形的计算单独拿出来执行，上世纪70年代开始出现了为加速图形绘制的硬件。\n这些硬件跟大部分刚出来的新事物一样，功能有限，而且不太完善，当然那个时候也不叫 GPU。\n\n1999 年，NVIDIA 公司发布了 GeForce256, 并且提出一个 Graphics Process Unit (GPU) 概念。很多文章都提到这款显卡有划时代的意义，因为它使第一款\n带有可编程顶点处理能力的显卡，这意味着显卡从**之前的只可配置**上升到了**可编程**的高度，开发者从此可以实现自己顶点处理算法。NVIDIA 也是提出 GPU 这个词\n来对 GeForece256 与之前显卡做区分。\n\n2000 年以后， GPU 技术一直在不断的发展，处理和运算能力不断打变强变大。为了利用 GPU 强大的并行计算能力，出现了 CUDA 并行计算平台。有兴趣的同学可以关注下\n[CUDA官网](https://developer.nvidia.com/cuda-zone).\n\n<!--more-->\n\n### Shader Model\n\n首先我们要提下当今跟 GPU 打交道的形API：[Microsoft DirectX](http://en.wikipedia.org/wiki/DirectX)、 [OPENGL](https://www.opengl.org) 和\n 转为嵌入式设备设计的[OPENGL GS](https://www.khronos.org/opengles/)。Directx 是微软提供的图形 API, OPENGL 和 OPENGL ES 现在是由 [Khronos Group](http://baike.baidu.com/link?url=vW0PfmVKQC00WWRibyVSrnjRYVdVj1lk9HG6B4w9uc9lnlnWnYoDJd1puZu1CNf2_vacBBTFFbdMzZWCNkliSK) 团队维护开发的图形API。\n\n这些图形 API 都提供对 GPU 编程的能力，这能力就是我们说的 Shader。图形 API 的更新会提供不同的 shader 的能力 (当然是越来越强大)。\n微软提出了一个词叫 Shader Model, 并用不同的版本号来区分 Shader 的能力。通常我们也会称 Shader Model 为 SM。\n\n下面列出到现在为止 Shader Model 的各个版本与 DirectX 版本的对应关系：\n\n- Shader Model 1.0（DirectX8.0）\n- Shader Model 2.0（DirectX9.0b）\n- Shader Model 3.0（DirectX9.0c）\n- Shader Model 4.0（DirectX10）\n- Shader Model 4.1（DirectX10.1）\n- Shader Model 5.0（DirectX11）\n\n我们先不关注各个版本区别，只要知道版本号越高，提供的功能越来越强大。\n\n\n### 总结  \nGPU 为大量图形计算而生，而 Shader 是对 GPU 编程的技术。微软用 Shader Model 的不同版本号来区分不同 Shader 的能力。\n\n\n### 参考  \n\n- [Wikipidia: Graphics processing unit ](http://en.wikipedia.org/wiki/Graphics_processing_unit)\n- [_Real-Time Rendering, Third Edition_](http://www.amazon.com/gp/product/1568814240?tag=realtimerenderin&pldnSite=1)\n- [Shader Model](http://baike.baidu.com/link?url=DDy0sTi56RE9TiVdj5MOCqwmV7ATJEkBHQp7V8eRzA_lyq1HPOLgmBULeSo-Khw2-mb7Wst75LJF3_I3SjZAZa)","slug":"Shader_1","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkawc002g2quonjsgmvmx"},{"title":"ShaderlabVS Release Page","date":"2014-10-28T13:20:00.000Z","_content":"\n\n### _Latest Version - V0.6.1_  \n<hr>\n**[2016-2-16] V0.6.1 release note:**\n\n* Fixed .net framework cannot found issue\n\n**IMPROTANT :** We have to execute `vs2015_register.cmd` after extension installed to linke .shader and .cginc files to ShaderlabVS plugin on VS2015. It's not required on VS2013 / VS2012.\n\n> **VS2015:** <http://pan.baidu.com/s/1pK5GIU3>  \n> **VS2012 / VS2013:** <http://pan.baidu.com/s/1pK5GIU3>\n\n<hr>\nA introduction of ShaderlabVS can be found at [here](https://github.com/wudixiaop/ShaderlabVS/blob/master/README.md). **If you have feedbacks or questions, reivew the {% post_link ShaderlabVSFAQ [FAQ page]  %}\nor send email to me. My email is rockylai@shuiguzi.com.**  \n\n\n### _Screenshot_  \n![preview](https://github.com/wudixiaop/ShaderlabVS/raw/master/img/Highlighting.PNG)\n\n<!--more-->\n\n### _History:_\n\n**[2015-10-17] V0.6 release note:**\n\n* Add VS2015 support\n* Improve code completion feature\n\n**[2014-10-28] V0.5 release note:**\n\n* Add braces matching\n* Add outlining\n\n> **Download:**\n>\n> * [Github](https://github.com/wudixiaop/ShaderlabVS/releases/download/0.5/ShaderlabVS-0.5.zip)\n> * [BaiduPan](http://pan.baidu.com/s/1qW9aR5E)\n\n**[2014-10-19] V0.4 release note:**\n\n* Add support for .cginc and .glslinc file\n* Add more keywords support\n* Syntax highlighting is case insensitive now\n\n> **Download:**\n>\n> * [Github Relase Page](https://github.com/wudixiaop/ShaderlabVS/releases/download/0.4/ShaderlabVS.zip)\n> * [BaiduPan](http://pan.baidu.com/s/1o6sPOUI)\n\n\n\n**V0.3 release note:**\n\n* Support Signature help feature\n\n> **Download:**\n>\n> * [Github Release page](https://github.com/wudixiaop/ShaderlabVS/releases/download/0.3/ShaderlabVS-0.3.zip)\n> * [BaiduPan](http://pan.baidu.com/s/1eQEJQHO)\n","source":"_posts/Release.md","raw":"title: ShaderlabVS Release Page\ndate: 2014-10-28 21:20\ncategory: Shader\ntags: Shader\n---\n\n\n### _Latest Version - V0.6.1_  \n<hr>\n**[2016-2-16] V0.6.1 release note:**\n\n* Fixed .net framework cannot found issue\n\n**IMPROTANT :** We have to execute `vs2015_register.cmd` after extension installed to linke .shader and .cginc files to ShaderlabVS plugin on VS2015. It's not required on VS2013 / VS2012.\n\n> **VS2015:** <http://pan.baidu.com/s/1pK5GIU3>  \n> **VS2012 / VS2013:** <http://pan.baidu.com/s/1pK5GIU3>\n\n<hr>\nA introduction of ShaderlabVS can be found at [here](https://github.com/wudixiaop/ShaderlabVS/blob/master/README.md). **If you have feedbacks or questions, reivew the {% post_link ShaderlabVSFAQ [FAQ page]  %}\nor send email to me. My email is rockylai@shuiguzi.com.**  \n\n\n### _Screenshot_  \n![preview](https://github.com/wudixiaop/ShaderlabVS/raw/master/img/Highlighting.PNG)\n\n<!--more-->\n\n### _History:_\n\n**[2015-10-17] V0.6 release note:**\n\n* Add VS2015 support\n* Improve code completion feature\n\n**[2014-10-28] V0.5 release note:**\n\n* Add braces matching\n* Add outlining\n\n> **Download:**\n>\n> * [Github](https://github.com/wudixiaop/ShaderlabVS/releases/download/0.5/ShaderlabVS-0.5.zip)\n> * [BaiduPan](http://pan.baidu.com/s/1qW9aR5E)\n\n**[2014-10-19] V0.4 release note:**\n\n* Add support for .cginc and .glslinc file\n* Add more keywords support\n* Syntax highlighting is case insensitive now\n\n> **Download:**\n>\n> * [Github Relase Page](https://github.com/wudixiaop/ShaderlabVS/releases/download/0.4/ShaderlabVS.zip)\n> * [BaiduPan](http://pan.baidu.com/s/1o6sPOUI)\n\n\n\n**V0.3 release note:**\n\n* Support Signature help feature\n\n> **Download:**\n>\n> * [Github Release page](https://github.com/wudixiaop/ShaderlabVS/releases/download/0.3/ShaderlabVS-0.3.zip)\n> * [BaiduPan](http://pan.baidu.com/s/1eQEJQHO)\n","slug":"Release","published":1,"updated":"2016-02-16T13:12:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkawf002j2quoxdk0bdlf"},{"title":"一起看看MonoBehavior内部事件执行顺序","date":"2014-11-10T13:38:00.000Z","_content":"\n### 写在最前面\n或许对于大部分Unity3D程序员来说，第一次接触脚本编写的时候都是从MonoBehavior开始的。MonoBehavior是Uniy3d脚本编写核心的类之一， 它预先定义好了很多事件，并且这些事件按照预先定义好顺序执行。了解MonoBehavior提供的这些事件的执行顺序，是我们进一步提高脚步编程和了解Unity3D内部逻辑的必要一步。我们先从MonoBehavior提供的事件说起。\n\n### MonoBehavior都提供了什么事件\nMonoBehavior提供的事件从编辑器到游戏结束都有涉及。下面列举一些常用的，更详列表可以参照 [这个页面](http://docs.unity3d.com/ScriptReference/MonoBehaviour.html)。\n\n#### 与编辑相关\n\n| 名称 | 注释 |\n|:-----|:---|\n|Reset| Reset to default values. |\n\n<!--more-->\n\n#### Update相关\n\n| 名称 | 注释 |\n|:----|:----|\n|FixedUpdate|This function is called every fixed framerate frame, if the MonoBehaviour is enabled.|\n|Update|Update is called every frame, if the MonoBehaviour is enabled.|\n|LateUpdate|LateUpdate is called every frame, if the Behaviour is enabled.|\n\n#### 生命周期相关\n  \n| 名称 | 注释 |\n|:----|:----|\n|Awake|Awake is called when the script instance is being loaded.|\n|OnEnable|This function is called when the object becomes enabled and active.|\n|OnDisable|This function is called when the behaviour becomes disabled () or inactive.|\n|OnDestroy|This function is called when the MonoBehaviour will be destroyed.|\n|OnApplicationFocus|Sent to all game objects when the player gets or loses focus.|\n|OnApplicationPause|Sent to all game objects when the player pauses.|\n|OnApplicationQuit|Sent to all game objects before the application is quit.|\n|Start|Start is called on the frame when a script is enabled just before any of the Update methods is called the first time.|\n\n#### 物理系统相关\n\n| 名称 | 注释 |\n|:----|:----|\n|OnCollisionEnter|OnCollisionEnter is called when this collider/rigidbody has begun touching another rigidbody/collider.|\n|OnCollisionStay|OnCollisionStay is called once per frame for every collider/rigidbody that is touching rigidbody/collider.|\n|OnCollisionExit|OnCollisionExit is called when this collider/rigidbody has stopped touching another rigidbody/collider.|\n|OnCollisionEnter2D|Sent when an incoming collider makes contact with this object's collider (2D physics only).\n|OnCollisionStay2D|Sent each frame where a collider on another object is touching this object's collider (2D physics only).|\n|OnCollisionExit2D|Sent when a collider on another object stops touching this object's collider (2D physics only).|\n|OnTriggerEnter|OnTriggerEnter is called when the Collider other enters the trigger.|\n|OnTriggerStay|OnTriggerStay is called once per frame for every Collider other that is touching the trigger.|\n|OnTriggerExit|OnTriggerExit is called when the Collider other has stopped touching the trigger.|\n|OnTriggerEnter2DSent when another object enters a trigger collider attached to this object (2D physics only).|\n|OnTriggerStay2D|Sent each frame where another object is within a trigger collider attached to this object (2D physics only).|\n|OnTriggerExit2D|Sent when another object leaves a trigger collider attached to this object (2D physics only).|\n\n#### 输入系统相关\n\n| 名称 | 注释 |\n|:----|:----|\n|OnMouseDown|OnMouseDown is called when the user has pressed the mouse button while over the GUIElement or Collider.|\n|OnMouseOver|OnMouseOver is called every frame while the mouse is over the GUIElement or Collider.|\n|OnMouseUp|OnMouseUp is called when the user has released the mouse button.|\n|OnMouseDrag|OnMouseDrag is called when the user has clicked on a GUIElement or Collider and is still holding down the mouse.|\n|OnMouseEnter|OnMouseEnter is called when the mouse entered the GUIElement or Collider.|\n|OnMouseExit|OnMouseExit is called when the mouse is not any longer over the GUIElement or Collider.|\n|OnMouseUpAsButton|OnMouseUpAsButton is only called when the mouse is released over the same GUIElement or Collider as it was pressed.|\n\n#### 渲染相关\n\n| 名称 | 注释 |\n|:----|:-----|\n|OnPreCull|OnPreCull is called before a camera culls the scene.|\n|OnBecameVisible|OnBecameVisible is called when the renderer became visible by any camera.|\n|OnBecameInvisible|OnBecameInvisible is called when the renderer is no longer visible by any camera.|\n|OnWillRenderObject|OnWillRenderObject is called once for each camera if the object is visible.|\n|OnPreRender|OnPreRender is called before a camera starts rendering the scene.|\n|OnRenderObject|OnRenderObject is called after camera has rendered the scene.|\n|OnPostRender|OnPostRender is called after a camera finished rendering the scene.|\n|OnRenderImage|OnRenderImage is called after all rendering is complete to render image.|\n|OnGUI|OnGUI is called for rendering and handling GUI events.|\n|OnDrawGizmos|Implement OnDrawGizmos if you want to draw gizmos that are also pickable and always drawn.|\n\n### 用图来表示MonoBehavior事件执行顺序\n\n![monobehavior](/images/monobehaviour_flowchart.svg)\n\n### 总结:\n* 首次加载场景时执行**Awake()**\n* **Start()**只在第一帧才执行, **Start()**在**Awake()**之后执行\n* Update的执行顺序是: **FixedUpdate()** -> **Update()** -> **LateUpdate()**\n* 以每一帧的**Update()**事件作分界线：  \n    * **Update()之前**：**物理系统**和**输入系统**相关事件先执行，如**OnTriggerXXX**和**OnMouseXXX**事件。此处**XXX**是占位符，如**OnTriggerXXX**可以代表**OnTriggerEnter**或者**OnTriggerExit**\n    * **Update()之后**：**场景渲染**和**协程**，如**OnRenderImage()**和**yield WWW**语句\n* 协程中，除了**WaitForFixedUpdate**是在**FixedUpdate**之后，**Update**之前执行，其他的都是在**Update**之后，**场景渲染**前执行\n* GUI事件**OnGUI**在场景渲染完之后执行\n* 当对象被销毁时执行**OnDestory()**事件\n* 当游戏退出时执行**OnApplicationQuit()**\n* **OnEnable()**和**OnDisable()**  \n    * **OnEnable()**只有在Object是Active的状态下才能用，一般是Object被初始化或者Object从disable到active过程中被调用\n    * **OnDisable()**只有到Object从active到disable状态才被调用\n","source":"_posts/MonoBehavior event functions.md","raw":"title: 一起看看MonoBehavior内部事件执行顺序\ndate: 2014-11-10 21:38\ncategory: Unity\ntags: Unity\n---\n\n### 写在最前面\n或许对于大部分Unity3D程序员来说，第一次接触脚本编写的时候都是从MonoBehavior开始的。MonoBehavior是Uniy3d脚本编写核心的类之一， 它预先定义好了很多事件，并且这些事件按照预先定义好顺序执行。了解MonoBehavior提供的这些事件的执行顺序，是我们进一步提高脚步编程和了解Unity3D内部逻辑的必要一步。我们先从MonoBehavior提供的事件说起。\n\n### MonoBehavior都提供了什么事件\nMonoBehavior提供的事件从编辑器到游戏结束都有涉及。下面列举一些常用的，更详列表可以参照 [这个页面](http://docs.unity3d.com/ScriptReference/MonoBehaviour.html)。\n\n#### 与编辑相关\n\n| 名称 | 注释 |\n|:-----|:---|\n|Reset| Reset to default values. |\n\n<!--more-->\n\n#### Update相关\n\n| 名称 | 注释 |\n|:----|:----|\n|FixedUpdate|This function is called every fixed framerate frame, if the MonoBehaviour is enabled.|\n|Update|Update is called every frame, if the MonoBehaviour is enabled.|\n|LateUpdate|LateUpdate is called every frame, if the Behaviour is enabled.|\n\n#### 生命周期相关\n  \n| 名称 | 注释 |\n|:----|:----|\n|Awake|Awake is called when the script instance is being loaded.|\n|OnEnable|This function is called when the object becomes enabled and active.|\n|OnDisable|This function is called when the behaviour becomes disabled () or inactive.|\n|OnDestroy|This function is called when the MonoBehaviour will be destroyed.|\n|OnApplicationFocus|Sent to all game objects when the player gets or loses focus.|\n|OnApplicationPause|Sent to all game objects when the player pauses.|\n|OnApplicationQuit|Sent to all game objects before the application is quit.|\n|Start|Start is called on the frame when a script is enabled just before any of the Update methods is called the first time.|\n\n#### 物理系统相关\n\n| 名称 | 注释 |\n|:----|:----|\n|OnCollisionEnter|OnCollisionEnter is called when this collider/rigidbody has begun touching another rigidbody/collider.|\n|OnCollisionStay|OnCollisionStay is called once per frame for every collider/rigidbody that is touching rigidbody/collider.|\n|OnCollisionExit|OnCollisionExit is called when this collider/rigidbody has stopped touching another rigidbody/collider.|\n|OnCollisionEnter2D|Sent when an incoming collider makes contact with this object's collider (2D physics only).\n|OnCollisionStay2D|Sent each frame where a collider on another object is touching this object's collider (2D physics only).|\n|OnCollisionExit2D|Sent when a collider on another object stops touching this object's collider (2D physics only).|\n|OnTriggerEnter|OnTriggerEnter is called when the Collider other enters the trigger.|\n|OnTriggerStay|OnTriggerStay is called once per frame for every Collider other that is touching the trigger.|\n|OnTriggerExit|OnTriggerExit is called when the Collider other has stopped touching the trigger.|\n|OnTriggerEnter2DSent when another object enters a trigger collider attached to this object (2D physics only).|\n|OnTriggerStay2D|Sent each frame where another object is within a trigger collider attached to this object (2D physics only).|\n|OnTriggerExit2D|Sent when another object leaves a trigger collider attached to this object (2D physics only).|\n\n#### 输入系统相关\n\n| 名称 | 注释 |\n|:----|:----|\n|OnMouseDown|OnMouseDown is called when the user has pressed the mouse button while over the GUIElement or Collider.|\n|OnMouseOver|OnMouseOver is called every frame while the mouse is over the GUIElement or Collider.|\n|OnMouseUp|OnMouseUp is called when the user has released the mouse button.|\n|OnMouseDrag|OnMouseDrag is called when the user has clicked on a GUIElement or Collider and is still holding down the mouse.|\n|OnMouseEnter|OnMouseEnter is called when the mouse entered the GUIElement or Collider.|\n|OnMouseExit|OnMouseExit is called when the mouse is not any longer over the GUIElement or Collider.|\n|OnMouseUpAsButton|OnMouseUpAsButton is only called when the mouse is released over the same GUIElement or Collider as it was pressed.|\n\n#### 渲染相关\n\n| 名称 | 注释 |\n|:----|:-----|\n|OnPreCull|OnPreCull is called before a camera culls the scene.|\n|OnBecameVisible|OnBecameVisible is called when the renderer became visible by any camera.|\n|OnBecameInvisible|OnBecameInvisible is called when the renderer is no longer visible by any camera.|\n|OnWillRenderObject|OnWillRenderObject is called once for each camera if the object is visible.|\n|OnPreRender|OnPreRender is called before a camera starts rendering the scene.|\n|OnRenderObject|OnRenderObject is called after camera has rendered the scene.|\n|OnPostRender|OnPostRender is called after a camera finished rendering the scene.|\n|OnRenderImage|OnRenderImage is called after all rendering is complete to render image.|\n|OnGUI|OnGUI is called for rendering and handling GUI events.|\n|OnDrawGizmos|Implement OnDrawGizmos if you want to draw gizmos that are also pickable and always drawn.|\n\n### 用图来表示MonoBehavior事件执行顺序\n\n![monobehavior](/images/monobehaviour_flowchart.svg)\n\n### 总结:\n* 首次加载场景时执行**Awake()**\n* **Start()**只在第一帧才执行, **Start()**在**Awake()**之后执行\n* Update的执行顺序是: **FixedUpdate()** -> **Update()** -> **LateUpdate()**\n* 以每一帧的**Update()**事件作分界线：  \n    * **Update()之前**：**物理系统**和**输入系统**相关事件先执行，如**OnTriggerXXX**和**OnMouseXXX**事件。此处**XXX**是占位符，如**OnTriggerXXX**可以代表**OnTriggerEnter**或者**OnTriggerExit**\n    * **Update()之后**：**场景渲染**和**协程**，如**OnRenderImage()**和**yield WWW**语句\n* 协程中，除了**WaitForFixedUpdate**是在**FixedUpdate**之后，**Update**之前执行，其他的都是在**Update**之后，**场景渲染**前执行\n* GUI事件**OnGUI**在场景渲染完之后执行\n* 当对象被销毁时执行**OnDestory()**事件\n* 当游戏退出时执行**OnApplicationQuit()**\n* **OnEnable()**和**OnDisable()**  \n    * **OnEnable()**只有在Object是Active的状态下才能用，一般是Object被初始化或者Object从disable到active过程中被调用\n    * **OnDisable()**只有到Object从active到disable状态才被调用\n","slug":"MonoBehavior event functions","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkawi002m2quosjgzafe1"},{"title":"Hello 2016","date":"2015-12-31T15:59:59.000Z","_content":"\n# Hello 2016~~~\n\n### Bye 2015\n\n\n","source":"_posts/Hello2016.md","raw":"title: Hello 2016\ndate: 2015-12-31 23:59:59\ncategory: 一点一滴\ntags: 一点一滴\n---\n\n# Hello 2016~~~\n\n### Bye 2015\n\n\n","slug":"Hello2016","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkawk002p2quomwzqfc89"},{"title":"一个例子学习Swift中的闭包用法","date":"2015-03-26T07:37:00.000Z","_content":"\n初学习Swift, 觉得Swift中的闭包用法比较灵活, 所以在学习的时候编了个小例子来把用法罗列了出来, 分享出来给大家。\n\n在讲例子之前我们来看下什么是闭包(Closure).《The Swift Programming Language》是这样定义的:\n\n> Closures are self-contained blocks of functionality that can be passed around and used in your code\n \n中文版中这样翻译：\n> 闭包是自包含的函数代码块，可以在代码中被传递和使用。\n\n看解释我们知道，闭包是代码段，它能实现一些逻辑（函数），它可以被传递和使用（就像类型一样）。\n\n然后我们来看看闭包长的什么样子。下面是闭包的定义:\n\n> { (parameters) -> returnType in\n>    statements\n> }\n\n上面定义中 **parameters** 是指参数， **returnType** 是返回类型，而 **statements** 指的是我们要实现的逻辑的代码, 闭包的代码都被 **{}** 包含着。\n观察力强的同学们估计发现了，它怎么跟Swift的函数长的差不多，难道它们是亲戚? Swift中函数是一种特殊的闭包，记住函数是闭包，不是闭包是函数哦。\n\n接下来我们说说文章开头提到的那个栗子。\n\n<!--more-->\n\n假设我们要找出某一些人中最小年龄是多少，我们要通过排序的方法来得到这个年龄。有这么一组年龄数字:\n\n{% codeblock %}\nlet ages = [10, 23, 15, 13, 19]\n{% endcodeblock %}\n\n首先我们使用最原始的办法，自己定义排序方法:\n\n{% codeblock %}\nfunc sortAge(age1: Int, age2: Int) -> Bool {\n    return age1 > age2\n}\n\nsorted(ages, sortAge)\n{% endcodeblock %}\n\n上面代码中我们定义了一个叫做 sortAge 的函数, 它传递给了第二个参数的类型是 ``(Int, Int) -> Bool`` 的 sorted 函数。 如果用闭包来代替自定义的函数, 写法就变成了这样:\n\n{% codeblock %}\nsorted(ages, { (age1:Int, age2:Int) -> Bool in return age1 > age2 })\n{% endcodeblock %}\n\n一个闭包用法就写好了。上面闭包中，定义了参数的个数，名字还有其类型，定义了返回值，还有代码体(in 关键词之后的代码)。\n看起来就像重新写了一个 sortAage 函数。你可能会想，这样也没省多少事，只不过是把自定义的函数写到了 sorted 函数的参数里而已。\n别急, 学会聪明的偷懒是一个好程序员属性，我们来看看怎么简化上面的代码。\n\n首先**闭包中如果能从上下文推断出其参数类型，我们可以省略其类型的定义**。sorted 函数的, 所以我们可以简化代码为:\n\n{% codeblock %}\nsorted(ages, { (age1, age2) -> Bool in return age1 > age2 })\n{% endcodeblock %}\n\n然后，用来包含参数的括号我们可以省略掉, 变成了下面这个样子：\n\n{% codeblock %}\nsorted(ages, { age1, age2 -> Bool in return age1 > age2 })\n{% endcodeblock %}\n\n如果**闭包代码体中只包含单行代码, 我们可以省略 return 关键词**, 然后变成了这个样子:\n\n{% codeblock %}    \nsorted(ages, { age1, age2 -> Bool in age1 > age2 })\n{% endcodeblock %}\n\n如果**闭包中返回类型能从上下文推断出，我们可以省略返回值定义**。参照上面 sorted 函数第二个参数的定义，是可以推断出闭包返回值是 Bool。省略之后就变成了这个样子：\n\n{% codeblock %}\nsorted(ages, { age1, age2 in age1 > age2 })\n{% endcodeblock %}\n\n到了这里，代码已经比较清爽了。但是偷懒的步伐还可以继续（懒惰是人类文明进化的动力）。Swift 闭包中允许用 $0, $1 $2 这样用 $n 这种符号后面接数字的形式来表示其第n个参数. 然后就可以变成这个样子:\n\n{% codeblock %}\nsorted(ages, { $0 > $1 })\n{% endcodeblock %}\n\n好了，已经很短了。人类的偷懒的方法是无止境的。Swift中定义了运算符函数 ``>``, 我们可以把它传递给 sorted 函数。于是乎变成了这个样子：\n\n{% codeblock %}\nsorted(ages, >)\n{% endcodeblock %}\n\n如果你还想问有没有更偷懒的方法？我只想说，兄台你醒醒吧，都只要输入一个字符而已了，你还要怎么样。。。\n\n除了上面的一些用法外，还有一种叫做尾随闭包（就是跟在调用它的函数的屁股后面的闭包），当调用它的函数的最后一个参数是闭包时，可以使用。我们可以把\n\n{% codeblock %}\nsorted(ages, { $0 > $1 })\n{% endcodeblock %}\n\n写成尾随闭包形式：\n\n{% codeblock %}     \nsorted(ages) { $0 > $1 }\n{% endcodeblock %}\n\n大概就这些。。。\n\n \n","source":"_posts/ClosureInSwift.md","raw":"title: 一个例子学习Swift中的闭包用法\ndate: 2015-03-26 15:37\ncategory: 一点一滴\ntags: Swift\n---\n\n初学习Swift, 觉得Swift中的闭包用法比较灵活, 所以在学习的时候编了个小例子来把用法罗列了出来, 分享出来给大家。\n\n在讲例子之前我们来看下什么是闭包(Closure).《The Swift Programming Language》是这样定义的:\n\n> Closures are self-contained blocks of functionality that can be passed around and used in your code\n \n中文版中这样翻译：\n> 闭包是自包含的函数代码块，可以在代码中被传递和使用。\n\n看解释我们知道，闭包是代码段，它能实现一些逻辑（函数），它可以被传递和使用（就像类型一样）。\n\n然后我们来看看闭包长的什么样子。下面是闭包的定义:\n\n> { (parameters) -> returnType in\n>    statements\n> }\n\n上面定义中 **parameters** 是指参数， **returnType** 是返回类型，而 **statements** 指的是我们要实现的逻辑的代码, 闭包的代码都被 **{}** 包含着。\n观察力强的同学们估计发现了，它怎么跟Swift的函数长的差不多，难道它们是亲戚? Swift中函数是一种特殊的闭包，记住函数是闭包，不是闭包是函数哦。\n\n接下来我们说说文章开头提到的那个栗子。\n\n<!--more-->\n\n假设我们要找出某一些人中最小年龄是多少，我们要通过排序的方法来得到这个年龄。有这么一组年龄数字:\n\n{% codeblock %}\nlet ages = [10, 23, 15, 13, 19]\n{% endcodeblock %}\n\n首先我们使用最原始的办法，自己定义排序方法:\n\n{% codeblock %}\nfunc sortAge(age1: Int, age2: Int) -> Bool {\n    return age1 > age2\n}\n\nsorted(ages, sortAge)\n{% endcodeblock %}\n\n上面代码中我们定义了一个叫做 sortAge 的函数, 它传递给了第二个参数的类型是 ``(Int, Int) -> Bool`` 的 sorted 函数。 如果用闭包来代替自定义的函数, 写法就变成了这样:\n\n{% codeblock %}\nsorted(ages, { (age1:Int, age2:Int) -> Bool in return age1 > age2 })\n{% endcodeblock %}\n\n一个闭包用法就写好了。上面闭包中，定义了参数的个数，名字还有其类型，定义了返回值，还有代码体(in 关键词之后的代码)。\n看起来就像重新写了一个 sortAage 函数。你可能会想，这样也没省多少事，只不过是把自定义的函数写到了 sorted 函数的参数里而已。\n别急, 学会聪明的偷懒是一个好程序员属性，我们来看看怎么简化上面的代码。\n\n首先**闭包中如果能从上下文推断出其参数类型，我们可以省略其类型的定义**。sorted 函数的, 所以我们可以简化代码为:\n\n{% codeblock %}\nsorted(ages, { (age1, age2) -> Bool in return age1 > age2 })\n{% endcodeblock %}\n\n然后，用来包含参数的括号我们可以省略掉, 变成了下面这个样子：\n\n{% codeblock %}\nsorted(ages, { age1, age2 -> Bool in return age1 > age2 })\n{% endcodeblock %}\n\n如果**闭包代码体中只包含单行代码, 我们可以省略 return 关键词**, 然后变成了这个样子:\n\n{% codeblock %}    \nsorted(ages, { age1, age2 -> Bool in age1 > age2 })\n{% endcodeblock %}\n\n如果**闭包中返回类型能从上下文推断出，我们可以省略返回值定义**。参照上面 sorted 函数第二个参数的定义，是可以推断出闭包返回值是 Bool。省略之后就变成了这个样子：\n\n{% codeblock %}\nsorted(ages, { age1, age2 in age1 > age2 })\n{% endcodeblock %}\n\n到了这里，代码已经比较清爽了。但是偷懒的步伐还可以继续（懒惰是人类文明进化的动力）。Swift 闭包中允许用 $0, $1 $2 这样用 $n 这种符号后面接数字的形式来表示其第n个参数. 然后就可以变成这个样子:\n\n{% codeblock %}\nsorted(ages, { $0 > $1 })\n{% endcodeblock %}\n\n好了，已经很短了。人类的偷懒的方法是无止境的。Swift中定义了运算符函数 ``>``, 我们可以把它传递给 sorted 函数。于是乎变成了这个样子：\n\n{% codeblock %}\nsorted(ages, >)\n{% endcodeblock %}\n\n如果你还想问有没有更偷懒的方法？我只想说，兄台你醒醒吧，都只要输入一个字符而已了，你还要怎么样。。。\n\n除了上面的一些用法外，还有一种叫做尾随闭包（就是跟在调用它的函数的屁股后面的闭包），当调用它的函数的最后一个参数是闭包时，可以使用。我们可以把\n\n{% codeblock %}\nsorted(ages, { $0 > $1 })\n{% endcodeblock %}\n\n写成尾随闭包形式：\n\n{% codeblock %}     \nsorted(ages) { $0 > $1 }\n{% endcodeblock %}\n\n大概就这些。。。\n\n \n","slug":"ClosureInSwift","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkawo002t2quoqo28h4yu"},{"title":"从C#到Python","date":"2015-01-07T12:13:00.000Z","_content":"\n项目组最近可能要用Python写一插件，虽然自己只是会用，但是还是被要求给大家做个简单的Python入门培训。只能冲个胖子，硬着头皮上了。\n由于项目组里大部分童鞋们都会C#，可能如果从C#做类比的角度来阐述Python语法会更好点，然后下面奇怪的Python教程出来了。大家可以在这里得到PPT和代码:  <https://github.com/wudixiaop/Nana/tree/master/Python/Tutorial/Python%20Quick%20Start>。\n\n\n下面是讲语法的代码，语法部分在注释中有描述。\n\n<!--more-->\n\n{% codeblock lang:python %}\n    # -*- encoding:utf-8 -*-\n\n    \"\"\"\n    本代码主要展示Python的基本数据类型和语法, 及其用法，希望可以帮助大家快速入门。\n    如果不是C#程序员, 请忽略‘C#伪代码’, 直接通过参考‘Python规则’部分来学习\n    \"\"\"\n\n\n\n\n    # ---------------------------------注释----------------------------------------------\n    \"\"\"\n    语法 - 注释\n\n    Python规则:\n        1. 用#打头表示注释\n        2. 用三引号的字符串块，也可以表示注释（因为编译器会忽略3引号的块）\n\n    \"\"\"\n\n\n\n    # -----------------------------------赋值-------------------------------------------------\n    \"\"\"\n    语法 - 赋值\n\n    Python规则: \n        Python是动态语言，变量类型在赋值阶段决定，不像其他语言一样需要先声明变量的数据类型(如C#).\n\n    C#伪代码: \n        string var_sample = \"something\"\n    \"\"\"\n    var_sample = \"someting\" #变量var_sample是字符串类型\n\n\n\n\n    # ------------------------------Python基本数据类型-----------------------------------------------\n    #   1. 空, 用None表示。\n    #   2. 布尔类型: \n    #   3. 数值类型。\n    #   4. 字符串\n    #   5. 列表, 也就是数组。\n    #   6. 字典\n    #   7. 集合(set)，无序的，不重复的元素集。\n    #   8. 元组(Tuple), 和列表类似，但是一旦初始化就不能改变。\n\n    \"\"\"\n    -----------------------  数据类型 - 空  -----------------------------------------\n    Python规则:\n        空类型用None表示, 类似C#中的null.\n\n    C#伪代码:\n        T s = null; // T表示可空类型\n    \"\"\"\n    var_none = None\n\n    \"\"\"\n    -----------------------  数据类型 - 布尔类型  --------------------------------------\n    Python规则：\n        True和False. 对应C#中的true和false。\n        基本类型中空、任何数值类型中的0、空字符串、空元组()、空列表[]、空字典{}都被当作 False.\n        布尔运算有3中not, and和or, 他们的优先级是 not > and > or\n\n    C#伪代码:\n        bool var_bool1 = true;\n        bool var_bool2 = false;\n        bool var_bool3 = 3 > 2;\n        bool var_bool4 = !true;\n        bool var_bool5 = true && true;\n        bool var_bool6 = true || false;\n        bool var_bool7 = false || ((!false) && true);\n    \"\"\"\n    var_bool1 = True        # 变量值为True\n    var_bool2 = False       # 变量值为False\n    var_bool3 = 3 > 2       # 变量值为True\n    var_bool4 = not True    # 变量值为False\n    var_bool5 = True and True  # 变量值为True\n    var_bool6 = True or False  # 变量值为True\n    var_bool7 = False or not False and True # 变量值为 True\n\n\n    \"\"\"\n    -----------------------  数据类型 - 数值类型  --------------------------------------\n    Python规则:\n        数值类型包括整型(int)和浮点数(float)\n        整型前缀0b表示二机制，0O表示八进制，0X表示十六进制\n\n    C#伪代码:\n        int var_int = 1;\n        int var_binary = Convert.ToInt32(\"0010\", 2);\n        int var_octal = Convert.ToInt32(\"0010\", 8);\n        int var_hex = 0x0010;\n        double var_float = 1.0; // 或者 float var_float = 1.0;\n    \"\"\"\n    var_int = 1\n    var_binary = 0b0010 # 变量值为2\n    var_octal = 0O0010 # 变量值为8, 0O第二个是字母O\n    var_hex = 0x0010 # 变量值为16\n    var_float = 1.0\n\n\n    \"\"\"\n    -----------------------  数据类型 - 字符串  -------------------------------------- \n    python规则:\n        字符串有多种表示方法，可以是\n        1. 单引号\n        2. 双引号\n        3. 三引号, 字符串块，如果没有赋值给变量，会被编译器忽略，在这种情况下可以拿来当注释用\n\n        字符串可以带r前缀，表示raw string, 不用转义\n        字符串可以带u前缀，表示Unicode编码\n\n    C#伪代码:\n        string var_str2 = \"some string\";\n        string var_str3 = @\"C:\\mydir\\file.txt\";\n        string var_str4 = @\"C:\\mydir\\文件.txt\"; \n    \"\"\"\n    var_str1 = 'some string'\n    var_str2 = \"some string\"\n    var_str3 = r\"C:\\mydir\\file.txt\"\n    var_str4 = u\"\"\"C:\\mydir\\文件.txt\"\"\"\n\n    #下面两种字符串格式是等价的\n    var_str_fromat1 = \"%s %s\" % (1, 2)\n    var_str_format2 = \"{0} {1}\".format(1, 2)\n\n    \"\"\"\n    -----------------------  数据类型 - 列表  -------------------------------------- \n    python规则：\n        列表，即数组, 用[]表示, 可以包含不同类型的元素。 C#中的数组或者List<>与其类似，但是C#必须指明元素数据类型\n\n    C#伪代码:\n        C#的数组或List<>不能包含不同类型的元素，这里不提供类比代码。  \n    \"\"\"\n    var_list = [1, 2, [3]]  # 初始化\n    var_list[1] = '2'       # 索引下标从0开始，这段代码把第2位元素赋值为字符串'2'，取代了原来的整型2. 此时var_list值为 [1, '2', [3]]\n    var_list.append(1)      # 添加一元素，此时var_list值为 [1, '2', [3], 1]\n    var_list.remove(1)      # 删除一元素，从头遍历，删除第一个元素1, 此时var_list值为 ['2', [3], 1]\n    var_list.remove(1)      # 继续删除1， 此时var_list值为 ['2', [3]]\n\n\n    \"\"\"\n    ----------------------- 数据类型 - 字典  -------------------------------------- \n    python规则:\n        字典，用{}表示，可以用不同的类型做key和value, key和value之间用:号连接\n        C#中的Dictionary<>和这个类似，但是C#必须指明Key和Value的类型\n\n    C#伪代码:\n        C#的Dictionary<>不能包含不同类型的元素，这里不提供类比代码。  \n    \"\"\"\n    var_dict = { 1: 'hello dictionary', '2': [1, 2, 3] }\n    var_dict['2'].append('4') # 通过Key访问元素\n    var_dict[3] = '3' # 添加一元素\n    del var_dict[1]   # 删除已元素，用del关键词\n\n\n    \"\"\"\n    ----------------------- 数据类型 - 集合  -------------------------------------- \n    Python规则:\n        集合(set)，是一个无序的，元素不重复的集，元素可以是不同类型。C#中的HashSet<>和这个类似，但是C#中必须指定类型\n\n    C#伪代码:\n        C#的HashSet<>不能包含不同类型的元素，这里不提供类比代码。\n    \"\"\"\n    var_set = set() # 初始化\n    var_set.add(1)  # 添加一元素\n    var_set.add('2') # 添加一元素, 此时var_set值为 set([1, '2']) \n\n\n    \"\"\"\n    ----------------------- 数据类型 - 元组 -------------------------------------- \n    Python规则:\n        元组(Tuple), 用()表示，能包含不同类型元素。 和列表类似，但是一旦初始化就不能改变。C#中的Tuple<>和这个类似\n\n    C#伪代码:\n       Tuple<int, int> var_tuple = new Tuple<int, int>(10, 20); \n    \"\"\"\n    var_tuple = (10, 20) # 初始化\n    var_tuple_item = var_tuple[1] # 访问item, 下标从0开始\n\n\n\n    # ------------------------------循环控制-----------------------------------------------\n    \"\"\"\n    Python规则:\n        python支持for和while循环\n\n    C#伪代码:\n        for(int i; i < 10; i ++) \n        {\n            // do something\n        }\n\n        foeach(var item in List) \n        {\n            //do something\n        }\n\n        int count = 0;\n        while (count < 10)\n        {\n            count += 1;\n        }\n    \"\"\"\n    for i in range(10):\n        print i\n\n    for t in var_list:\n        print t\n\n    count = 0;\n    while count < 10:\n        count += 1\n\n\n    # ------------------------------条件判断-----------------------------------------------\n    \"\"\"\n    Python规则:\n        条件判断 if, if-else, if-elif-else，或者包含多个elif的if-elif-elif...-else, 每个关键词后要带冒号\n\n    C#伪代码:\n        if (3 > 2) {}\n        \n        if (3 < 2)\n        {\n            //pass\n        }\n        else\n        {\n           //pass \n        }\n\n        if ( 3 < 2 )\n        {\n            //pass\n        }\n        else if (3 < 3)\n        {\n            //pass \n        }\n        else if (3 < 4)\n        {\n             //pass\n        }\n        else\n        {\n             //pass\n        }\n\n    \"\"\"\n    if 3 > 2:\n        pass\n\n    if 3 < 2:\n        pass\n    else: \n        pass\n\n    if 3 < 2:\n        pass\n    elif 3 < 3:\n        pass\n    elif 3 < 4:\n        pass\n    else:\n        pass\n\n\n\n    # ------------------------------异常处理-----------------------------------------------\n    \"\"\"\n    Python规则:\n        关键词try...excpet\n\n    C#伪代码:\n        try\n        {\n           int i = 1/0; \n        }\n        catch\n        {\n            //pass\n        }\n\n        try\n        {\n            //pass\n        }\n        catch(ZeroDivisionError)\n        {\n            //pass\n        }\n    \"\"\"\n    try:\n        1/0\n    except:\n        pass\n\n    try:\n        1/0\n    except ZeroDivisionError:\n        pass\n\n\n\n    # ------------------------------函数-----------------------------------------------\n    \"\"\"\n    Python规则:\n        函数用def来声明\n        没有返回值声明，返回值由函数语句中的return来指明，并且可以有多个返回值。\n        参数不需要带类型名字\n        函数可以赋值给变量\n        函数可以嵌套\n\n        特别关注： 一些函数会用 *args和 **kwargs当作参数来表示可变参数：\n            * --  以元组作为参数传入\n            ** -- 以字典做为参数传入\n\n    C#伪代码:\n        T test_function<T>(T a, T b)\n        {\n            return a + b;\n        } \n\n        C#的return 没有多返回值，且可变参方法不支持不同类型，这里不提供类比代码\n    \"\"\"\n    def test_function(a, b):\n        \"\"\"\n        按照python的风格，方法的注释用三引号字符块表示，并且方法函数声明与其\n        第一行语句中间\n        \"\"\"\n        return a + b\n\n    var_test_function = test_function # 函数可以赋值给变量\n    var_test_function(1, 2) # 返回3\n    var_test_function('1', '2') #返回'12'\n\n    def multi_return_value_function():\n        \"\"\"\n        多个返回值\n        \"\"\"\n        return 1, 2, 3, 4, 5\n\n    (one, two, three, four, five) = multi_return_value_function() \n\n\n    def multi_params_fuction(*args, **kwargs):\n        \"\"\"\n        参数不确定时\n        \"\"\"\n        print type(args), args\n        print type(kwargs), kwargs\n\n    multi_params_fuction(1, [1, '2'], 2, a = 3, b = [1, 2, 4, 5]) \n    \"\"\"\n    上面语句输出为:\n    <type 'tuple'> (1, [1, '2'], 2)\n    <type 'dict'> {'a': 3, 'b': [1, 2, 4, 5]}\n    \"\"\"\n\n    # ------------------------------面向对象-----------------------------------------------\n    \"\"\"\n    Python规则\n        类用关键词class表示\n        类可以继承，并且支持多继承\n        类的构造函数名字是固定的，名字是__init__, init前后是两个下划线\n        类的析构函数名字也是固定的，名字是__del__\n        实例方法第一参数名字必须是self,用于传递对象本身\n        静态方法用@staticmethod装饰器表示，类似于一个全局的函数\n        类方法用@classmethod装饰器表示，类似于C#中的类的静态方法\n        子类同名的方法会覆盖父类同名方法\n        多继承中，如果不同父类有有相同明名字的字段，则其值为最近一次所赋的值。\n\n    c#伪代码:\n        class Base\n        {\n            public string msg;    \n\n\n            public Base(string msg)\n            {\n                this.msg = msg;\n            }\n\n            public virtual void print_class()\n            {\n                Console.Writeline(this.msg);\n            }\n\n            public virtual void print_somthing()\n            {\n                Console.WriteLine(\"print something from Base\")\n            }\n        }\n\n        class Child : Base\n        {\n            public Child : base(\"Child\")\n            {\n                \n            }\n\n            public override void print_somthing()\n            {\n                Console.WriteLine(\"print someting from Child\");\n            }\n        }\n\n        C#不支持类的多继承\n\n    \"\"\"\n    class Base:\n        \"\"\"\n        类的注释放到这里\n        \"\"\"\n        def __init__(self, msg):\n            \"\"\"\n            方法的注释放到这里\n            __init__()是构造函数\n            \"\"\"\n            self.msg = msg\n\n        def __del__(self):\n            \"\"\"\n            析构函数, 一般很少用\n            \"\"\"\n            pass\n\n        def print_class(self):\n            print \"base  {0}\".format(self.msg)\n\n        def print_somthing(self):\n            print 'print something from Base'\n\n\n    class Child(Base):\n        \"\"\"\n        单继承\n        \"\"\"\n        def __init__(self):\n            Base.__init__(self, \"Child\") # 访问父类构造函数\n\n        def print_somthing(self):\n            \"\"\"\n            与父类同名，会覆盖父类的print_somthing方法\n            \"\"\"\n            print \"print someting from Child\"\n\n\n    class Base2:\n        def __init__(self, msg):\n            self.msg = msg\n\n        def print_class(self):\n            print \"base2 {0}\".format(self.msg)\n\n\n    class Child2(Base, Base2):\n        \"\"\"\n        多继承\n        \"\"\"\n        def __init__(self):\n            Base.__init__(self, \"Child2Base\") # 访问父类构造函数\n            Base2.__init__(self, \"Child2Base2\") # 访问父类构造函数\n\n        @staticmethod\n        def static_method():\n            \"\"\"\n            静态方法, 要带@staticmethod装饰器, 类似于一个全局的函数\n            \"\"\"\n            print \"statc methond in Child2\"\n\n        @classmethod\n        def class_methond(thiscls):\n            \"\"\"\n            类方法，要带@classmethod装饰器，类似C#中的类的静态方法, 带一个参数\n            \"\"\"\n            print \"class_method in Child2\" \n\n        def print_child2(self):\n            \"\"\"\n            访问父类方法\n            \"\"\"\n            print \"access static methond in class\"\n            Child2.static_method()  \n            \n            print \"access class methond in class\"\n            Child2.class_methond() \n\n            print \"access instance methond in parent class\"\n            Base.print_class(self)\n            Base2.print_class(self) \n\n\n    def oop_test():\n        \"\"\"\n        类测试方法\n        \"\"\"\n        c = Child()\n        print c.print_class()\n        print c.print_somthing()\n\n        c2 = Child2()\n        Child2.static_method()\n        Child2.class_methond()\n\n        c2.print_somthing()\n        c2.print_child2()\n        \n\n        # 多继承时，\n        #  1. 当不同的父类有相同的字段时, 其值为最近一次所赋的值\n        print c2.msg \n\n        #  2. 当不同父类有相同方法时, 执行继承列表中的第一个父类的方法\n        c2.print_class()\n\n\n\n    # ------------------------------模块与包-----------------------------------------------\n    \"\"\"\n    Python规则:\n        导入模块或包有好几种方式\n    \"\"\"\n    \"\"\"\n    导入：  import [moudle_name or package_name]\n    使用时要带上module_name或者package_name\n    \"\"\"\n    import module\n    #print module.get_module_name()\n\n    import SamplePackage\n    SamplePackage.addmodule.add(1, 2)\n\n    \"\"\"\n    导入变种一： from [moudle_name or package name] import [...]\n    使用时可以省略module_name或者package_name直接访问\n    \"\"\"\n    from SamplePackage import modemodule \n    modemodule.mode(1, 2)\n\n    \"\"\"\n    导入变种二： from [moudle_name or package name] import *  \n    *表示导入所有\n    使用时可以省略module_name或者package_name直接访问\n    \"\"\"\n    from SamplePackage.multiplymodule import *\n    multiply(1, 2)\n\n\n    \"\"\"\n    __name__ 在默认情况下：\n        1. 如果被自己模块内调用，它的值是 __main__\n        2. 如果在外部模块调用，他的值是模块名字\n\n    所以我们可以把模块内部的测试代码放到下面代码中，不会影响其他模块\n    \"\"\"\n    if __name__ == \"__main__\":\n        oop_test()\n        \n{% endcodeblock %}\n\n上面代码地址: [Github](https://github.com/wudixiaop/Nana/blob/master/Python/Tutorial/Python%20Quick%20Start/PythonQuickStart/Python_Introduction.py)","source":"_posts/CSharp to Python Tutorial.md","raw":"title: 从C#到Python\ndate: 2015-1-07 20:13\ncategory: 一点一滴\ntags: Python\n---\n\n项目组最近可能要用Python写一插件，虽然自己只是会用，但是还是被要求给大家做个简单的Python入门培训。只能冲个胖子，硬着头皮上了。\n由于项目组里大部分童鞋们都会C#，可能如果从C#做类比的角度来阐述Python语法会更好点，然后下面奇怪的Python教程出来了。大家可以在这里得到PPT和代码:  <https://github.com/wudixiaop/Nana/tree/master/Python/Tutorial/Python%20Quick%20Start>。\n\n\n下面是讲语法的代码，语法部分在注释中有描述。\n\n<!--more-->\n\n{% codeblock lang:python %}\n    # -*- encoding:utf-8 -*-\n\n    \"\"\"\n    本代码主要展示Python的基本数据类型和语法, 及其用法，希望可以帮助大家快速入门。\n    如果不是C#程序员, 请忽略‘C#伪代码’, 直接通过参考‘Python规则’部分来学习\n    \"\"\"\n\n\n\n\n    # ---------------------------------注释----------------------------------------------\n    \"\"\"\n    语法 - 注释\n\n    Python规则:\n        1. 用#打头表示注释\n        2. 用三引号的字符串块，也可以表示注释（因为编译器会忽略3引号的块）\n\n    \"\"\"\n\n\n\n    # -----------------------------------赋值-------------------------------------------------\n    \"\"\"\n    语法 - 赋值\n\n    Python规则: \n        Python是动态语言，变量类型在赋值阶段决定，不像其他语言一样需要先声明变量的数据类型(如C#).\n\n    C#伪代码: \n        string var_sample = \"something\"\n    \"\"\"\n    var_sample = \"someting\" #变量var_sample是字符串类型\n\n\n\n\n    # ------------------------------Python基本数据类型-----------------------------------------------\n    #   1. 空, 用None表示。\n    #   2. 布尔类型: \n    #   3. 数值类型。\n    #   4. 字符串\n    #   5. 列表, 也就是数组。\n    #   6. 字典\n    #   7. 集合(set)，无序的，不重复的元素集。\n    #   8. 元组(Tuple), 和列表类似，但是一旦初始化就不能改变。\n\n    \"\"\"\n    -----------------------  数据类型 - 空  -----------------------------------------\n    Python规则:\n        空类型用None表示, 类似C#中的null.\n\n    C#伪代码:\n        T s = null; // T表示可空类型\n    \"\"\"\n    var_none = None\n\n    \"\"\"\n    -----------------------  数据类型 - 布尔类型  --------------------------------------\n    Python规则：\n        True和False. 对应C#中的true和false。\n        基本类型中空、任何数值类型中的0、空字符串、空元组()、空列表[]、空字典{}都被当作 False.\n        布尔运算有3中not, and和or, 他们的优先级是 not > and > or\n\n    C#伪代码:\n        bool var_bool1 = true;\n        bool var_bool2 = false;\n        bool var_bool3 = 3 > 2;\n        bool var_bool4 = !true;\n        bool var_bool5 = true && true;\n        bool var_bool6 = true || false;\n        bool var_bool7 = false || ((!false) && true);\n    \"\"\"\n    var_bool1 = True        # 变量值为True\n    var_bool2 = False       # 变量值为False\n    var_bool3 = 3 > 2       # 变量值为True\n    var_bool4 = not True    # 变量值为False\n    var_bool5 = True and True  # 变量值为True\n    var_bool6 = True or False  # 变量值为True\n    var_bool7 = False or not False and True # 变量值为 True\n\n\n    \"\"\"\n    -----------------------  数据类型 - 数值类型  --------------------------------------\n    Python规则:\n        数值类型包括整型(int)和浮点数(float)\n        整型前缀0b表示二机制，0O表示八进制，0X表示十六进制\n\n    C#伪代码:\n        int var_int = 1;\n        int var_binary = Convert.ToInt32(\"0010\", 2);\n        int var_octal = Convert.ToInt32(\"0010\", 8);\n        int var_hex = 0x0010;\n        double var_float = 1.0; // 或者 float var_float = 1.0;\n    \"\"\"\n    var_int = 1\n    var_binary = 0b0010 # 变量值为2\n    var_octal = 0O0010 # 变量值为8, 0O第二个是字母O\n    var_hex = 0x0010 # 变量值为16\n    var_float = 1.0\n\n\n    \"\"\"\n    -----------------------  数据类型 - 字符串  -------------------------------------- \n    python规则:\n        字符串有多种表示方法，可以是\n        1. 单引号\n        2. 双引号\n        3. 三引号, 字符串块，如果没有赋值给变量，会被编译器忽略，在这种情况下可以拿来当注释用\n\n        字符串可以带r前缀，表示raw string, 不用转义\n        字符串可以带u前缀，表示Unicode编码\n\n    C#伪代码:\n        string var_str2 = \"some string\";\n        string var_str3 = @\"C:\\mydir\\file.txt\";\n        string var_str4 = @\"C:\\mydir\\文件.txt\"; \n    \"\"\"\n    var_str1 = 'some string'\n    var_str2 = \"some string\"\n    var_str3 = r\"C:\\mydir\\file.txt\"\n    var_str4 = u\"\"\"C:\\mydir\\文件.txt\"\"\"\n\n    #下面两种字符串格式是等价的\n    var_str_fromat1 = \"%s %s\" % (1, 2)\n    var_str_format2 = \"{0} {1}\".format(1, 2)\n\n    \"\"\"\n    -----------------------  数据类型 - 列表  -------------------------------------- \n    python规则：\n        列表，即数组, 用[]表示, 可以包含不同类型的元素。 C#中的数组或者List<>与其类似，但是C#必须指明元素数据类型\n\n    C#伪代码:\n        C#的数组或List<>不能包含不同类型的元素，这里不提供类比代码。  \n    \"\"\"\n    var_list = [1, 2, [3]]  # 初始化\n    var_list[1] = '2'       # 索引下标从0开始，这段代码把第2位元素赋值为字符串'2'，取代了原来的整型2. 此时var_list值为 [1, '2', [3]]\n    var_list.append(1)      # 添加一元素，此时var_list值为 [1, '2', [3], 1]\n    var_list.remove(1)      # 删除一元素，从头遍历，删除第一个元素1, 此时var_list值为 ['2', [3], 1]\n    var_list.remove(1)      # 继续删除1， 此时var_list值为 ['2', [3]]\n\n\n    \"\"\"\n    ----------------------- 数据类型 - 字典  -------------------------------------- \n    python规则:\n        字典，用{}表示，可以用不同的类型做key和value, key和value之间用:号连接\n        C#中的Dictionary<>和这个类似，但是C#必须指明Key和Value的类型\n\n    C#伪代码:\n        C#的Dictionary<>不能包含不同类型的元素，这里不提供类比代码。  \n    \"\"\"\n    var_dict = { 1: 'hello dictionary', '2': [1, 2, 3] }\n    var_dict['2'].append('4') # 通过Key访问元素\n    var_dict[3] = '3' # 添加一元素\n    del var_dict[1]   # 删除已元素，用del关键词\n\n\n    \"\"\"\n    ----------------------- 数据类型 - 集合  -------------------------------------- \n    Python规则:\n        集合(set)，是一个无序的，元素不重复的集，元素可以是不同类型。C#中的HashSet<>和这个类似，但是C#中必须指定类型\n\n    C#伪代码:\n        C#的HashSet<>不能包含不同类型的元素，这里不提供类比代码。\n    \"\"\"\n    var_set = set() # 初始化\n    var_set.add(1)  # 添加一元素\n    var_set.add('2') # 添加一元素, 此时var_set值为 set([1, '2']) \n\n\n    \"\"\"\n    ----------------------- 数据类型 - 元组 -------------------------------------- \n    Python规则:\n        元组(Tuple), 用()表示，能包含不同类型元素。 和列表类似，但是一旦初始化就不能改变。C#中的Tuple<>和这个类似\n\n    C#伪代码:\n       Tuple<int, int> var_tuple = new Tuple<int, int>(10, 20); \n    \"\"\"\n    var_tuple = (10, 20) # 初始化\n    var_tuple_item = var_tuple[1] # 访问item, 下标从0开始\n\n\n\n    # ------------------------------循环控制-----------------------------------------------\n    \"\"\"\n    Python规则:\n        python支持for和while循环\n\n    C#伪代码:\n        for(int i; i < 10; i ++) \n        {\n            // do something\n        }\n\n        foeach(var item in List) \n        {\n            //do something\n        }\n\n        int count = 0;\n        while (count < 10)\n        {\n            count += 1;\n        }\n    \"\"\"\n    for i in range(10):\n        print i\n\n    for t in var_list:\n        print t\n\n    count = 0;\n    while count < 10:\n        count += 1\n\n\n    # ------------------------------条件判断-----------------------------------------------\n    \"\"\"\n    Python规则:\n        条件判断 if, if-else, if-elif-else，或者包含多个elif的if-elif-elif...-else, 每个关键词后要带冒号\n\n    C#伪代码:\n        if (3 > 2) {}\n        \n        if (3 < 2)\n        {\n            //pass\n        }\n        else\n        {\n           //pass \n        }\n\n        if ( 3 < 2 )\n        {\n            //pass\n        }\n        else if (3 < 3)\n        {\n            //pass \n        }\n        else if (3 < 4)\n        {\n             //pass\n        }\n        else\n        {\n             //pass\n        }\n\n    \"\"\"\n    if 3 > 2:\n        pass\n\n    if 3 < 2:\n        pass\n    else: \n        pass\n\n    if 3 < 2:\n        pass\n    elif 3 < 3:\n        pass\n    elif 3 < 4:\n        pass\n    else:\n        pass\n\n\n\n    # ------------------------------异常处理-----------------------------------------------\n    \"\"\"\n    Python规则:\n        关键词try...excpet\n\n    C#伪代码:\n        try\n        {\n           int i = 1/0; \n        }\n        catch\n        {\n            //pass\n        }\n\n        try\n        {\n            //pass\n        }\n        catch(ZeroDivisionError)\n        {\n            //pass\n        }\n    \"\"\"\n    try:\n        1/0\n    except:\n        pass\n\n    try:\n        1/0\n    except ZeroDivisionError:\n        pass\n\n\n\n    # ------------------------------函数-----------------------------------------------\n    \"\"\"\n    Python规则:\n        函数用def来声明\n        没有返回值声明，返回值由函数语句中的return来指明，并且可以有多个返回值。\n        参数不需要带类型名字\n        函数可以赋值给变量\n        函数可以嵌套\n\n        特别关注： 一些函数会用 *args和 **kwargs当作参数来表示可变参数：\n            * --  以元组作为参数传入\n            ** -- 以字典做为参数传入\n\n    C#伪代码:\n        T test_function<T>(T a, T b)\n        {\n            return a + b;\n        } \n\n        C#的return 没有多返回值，且可变参方法不支持不同类型，这里不提供类比代码\n    \"\"\"\n    def test_function(a, b):\n        \"\"\"\n        按照python的风格，方法的注释用三引号字符块表示，并且方法函数声明与其\n        第一行语句中间\n        \"\"\"\n        return a + b\n\n    var_test_function = test_function # 函数可以赋值给变量\n    var_test_function(1, 2) # 返回3\n    var_test_function('1', '2') #返回'12'\n\n    def multi_return_value_function():\n        \"\"\"\n        多个返回值\n        \"\"\"\n        return 1, 2, 3, 4, 5\n\n    (one, two, three, four, five) = multi_return_value_function() \n\n\n    def multi_params_fuction(*args, **kwargs):\n        \"\"\"\n        参数不确定时\n        \"\"\"\n        print type(args), args\n        print type(kwargs), kwargs\n\n    multi_params_fuction(1, [1, '2'], 2, a = 3, b = [1, 2, 4, 5]) \n    \"\"\"\n    上面语句输出为:\n    <type 'tuple'> (1, [1, '2'], 2)\n    <type 'dict'> {'a': 3, 'b': [1, 2, 4, 5]}\n    \"\"\"\n\n    # ------------------------------面向对象-----------------------------------------------\n    \"\"\"\n    Python规则\n        类用关键词class表示\n        类可以继承，并且支持多继承\n        类的构造函数名字是固定的，名字是__init__, init前后是两个下划线\n        类的析构函数名字也是固定的，名字是__del__\n        实例方法第一参数名字必须是self,用于传递对象本身\n        静态方法用@staticmethod装饰器表示，类似于一个全局的函数\n        类方法用@classmethod装饰器表示，类似于C#中的类的静态方法\n        子类同名的方法会覆盖父类同名方法\n        多继承中，如果不同父类有有相同明名字的字段，则其值为最近一次所赋的值。\n\n    c#伪代码:\n        class Base\n        {\n            public string msg;    \n\n\n            public Base(string msg)\n            {\n                this.msg = msg;\n            }\n\n            public virtual void print_class()\n            {\n                Console.Writeline(this.msg);\n            }\n\n            public virtual void print_somthing()\n            {\n                Console.WriteLine(\"print something from Base\")\n            }\n        }\n\n        class Child : Base\n        {\n            public Child : base(\"Child\")\n            {\n                \n            }\n\n            public override void print_somthing()\n            {\n                Console.WriteLine(\"print someting from Child\");\n            }\n        }\n\n        C#不支持类的多继承\n\n    \"\"\"\n    class Base:\n        \"\"\"\n        类的注释放到这里\n        \"\"\"\n        def __init__(self, msg):\n            \"\"\"\n            方法的注释放到这里\n            __init__()是构造函数\n            \"\"\"\n            self.msg = msg\n\n        def __del__(self):\n            \"\"\"\n            析构函数, 一般很少用\n            \"\"\"\n            pass\n\n        def print_class(self):\n            print \"base  {0}\".format(self.msg)\n\n        def print_somthing(self):\n            print 'print something from Base'\n\n\n    class Child(Base):\n        \"\"\"\n        单继承\n        \"\"\"\n        def __init__(self):\n            Base.__init__(self, \"Child\") # 访问父类构造函数\n\n        def print_somthing(self):\n            \"\"\"\n            与父类同名，会覆盖父类的print_somthing方法\n            \"\"\"\n            print \"print someting from Child\"\n\n\n    class Base2:\n        def __init__(self, msg):\n            self.msg = msg\n\n        def print_class(self):\n            print \"base2 {0}\".format(self.msg)\n\n\n    class Child2(Base, Base2):\n        \"\"\"\n        多继承\n        \"\"\"\n        def __init__(self):\n            Base.__init__(self, \"Child2Base\") # 访问父类构造函数\n            Base2.__init__(self, \"Child2Base2\") # 访问父类构造函数\n\n        @staticmethod\n        def static_method():\n            \"\"\"\n            静态方法, 要带@staticmethod装饰器, 类似于一个全局的函数\n            \"\"\"\n            print \"statc methond in Child2\"\n\n        @classmethod\n        def class_methond(thiscls):\n            \"\"\"\n            类方法，要带@classmethod装饰器，类似C#中的类的静态方法, 带一个参数\n            \"\"\"\n            print \"class_method in Child2\" \n\n        def print_child2(self):\n            \"\"\"\n            访问父类方法\n            \"\"\"\n            print \"access static methond in class\"\n            Child2.static_method()  \n            \n            print \"access class methond in class\"\n            Child2.class_methond() \n\n            print \"access instance methond in parent class\"\n            Base.print_class(self)\n            Base2.print_class(self) \n\n\n    def oop_test():\n        \"\"\"\n        类测试方法\n        \"\"\"\n        c = Child()\n        print c.print_class()\n        print c.print_somthing()\n\n        c2 = Child2()\n        Child2.static_method()\n        Child2.class_methond()\n\n        c2.print_somthing()\n        c2.print_child2()\n        \n\n        # 多继承时，\n        #  1. 当不同的父类有相同的字段时, 其值为最近一次所赋的值\n        print c2.msg \n\n        #  2. 当不同父类有相同方法时, 执行继承列表中的第一个父类的方法\n        c2.print_class()\n\n\n\n    # ------------------------------模块与包-----------------------------------------------\n    \"\"\"\n    Python规则:\n        导入模块或包有好几种方式\n    \"\"\"\n    \"\"\"\n    导入：  import [moudle_name or package_name]\n    使用时要带上module_name或者package_name\n    \"\"\"\n    import module\n    #print module.get_module_name()\n\n    import SamplePackage\n    SamplePackage.addmodule.add(1, 2)\n\n    \"\"\"\n    导入变种一： from [moudle_name or package name] import [...]\n    使用时可以省略module_name或者package_name直接访问\n    \"\"\"\n    from SamplePackage import modemodule \n    modemodule.mode(1, 2)\n\n    \"\"\"\n    导入变种二： from [moudle_name or package name] import *  \n    *表示导入所有\n    使用时可以省略module_name或者package_name直接访问\n    \"\"\"\n    from SamplePackage.multiplymodule import *\n    multiply(1, 2)\n\n\n    \"\"\"\n    __name__ 在默认情况下：\n        1. 如果被自己模块内调用，它的值是 __main__\n        2. 如果在外部模块调用，他的值是模块名字\n\n    所以我们可以把模块内部的测试代码放到下面代码中，不会影响其他模块\n    \"\"\"\n    if __name__ == \"__main__\":\n        oop_test()\n        \n{% endcodeblock %}\n\n上面代码地址: [Github](https://github.com/wudixiaop/Nana/blob/master/Python/Tutorial/Python%20Quick%20Start/PythonQuickStart/Python_Introduction.py)","slug":"CSharp to Python Tutorial","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkawq002x2quoe90r4l2r"},{"title":"如何改变图片亮度","date":"2015-09-15T14:26:00.000Z","_content":"\n有的时候我们有可能有需求将较暗的图像简单的提亮，这篇文章主要讲一种改变图片亮度的方式。我们从两个问题入手：\n\n- 为了提亮图片，我们操作的对象是什么？\n- 怎么操作对象能达到改变亮度的效果？\n\n### Unity 中的 Color\n首先我们来回答第一个问题。聪明的你可能已经知道，我们要操作的对象是 **像素** 。Unity 中 Color \n类的一个实例能表示一个像素点。\n\nColor 类有 4 个字段表示颜色的各通道数值，他们分别是：\n\n- `r` 红色通道\n- `g` 绿色通道\n- `b` 蓝色通道\n- `a` aplha通道\n\n各个通道的数值都是被标准化为 `0...1` 之间的值。\n\n### 改变亮度的算法\n\n<!--more-->\n\n上面 Color 各通道的数值都被标准化，这里我们也依葫芦画瓢来把我们要提高的亮度 brightness 一个数值，不过我们设定它的取值区间为\n`-1...1`。当 brightness 为负数的时候，图片减暗，正数时，图片变亮。\n\n算法, 假设 RGB 通道值为 c：\n\n- 当 brightness < 0 时 c = c + c * brightness\n- 当 brightness >= 0 时 c = c + c * ( 1 / (1 - brightness) - 1)\n\n### 代码实现：\n\n结合上面两个点，我们可以写出类似下面示例代码实现。\n\n{% codeblock %}\nusing UnityEngine;\n\npublic class BrightenScript : MonoBehaviour {\n    \n    [RangeAttribute(-1, 1)]\n    public float brightness = 0;\n    public Texture2D texture;\n    \n    void Start () {\n        Brighten(texture, brightness);\n        GetComponent<Renderer>().material.mainTexture = texture;\n    }\n    \n    private void Brighten(Texture2D texture, float brightness)\n    {\n        Color[] colors = texture.GetPixels();\n        \n        // 对 RGB 通道都做处理\n        //\n        for (int i = 0; i < colors.Length; i++)\n        {\n            colors[i].r = BrightenChannel(colors[i].r, brightness);\n            colors[i].g = BrightenChannel(colors[i].g, brightness);\n            colors[i].b = BrightenChannel(colors[i].b, brightness);\n        }\n        \n        texture.SetPixels(colors);\n        texture.Apply();\n    }\n    \n    \n    private float BrightenChannel(float c, float brightness)\n    {\n        if(brightness < 0)\n        {\n            return c + c * brightness;\n        }\n        else\n        {\n            return c + c * (1 / (1 - brightness) - 1);\n        }\n    }\n}\n{% endcodeblock %}\n\nbrightness 为 0.6 时效果如下：\n\n![0.6](/images/BrigthenImage/b1.png)\n\nbrightness 为 -0.5 时效果如下：\n\n![-0.5](/images/BrigthenImage/b2.png)","source":"_posts/BrightenTexture2D.md","raw":"title: 如何改变图片亮度\ndate: 2015-09-15 22:26\ncategory: Unity\ntags: Graphic\n---\n\n有的时候我们有可能有需求将较暗的图像简单的提亮，这篇文章主要讲一种改变图片亮度的方式。我们从两个问题入手：\n\n- 为了提亮图片，我们操作的对象是什么？\n- 怎么操作对象能达到改变亮度的效果？\n\n### Unity 中的 Color\n首先我们来回答第一个问题。聪明的你可能已经知道，我们要操作的对象是 **像素** 。Unity 中 Color \n类的一个实例能表示一个像素点。\n\nColor 类有 4 个字段表示颜色的各通道数值，他们分别是：\n\n- `r` 红色通道\n- `g` 绿色通道\n- `b` 蓝色通道\n- `a` aplha通道\n\n各个通道的数值都是被标准化为 `0...1` 之间的值。\n\n### 改变亮度的算法\n\n<!--more-->\n\n上面 Color 各通道的数值都被标准化，这里我们也依葫芦画瓢来把我们要提高的亮度 brightness 一个数值，不过我们设定它的取值区间为\n`-1...1`。当 brightness 为负数的时候，图片减暗，正数时，图片变亮。\n\n算法, 假设 RGB 通道值为 c：\n\n- 当 brightness < 0 时 c = c + c * brightness\n- 当 brightness >= 0 时 c = c + c * ( 1 / (1 - brightness) - 1)\n\n### 代码实现：\n\n结合上面两个点，我们可以写出类似下面示例代码实现。\n\n{% codeblock %}\nusing UnityEngine;\n\npublic class BrightenScript : MonoBehaviour {\n    \n    [RangeAttribute(-1, 1)]\n    public float brightness = 0;\n    public Texture2D texture;\n    \n    void Start () {\n        Brighten(texture, brightness);\n        GetComponent<Renderer>().material.mainTexture = texture;\n    }\n    \n    private void Brighten(Texture2D texture, float brightness)\n    {\n        Color[] colors = texture.GetPixels();\n        \n        // 对 RGB 通道都做处理\n        //\n        for (int i = 0; i < colors.Length; i++)\n        {\n            colors[i].r = BrightenChannel(colors[i].r, brightness);\n            colors[i].g = BrightenChannel(colors[i].g, brightness);\n            colors[i].b = BrightenChannel(colors[i].b, brightness);\n        }\n        \n        texture.SetPixels(colors);\n        texture.Apply();\n    }\n    \n    \n    private float BrightenChannel(float c, float brightness)\n    {\n        if(brightness < 0)\n        {\n            return c + c * brightness;\n        }\n        else\n        {\n            return c + c * (1 / (1 - brightness) - 1);\n        }\n    }\n}\n{% endcodeblock %}\n\nbrightness 为 0.6 时效果如下：\n\n![0.6](/images/BrigthenImage/b1.png)\n\nbrightness 为 -0.5 时效果如下：\n\n![-0.5](/images/BrigthenImage/b2.png)","slug":"BrightenTexture2D","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkawt00302quoz61pa8kl"},{"title":"Unity 5：使用 Asset Bundle 和 Asset Bundle Manager (3)","date":"2015-11-12T08:08:22.000Z","_content":"\n这篇是 Unity 官方教程 [AssetBundles and the AssetBundle Manager](http://unity3d.com/cn/learn/tutorials/topics/scripting/assetbundles-and-assetbundle-manager?playlist=17117) 的翻译， 分三部分，这是第三部分。翻译不到之处请不吝指出。非常谢谢！\n\n译者注：英文太啰嗦了，但是还是坚持的把它翻译完了。因为啰嗦的好处是起码能让概念多复习几遍，更容易记得住。如果读者觉得啰嗦，可以自行执行 **跳读技能** 来阅读译文。\n\n本文的项目连接：<http://u3d.as/jyk>\n<hr>\n\n<div style='display:none'>\n###EXAMPLE 1: LOADING ASSETS\n\n* Enable Simulation Mode using the menu item “Assets/AssetBundles/Simulation Mode”.\n* Open the scene “AssetBundleSample/Scenes/AssetLoader”.\n* Note that the scene is essentially empty and only contains a Main Camera, Directional \n Light and “Loader” GameObject.\n* Enter Playmode.\n* Note that a cube has been loaded into the scene from an AssetBundle.\n\nThis scene is driven by the script “LoadAssets.cs”.\n</div>\n\n### 示例 1：加载资源\n\n* 使用 \"Asset/AssetBundles/Simulation Mode\" 菜单打开模拟模式\n* 打开 \"AssetBundleSample/Scenes/AssetLoader\" 场景\n* 注意场景是个空的只有一个主摄像机，方向光和游戏对象 \"Loader\"\n* 进入 PlayMode\n* 然后会注意到一个 cube 已经从 AssetBundle 加载到场景里面了\n\n这个场景是被 \"LoadAssts.cs\" 脚本驱动的。\n\n<div style='display:none'>\nOpen “AssetBundleSample/Scripts/LoadAssets.cs” in a script editor.\n</div>\n\n在脚本编辑器里面打开脚本 \"AssetBundleSample/Scripts/LoadAssets.cs\"\n\n<div style='display:none'>\nThere are two public variables: public string assetBundleName; and public string assetName;\n</div>\n\n脚本里有两个公共变量： `public string assetBundleName;` 和 `public string assetName;`\n\n<div style='display:none'>\n* public string assetBundleName; holds the name of the AssetBundle to be loaded.\n* public string assetName; holds the name of the Asset to be loaded from the loaded AssetBundle.\n</div>\n\n* **public string assetBundleName;** 保存了要被加载的 AssetBundle 的名字\n* **public string assetName;** 保存了要已加载的 AssetBundle 中加载的资源的名字\n\n<div style='display:none'>\nThe script comprises of a Start() function and two Coroutines, called from Start(). In Initialize(), DontDestroyOnLoad() is called, the path to the AssetBundles is set and the AssetBundle Manifest is initialized. In InstantiateGameObjectAsync() the Asset and AssetBundle name are requested using AssetBundleManager.LoadAssetAsync() and if the Asset requested is not null, it is instantiated.\n</div>\n\n<!--more-->\n\n这个脚本是由一个 `Start()` 函数和被 `Start()` 调用的两个协程组成的。`Initialize()` 调用了 `DontDestoryOnLoad()`, 设置了 AssetBundle 的路径和初始化了 AssetBundle 清单。在 `InstantiateGameObjectAsync()` 中，如果资源不为空，`AssetBundleManager.LoadAssetAsync()` 调用资源和 AssetBundle 的名字。\n\n<div style='display:none'>\nWhat is important to note here, by looking at the Asset “MyCube” in “AssetBundleSample/Assets” is that “MyCube” is dependent upon “MyMaterial” which is then dependent on “UnityLogo”. Only the Asset “MyCube” was requested, and all of the dependent Assets were correctly loaded.\n</div>\n\n重点注意下，在 \"AssetBundleSample/Assets\" 路径下查看 \"MyCube\" 资源，会发现 \"MyCube\" 依赖于 \"MyMaterial\"，而 \"MyMaterial\" 依赖于 \"UnityLogo\"。脚本中只有 \"MyCube\" 资源被调用，但是所有的依赖资源都被正确的加载了。\n\n<div style='display:none'>\nIt is also worth noting how the path to the AssetBundles is being set. This code will set the location for the AssetBundles to the Local AssetBundle Server when the scene is running within the Editor or from a Development Build. (For more information on development builds, please see the documentation on publishing builds.) When working in the Editor while Simulation Mode is enabled, AssetBundles will be simulated and this setting will not be used.\n</div>\n\nAssetBundle 的路径怎么设置也值得注意下。当场景在编辑器中或者从一个开发版 Build 中运行时，这段代码会给本地资源服务器设置 AssetBundle 的位置。（更多关于开发版 Build，请查看[发布 Builds 文档](http://docs.unity3d.com/Manual/PublishingBuilds.html)。）模拟模式开启后，AssetBundle 会在编辑器中被模拟，这个设置将不会被使用。\n\n<div style='display:none'>\nTo understand the use of DontDestroyOnLoad() it is worth understanding that even though this is a very simple script and in this context it is not absolutely necessary, it is present here with the assumption that this script will become the basis of an AssetBundle loader for a more complex project and will need to survive scene changes.\n</div>\n\n对 `DontDestoryOnLoad()` 作用的理解。虽然在这个非常简单的脚本中并不是绝对需要它，但是他的存在是假设这个脚本会作为一个更复杂的项目的 AssetBundle 加载器基础，它需要在场景变化的以后依然存在。\n\n<div style='display:none'>\n###EXAMPLE 2: LOADING SCENES\n\n* Make sure Simulation Mode is enabled by using the menu item “Assets/AssetBundles/Simulation Mode”.\n* Open the scene “AssetBundleSample/Scenes/SceneLoader”.\n* Note that the scene is essentially empty and only contains a Main Camera, Directional Light and “Loader” GameObject.\n* Enter Playmode.\n* Note that a cube and a plane have been loaded into the scene from an AssetBundle.\n\nThis scene is driven by the script “LoadScenes.cs”.\n</div>\n\n### 示例 2：加载场景\n\n* 使用 \"Asset/AssetBundles/Simulation Mode\" 菜单打开模拟模式\n* 开始 \"AssetBundleSample/Scenes/SceneLoader\" 场景\n* 注意场景是个空的只有一个主摄像机，方向光和游戏对象 \"Loader\"\n* 开打 PlayMode\n* 然后会注意到一个 cube 和 plane 已经从 AssetBundle 加载到场景里面了\n\n这个场景被 \"LoadScene.cs\" 脚本驱动着。\n\n<div style='display:none'>\nOpen “AssetBundleSample/Scripts/LoadScenes.cs” in a script editor.\n</div>\n\n在脚本编辑其中打开 \"AssetBundleSample/Scripts/LoadScenes.cs\" 脚本。\n\n<div style='display:none'>\nThere are two public variables: public string sceneAssetBundle; and public string sceneName;\n</div>\n\n脚本里有个两个公共变量：`public string sceneAssetBundle;` 和 `public string sceneName;`\n\n<div style='display:none'>\n* sceneAssetBundle; holds the name of the AssetBundle to be loaded.\n* sceneName; holds the name of the Scene to be loaded from the loaded AssetBundle.\n</div>\n\n* **sceneAssetBundle;** 保持了要加载的 AssetBundle 的名字\n* **sceneName;** 保持了要从已加载的 AssetBundle 里加载的场景的名字\n\n<div style='display:none'>\nThe script comprises of a Start() function and two Coroutines, called from Start(). In Initialize(), DontDestroyOnLoad() is called, the path to the AssetBundles is set and the AssetBundle Manifest is initialized. In InitializeLevelAsync() the Scene name and isAdditive are used to request a Scene using AssetBundleManager.LoadLevelAsync(). If the Scene requested is null, the AssetBundle Manager will display an error in the console and the Coroutine ends.\n</div>\n\n这个脚本是有一个 `Start()` 函数和被 `Start()` 调用的两个协程组成的。`Initialize()` 调用了 `DontDestoryOnLoad()`, 设置了 AssetBundle 的路径和初始化了 AssetBundle 清单。在 `InitializeLevelAsync()` 里使用 `AssetBundleManager.LoadLevelAsync()` 调用场景名字和 `isAdditive` 来请求一个场景。如果场景为空，AssetManager 会在控制台显示出错误，然后协程结束。\n\n<div style='display:none'>\nWhat is important to note here, by looking at the Asset “MyCube” in “AssetBundleSample/Assets” is that “Cube” is dependent upon “MyMaterial” which is then dependent on “UnityLogo”. Only the Scene “TestScene” was requested. “Cube” was included in “TestScene” and all of the dependent Assets were correctly loaded by the AssetBundle Manager.\n</div>\n\n重点注意下，在 \"AssetBundleSample/Assets\" 路径下查看 \"MyCube\" 资源，会发现 \"MyCube\" 依赖于 \"MyMaterial\"，而 \"MyMaterial\" 依赖于 \"UnityLogo\"。只有 \"TestScene\" 场景被请求了。但在 “TestScene” 中的 \"Cube\" 和所有依赖的资源都被 AssetBundle Manager 正确的加载了。\n\n<div style='display:none'>\nIt is also worth noting how the path to the AssetBundles is being set. This code will set the location for the AssetBundles to the Local AssetBundle Server when the scene is running within the Editor or from a Development Build. (For more information on development builds, please see the documentation on publishing builds.) When working in the Editor while Simulation Mode is enabled, AssetBundles will be simulated and this setting will not be used.\n</div>\n\nAssetBundle 的路径怎么设置也值得注意下。当场景在编辑器中或者从一个开发版 Build 中运行时，这段代码会给本地资源服务器设置 AssetBundle 的位置。（更多关于开发版 Build，请查看 [发布 Builds 文档](http://docs.unity3d.com/Manual/PublishingBuilds.html)。）模拟模式开启后，AssetBundle 会在编辑器中被模拟，这个设置将不会被使用。\n\n<div style='display:none'>\nTo understand the use of DontDestroyOnLoad() it is worth understanding that even though this is a very simple script and in this context it is not absolutely necessary, it is present here with the assumption that this script will become the basis of an AssetBundle loader for a more complex project and will need to survive scene changes.\n</div>\n\n对 `DontDestoryOnLoad()` 作用的理解。虽然在这个非常简单的脚本中并不是绝对需要它，但是他的存在是假设这个脚本会作为一个更复杂的项目的 AssetBundle 加载器基础，它需要在场景变化的以后依然存在。\n\n<div style='display:none'>\n###EXAMPLE 3: VARIANTS\n\nTo work with AssetBundle Variants, the AssetBundles will need to be built, as AssetBundle Variants do not work with Simulation Mode. To build AssetBundles and their Variants, make sure all of the Assets are properly assigned to an AssetBundle Name and, if being used as an AssetBundle Variant, an appropriate AssetBundle Variant Name needs to be assigned as well.\n</div>\n\n### 示例 3：变体\n\n要使用 AssetBundle 变体，需要编译 AssetBundle, 因为模拟模式下不支持它。在编译 AssetBundle 和它的变体钱，确保所有的资源以及被正确地指定 AssetBundle 名字和如果要被 AssetBundle 变体利用到的话，AssetBundle 变体的名字也要指定。\n\n![variant name hd](http://unity3d.com/sites/default/files/variant_name_hd.png)\n\n<div style='display:none'>\ndescriptionAn Asset with both AssetBundle Name and AssetBundle Variant Name set.\n</div>\n\n<small>同时拥有 AssetBundle 名字和 AssetBundle 变体名字的资源</small>\n\n<div style='display:none'>\nWhen all Assets have been assigned to an AssetBundle or AssetBundle Variant, AssetBundles can be built by selecting “Assets/AssetBundles/Build AssetBundles”.\n</div>\n\n当所有的资源都指定到 AssetBundle 或者 AssetBundle 变体后，选择 \"Assets/AssetBundles/Build AssetBundles\" 菜单来编译它们。\n\n![build assetbundles](http://unity3d.com/sites/default/files/build_assetbundles.png)\n\n<div style='display:none'>\ndescriptionAssets/AssetBundles/Build AssetBundles\n</div>\n\n<small>_Assets/AssetBundles/BuildAssetBundles_</small>\n\n<div style='display:none'>\nBy default, the AssetBundles will be optimized for the current build target and built into a folder called “AssetBundles” in the Project’s root directory, grouped by build target.\n</div>\n\n默认情况下，AssetBundle 会根据当前的平台优化，并编译进项目跟目录下的 \"AssetBundles\" 文件夹内，并按平台分组。\n\n<div style='display:none'>\nFor ease of workflow and to use these newly built AssetBundles without deploying them, the Local AssetBundle Server should be enabled. Use “Assets/AssetBundles/Local AssetBundle Server” to enable the Local AssetBundle Server.\n</div>\n\n为了简化流程，不部署新编译出来的 AssetBundle 远程，需要开启本地资源服务器。通过 “Assets/AssetBundles/Local AssetBundle Server” 可以开启本地资源服务器。\n\n![local assetbundles server](http://unity3d.com/sites/default/files/local_assetbundle_server.png)\n\n<div style='display:none'>\ndescriptionStarting the Local AssetBundle Server\n</div>\n\n<small>_启动本地资源服务器_</small>\n\n<div style='display:none'>\nThis local server should run seamlessly, but, as with any network communication, the local server will have the same restrictions as any network communication and may be subject to permissions requirements, firewalls, and other limitations. Be aware that the Local AssetBundle Server is enabling a Local AssetBundle Server that is set to the default IP Address and Port, which is usually http://192.168.1.115:7888/. This information is temporarily stored in the file AssetBundleManager/Resources/AssetBundleServerURL. This information will be set or changed automatically by the AssetBundleManager, and should not need any attention by the user.\n</div>\n\n本地资源服务器应该想其他任何网络连接一样受限制，可能是权限需求，防火墙和其他限制。本地资源服务器启动时会被设置到默认 IP 地址和端口的本地资源访问的服务器，通常是 http://192.168.1.115:7888/. 这个只是暂时的，它被存储在 **AssetBundleManager/Resources/AssetBundleServerURL** 文件里面。这些信息会被 AssetBundleManager 设置或自动改变，用户不需要关注它们。\n\n![assetbundle server url](http://unity3d.com/sites/default/files/assetbundle_serer_url.png)  \n\n<div style='display:none'>\ndescriptionAssetBundleServerURL contains the current URL and Port\n</div>\n\n<small>_包含当前 URL 和 端口的 AssetBundleServerURL_</small>\n\n<div style='display:none'>\nWhen the the Local AssetBundle Server is running, the built AssetBundles can be tested locally.\n</div>\n\n当本地资源服务器运行的时候，编译后 AssetBundle 可以被本地测试。\n\n<div style='display:none'>\n* Make sure Simulation Mode is disabled by using the menu item “Assets/AssetBundles/Simulation Mode”.\n* Make sure the Local AssetBundle Server is enabled by using the menu item “Assets/AssetBundles/Local AssetBundle Server”.\n* Open the scene “AssetBundleSample/Scenes/VariantLoader”.\n* Note that the scene is essentially empty and only contains a Main Camera, Directional Light and “Loader” GameObject.\n* Enter Playmode.\n* Choose “Load SD”.\n* Note that a cube and a Sprite have been loaded into the scene from an AssetBundle.\n* Exit Playmode.\n* Enter Playmode.\n* Choose “Load HD”.\n* Note that the same cube and Sprite have been loaded in the scene, but the Material, its dependent texture and the Sprite texture have been loaded from a different AssetBundle. The materials have different colors and the images are at a significantly higher resolution.\n</div>\n\n* 选择 “Assets/AssetBundles/Simulation Mode” 确保模拟模式被禁用了\n* 选择 \"Assets/AssetBundles/Local AssetBundle Server\" 确保本地资源服务器开启\n* 打开 \"AssetBundleSample/Scenes/VariantLoader\"\n* 注意场景是个空的只有一个主摄像机，方向光和游戏对象 \"Loader\"\n* 退出 PlayMode (如果在 PlayMode 下)\n* 打开 PlayMode\n* 选择 \"Load HD\"\n* 注意同一个 Cube 和 Sprite 加载进场景了，但是材质和他依赖的独立纹理和 Sprite 纹理却从不同的 AssetBundle 加载。这些材质有不同的颜色，图片有更高的分辨率。\n\n<div style='display:none'>\nThis scene is driven by the script “LoadVariants.cs”.\n</div>\n\n这个场景是被 \"LoadVariant.cs\" 脚本驱动的。\n\n<div style='display:none'>\nOpen “AssetBundleSample/Scripts/LoadVariants.cs” in a script editor.\n</div>\n\n从编辑器中打开 \"AssetBundleSample/Scripts/LoadVariants\"。\n\n<div style='display:none'>\nThis script is nearly identical to “LoadScenes.cs”. The main differences are the variable identifying the AssetBundle Variant to be loaded, and code to set the active Variant. There is additional code to create the UI Buttons.\n</div>\n\n这个脚本跟 \"LoadScenes.cs\" 几乎差不多。主要的区别就是用来区别需要加载的 AssetBundle 变体的变量和设置当前变体的代码。还有用来创建 UI 按钮的额外的代码。\n\n<div style='display:none'>\n* public string variantSceneAssetBundle; holds the name of the AssetBundle to be loaded.\n* public string variantSceneName; holds the name of the Scene to be loaded from the loaded AssetBundle.\n* private string[] activeVariants; holds the AssetBundleVariantNames to identify which AssetBundle Variants to load.\n* private bool bundlesLoaded; is used to hide the UI when the Assets have been loaded.\n</div>\n\n* **public string variantSceneAssetBundle;** 保存要加载的 AssetBundle 的名字\n* **public string variantSceneName;** 保存要从已加载的 AssetBundle 中加载的场景名字\n* **private string[] activeVariants;** 保存用来区分需要加载的 AssetBundle 变体的 `AsssetBundleVariantNames`\n* **private bool bundlesLoaded** 用来在加载完资源之后隐藏 UI\n\n<div style='display:none'>\nThe script comprises of a BeginExample() function and two Coroutines, called from Start(). BeginExample is called by the “Load HD” or “Load SD” button in OnGUI. In Initialize(), DontDestroyOnLoad() is called, the path to the AssetBundles is set and the AssetBundle Manifest is initialized. In BeginExample(), between calling Initialize() and InitializeLevelAsync(), the active Variants are set. The value being set here is created by the “Load HD” or “Load SD” button in OnGUI. In InitializeLevelAsync() the Scene name and isAdditive are used to request a Scene using AssetBundleManager.LoadLevelAsync(). If the Scene requested is null, the AssetBundle Manager will display an error in the console and the Coroutine ends.\n</div>\n\n脚本由一个 `BeginExample()` 函数和被 `Start()` 调用的两个协程组成。 `BeginExample()` 在 `OnGUI()`函数中 被 `Load HD` 或者 `Load SD` 按钮调用。`Initialize()` 调用了 `DontDestoryOnLoad()`, 设置了 AssetBundle 的路径和初始化了 AssetBundle 清单。在 `BeginExample()` 方法里，在调用 `Initialize()` 和 `InitializeLevelAsync()` 之间，当前的变体被设置了。这里被设置的值从靠 `OnGUI` 里的 \"Load HD\" 或者 \"Load SD\" 按钮创建的。在 `InitializeLevelAsync()` 里使用 `AssetBundleManager.LoadLevelAsync()` 调用场景名字和 `isAdditive` 来请求一个场景。如果场景为空，AssetManager 会在控制台显式出错误，然后协程结束。\n\n<div style='display:none'>\nWhat is important to note here is how AssetBundle Variants are loaded. The array activeVariants contains a list of all of the possible Variant Names that are “active”. This array is used to set the AssetBundleManager.ActiveVariants property. When loading an AssetBundle that has a variant, the AssetBundle Manager will choose the AssetBundles that have “active” Variant Names in the ActiveVariants property. In the current example the ActiveVariants property contains only one element; the Active Variant is either “sd” or “hd”. It is possible to have multiple entries in the ActiveVariants property. For example there could be the following AssetBundles: my-material.sd, my-material.hd, my-text.english, my-text.danish, my-text.catalan, my-text.welsh. The ActiveVariants property could contain both “hd” and “danish”, or “sd” and “english” and so on for any of the other possible combinations of these Variant Names. This way, the AssetBundle Manager can load hd/sd images and the language choices separate from each other.\n</div>\n\n这里需要重视的是 AssetBundle 变体是怎么样加载的。**activeVariants** 数组包含了所有可能的 “激活的” 变量名列表。这个数组用来设置 **AssetBundleManager.ActiveVariants** 属性。当加载一个含有变体的 AssetBundle 时，AssetBundle Manager 将会选择在 **ActiveVariants** 属性里含有 “激活” 的变体名字的 AssetBundle。当前的示例中，**ActiveVariants** 属性只包含一个元素。当前的变体要么是 \"sd\"，要么是 “hd”。在 **ActiveVariants** 属性中有多个实体是有可能的。比如，可能有下面一些 AssetBundle: my-material.sd，my-material.hd， my-text.english，my-text.catalan，my-text.welsh。**ActiveVariants** 属性可以包含 “hd” 和 “danish” 两者或者 “sd” 和 \"english\" 等等任何可以有其他可能组合的变体名。这种方式下，AssetBundle Manager 分开可以加载 hd/sd 图片和语言选择。\n\n<div style='display:none'>\nThere are some rules to this that are worth noting. If, for some reason, there are AssetBundles that have Variants assigned, but no Active Variant Name is set in the ActiveVariants property- for example neither “sd” nor “hd” are in the ActiveVariants property for the current example - the AssetBundle Manager will simply use the first AssetBundle it finds with the correct AssetBundle Name, ignoring the Variant Name. If, for some reason, there are multiple Active Variant Names in the ActiveVariants property for the same set of AssetBundles - for example, both “sd” and “hd” are in the ActiveVariants property for the current example - the AssetBundle Manager will choose the AssetBundle Variant whose Variant Name comes first in the ActiveVariants property.\n</div>\n\n有些规则值得注意下。如果，因为一些因素，有一些指定了变体的 AssetBundle，但是在 **ActiveVariants** 属性里没有 “激活” 的变体名 - 比如当前例子中的 “sd” 或者 “hd” 不在 **ActiveVraiants** 属性中 - AssetBundle Manager 将会简单的选择第一个它发现的正确名字的 AssetBundle 而忽略变体名。再如果，又因为一些因素，在 **ActiveVariants** 属性里对同一个 AssetBundle 集合有多个 “激活” 的变体名 - 比如， 在当前的例子里，“sd” 和 “hd” 都在 **ActiveVariants** 属性里 - AssetBundle Manager 将选择在 **ActiveVariants** 属性中的第一个变体名。\n\n<div style='display:none'>\n###EXAMPLE 4: TANKS EXAMPLE\n\nThis more complex example will sum up everything in this article, including loading a scene from an AssetBundle and loading AssetBundle Variants for resolution, content and localization.\n</div>\n\n### 示例 4：坦克示例\n\n这个更复杂的示例将包括这篇文章中的所有内容，包括从 AssetBundle 中加载场景和为分辨率，内容和位置加载 AssetBundle 变体。\n\n<div style='display:none'>\n* Make sure Simulation Mode is disabled by using the menu item “Assets/AssetBundles/Simulation Mode”.\n* Make sure the Local AssetBundle Server is enabled by using the menu item “Assets/AssetBundles/Local AssetBundle Server”.\n* Open the scene “AssetBundleSample/Scenes/TanksLoader”.\n* Note that the scene is essentially empty and only contains only the “Loader” GameObject.\n* Enter Playmode.\n* Select one choice for resolution, style and language.\n* Note that the assets loaded are the options chosen in the UI.\n* Note that if none of the choices are explicitly chosen, the AssetBundleManager will choose one automatically (as per the rules above) and print a warning in the console.\n</div>\n\n* 选择 “Assets/AssetBundles/Simulation Mode” 确保模拟模式被禁用了\n* 选择 \"Assets/AssetBundles/Local AssetBundle Server\" 确保本地资源服务器开启\n* 打开 \"AssetBundleSample/Scenes/TanksLoader\"\n* 注意场景是个空的只有一个主摄像机，方向光和游戏对象 \"Loader\"\n* 进入 PlayMode\n* 选择一个分辨率，风格和语言\n* 注意在 UI 里的选择项就是加载的资源\n* 如果没有显式的选择一个，AssetBundleManager 将自动选择（基于上面的原则）一个并且在命令行输出一个警告。\n\n<div style='display:none'>\nThis scene is driven by the script “LoadTanks.cs”.\n</div>\n\n场景靠 \"LoadTanks.cs\" 脚本驱动。\n\n<div style='display:none'>\nOpen “AssetBundleSample/Scripts/LoadTanks.cs” in a script editor.\n</div>\n\n在编辑器里面打开 “AssetBundleSample/Scripts/LoadTanks.cs” 脚本。\n\n<div style='display:none'>\nThis script is very similar to “LoadScenes.cs” and “LoadAssets.cs”. This script uses code to both load a scene which depends upon a variant and to load an additional GameObject that also depends upon a variant. There is additional code to create the UI Buttons.\n</div>\n\n这个脚本与 “LoadScenes.cs” 和 \"LoadAssets.cs\" 非常像。脚本使用代码去加载依赖变体的场景和一样依赖变体的额外的游戏对象。也有一些额外的代码创建 UI 按钮。\n\n<div style='display:none'>\n* public string sceneAssetBundle; holds the name of the Scene bearing AssetBundle to be loaded.\n* public string sceneName; holds the name of the Scene to be loaded from the loaded AssetBundle.\n* public string textAssetBundle; holds the name of the Text Asset bearing AssetBundle to be loaded.\n* public string textAssetName; holds the name of the Text Asset to be loaded from the loaded AssetBundle.\n* private string[] activeVariants; holds the ActiveVariants to pass to the AssetBundleManager.\n* private bool bundlesLoaded; is used to hide the UI when the Assets have been loaded.\n* private bool sd, hd, normal, desert, english, danish; holds values used to set the ActiveVariant.\n* private string tankAlbedoStyle, tankAlbedoResolution, language; holds values used to set the ActiveVariant.\n</div>\n\n* **public string sceneAssetBundle;** 保存携带场景的 AssetBundle 的名字\n* **public string sceneName;** 保存要从已加载的 AssetBundle 中加载的场景名字。\n* **public string textAssetBundle;** 保存携带文字资源的 AssetBundle 的名字\n* **public string textAssetName;** 保存要从已加载的 AssetBundle 中加载的文字资源的名字\n* **private string activeVariants;** 保存要传给 AssetBundleManager 的 `ActiveVariants`\n* **private bool bundlesLoaded;** 用来资源加载之后隐藏 UI\n* **private bool sd, hd, normal, desert, englisth, danish;** 保存用来设置 `ActiveVariants` 的值\n* **private string tankAlbedoStyle, tankAlbedoResolution, languge;** 保存用来设置 `ActiveVariants` 的值\n\n<div style='display:none'>\nThe script comprises of a BeginExample() function and three Coroutines, called from Start(). The BeginExample() function is called by the button “Load Scene” in OnGUI(). In Initialize(), DontDestroyOnLoad() is called, the path to the AssetBundles is set and the AssetBundle Manifest is initialized. In BeginExample(), between calling Initialize() and InitializeLevelAsync(), the active Variants are set. The value being set here is created by the button “Load Scene” based on the user input in OnGUI(). In InitializeLevelAsync() the Scene name and isAdditive are used to request a Scene using AssetBundleManager.LoadLevelAsync(). If the Scene requested is null, the AssetBundle Manager will display an error in the console and the Coroutine ends. In InstantiateGameObjectAsync() the Asset and AssetBundle name are requested using AssetBundleManager.LoadAssetAsync() and if the Asset requested is not null, it is instantiated. If the AssetBundle cannot be loaded or the Asset cannot be requested, an error will be printed in the console.\n</div>\n\n脚本由一个 `BeginExample()` 函数和被 `Start()` 调用的两个协程组成。 `BeginExample()` 在 `OnGUI()`函数中 被 \"Load Scene\" 按钮调用。`Initialize()` 调用了 `DontDestoryOnLoad()`, 设置了 AssetBundle 的路径和初始化了 AssetBundle 清单。在 `BeginExample()` 方法里，在调用 `Initialize()` 和 `InitializeLevelAsync()` 之间，当前的变体被设置了。这里被设置的值从靠 `OnGUI` 里的 \"Load Scene\" 按钮创建的。在 `InitializeLevelAsync()` 里使用 `AssetBundleManager.LoadLevelAsync()` 调用场景名字和 `isAdditive` 来请求一个场景。如果场景为空，AssetManager 会在控制台显式出错误，然后协程结束。在 `InstantiateGameObjectAsync()` 中资源和 AssetBundle 名字被 `AssetBundleManager.LoadAssetAsync()` 调用。如果调用的资源不为空，它会被实例化。如果 AssetBundle 不能被加载或者资源不能被请求，控制台会打印出错误来。\n\n<div style='display:none'>\nWhat is important to note here is how several Asset, AssetBundles and AssetBundleVariants are being accessed and loaded in this scene, and how these values can be set at run-time.\n</div>\n\n这小结要注意的内容是，多个 资源，AssetBunle 和 AssetBunle 变体怎么被访问和加载进场景里，和怎么样在运行期设置这些值。  \n","source":"_posts/AssetBundleAndABManage_3.md","raw":"title: Unity 5：使用 Asset Bundle 和 Asset Bundle Manager (3)\ndate: 2015-11-12 16:08:22\ntags: AssetBundle\ncategory: Unity\n---\n\n这篇是 Unity 官方教程 [AssetBundles and the AssetBundle Manager](http://unity3d.com/cn/learn/tutorials/topics/scripting/assetbundles-and-assetbundle-manager?playlist=17117) 的翻译， 分三部分，这是第三部分。翻译不到之处请不吝指出。非常谢谢！\n\n译者注：英文太啰嗦了，但是还是坚持的把它翻译完了。因为啰嗦的好处是起码能让概念多复习几遍，更容易记得住。如果读者觉得啰嗦，可以自行执行 **跳读技能** 来阅读译文。\n\n本文的项目连接：<http://u3d.as/jyk>\n<hr>\n\n<div style='display:none'>\n###EXAMPLE 1: LOADING ASSETS\n\n* Enable Simulation Mode using the menu item “Assets/AssetBundles/Simulation Mode”.\n* Open the scene “AssetBundleSample/Scenes/AssetLoader”.\n* Note that the scene is essentially empty and only contains a Main Camera, Directional \n Light and “Loader” GameObject.\n* Enter Playmode.\n* Note that a cube has been loaded into the scene from an AssetBundle.\n\nThis scene is driven by the script “LoadAssets.cs”.\n</div>\n\n### 示例 1：加载资源\n\n* 使用 \"Asset/AssetBundles/Simulation Mode\" 菜单打开模拟模式\n* 打开 \"AssetBundleSample/Scenes/AssetLoader\" 场景\n* 注意场景是个空的只有一个主摄像机，方向光和游戏对象 \"Loader\"\n* 进入 PlayMode\n* 然后会注意到一个 cube 已经从 AssetBundle 加载到场景里面了\n\n这个场景是被 \"LoadAssts.cs\" 脚本驱动的。\n\n<div style='display:none'>\nOpen “AssetBundleSample/Scripts/LoadAssets.cs” in a script editor.\n</div>\n\n在脚本编辑器里面打开脚本 \"AssetBundleSample/Scripts/LoadAssets.cs\"\n\n<div style='display:none'>\nThere are two public variables: public string assetBundleName; and public string assetName;\n</div>\n\n脚本里有两个公共变量： `public string assetBundleName;` 和 `public string assetName;`\n\n<div style='display:none'>\n* public string assetBundleName; holds the name of the AssetBundle to be loaded.\n* public string assetName; holds the name of the Asset to be loaded from the loaded AssetBundle.\n</div>\n\n* **public string assetBundleName;** 保存了要被加载的 AssetBundle 的名字\n* **public string assetName;** 保存了要已加载的 AssetBundle 中加载的资源的名字\n\n<div style='display:none'>\nThe script comprises of a Start() function and two Coroutines, called from Start(). In Initialize(), DontDestroyOnLoad() is called, the path to the AssetBundles is set and the AssetBundle Manifest is initialized. In InstantiateGameObjectAsync() the Asset and AssetBundle name are requested using AssetBundleManager.LoadAssetAsync() and if the Asset requested is not null, it is instantiated.\n</div>\n\n<!--more-->\n\n这个脚本是由一个 `Start()` 函数和被 `Start()` 调用的两个协程组成的。`Initialize()` 调用了 `DontDestoryOnLoad()`, 设置了 AssetBundle 的路径和初始化了 AssetBundle 清单。在 `InstantiateGameObjectAsync()` 中，如果资源不为空，`AssetBundleManager.LoadAssetAsync()` 调用资源和 AssetBundle 的名字。\n\n<div style='display:none'>\nWhat is important to note here, by looking at the Asset “MyCube” in “AssetBundleSample/Assets” is that “MyCube” is dependent upon “MyMaterial” which is then dependent on “UnityLogo”. Only the Asset “MyCube” was requested, and all of the dependent Assets were correctly loaded.\n</div>\n\n重点注意下，在 \"AssetBundleSample/Assets\" 路径下查看 \"MyCube\" 资源，会发现 \"MyCube\" 依赖于 \"MyMaterial\"，而 \"MyMaterial\" 依赖于 \"UnityLogo\"。脚本中只有 \"MyCube\" 资源被调用，但是所有的依赖资源都被正确的加载了。\n\n<div style='display:none'>\nIt is also worth noting how the path to the AssetBundles is being set. This code will set the location for the AssetBundles to the Local AssetBundle Server when the scene is running within the Editor or from a Development Build. (For more information on development builds, please see the documentation on publishing builds.) When working in the Editor while Simulation Mode is enabled, AssetBundles will be simulated and this setting will not be used.\n</div>\n\nAssetBundle 的路径怎么设置也值得注意下。当场景在编辑器中或者从一个开发版 Build 中运行时，这段代码会给本地资源服务器设置 AssetBundle 的位置。（更多关于开发版 Build，请查看[发布 Builds 文档](http://docs.unity3d.com/Manual/PublishingBuilds.html)。）模拟模式开启后，AssetBundle 会在编辑器中被模拟，这个设置将不会被使用。\n\n<div style='display:none'>\nTo understand the use of DontDestroyOnLoad() it is worth understanding that even though this is a very simple script and in this context it is not absolutely necessary, it is present here with the assumption that this script will become the basis of an AssetBundle loader for a more complex project and will need to survive scene changes.\n</div>\n\n对 `DontDestoryOnLoad()` 作用的理解。虽然在这个非常简单的脚本中并不是绝对需要它，但是他的存在是假设这个脚本会作为一个更复杂的项目的 AssetBundle 加载器基础，它需要在场景变化的以后依然存在。\n\n<div style='display:none'>\n###EXAMPLE 2: LOADING SCENES\n\n* Make sure Simulation Mode is enabled by using the menu item “Assets/AssetBundles/Simulation Mode”.\n* Open the scene “AssetBundleSample/Scenes/SceneLoader”.\n* Note that the scene is essentially empty and only contains a Main Camera, Directional Light and “Loader” GameObject.\n* Enter Playmode.\n* Note that a cube and a plane have been loaded into the scene from an AssetBundle.\n\nThis scene is driven by the script “LoadScenes.cs”.\n</div>\n\n### 示例 2：加载场景\n\n* 使用 \"Asset/AssetBundles/Simulation Mode\" 菜单打开模拟模式\n* 开始 \"AssetBundleSample/Scenes/SceneLoader\" 场景\n* 注意场景是个空的只有一个主摄像机，方向光和游戏对象 \"Loader\"\n* 开打 PlayMode\n* 然后会注意到一个 cube 和 plane 已经从 AssetBundle 加载到场景里面了\n\n这个场景被 \"LoadScene.cs\" 脚本驱动着。\n\n<div style='display:none'>\nOpen “AssetBundleSample/Scripts/LoadScenes.cs” in a script editor.\n</div>\n\n在脚本编辑其中打开 \"AssetBundleSample/Scripts/LoadScenes.cs\" 脚本。\n\n<div style='display:none'>\nThere are two public variables: public string sceneAssetBundle; and public string sceneName;\n</div>\n\n脚本里有个两个公共变量：`public string sceneAssetBundle;` 和 `public string sceneName;`\n\n<div style='display:none'>\n* sceneAssetBundle; holds the name of the AssetBundle to be loaded.\n* sceneName; holds the name of the Scene to be loaded from the loaded AssetBundle.\n</div>\n\n* **sceneAssetBundle;** 保持了要加载的 AssetBundle 的名字\n* **sceneName;** 保持了要从已加载的 AssetBundle 里加载的场景的名字\n\n<div style='display:none'>\nThe script comprises of a Start() function and two Coroutines, called from Start(). In Initialize(), DontDestroyOnLoad() is called, the path to the AssetBundles is set and the AssetBundle Manifest is initialized. In InitializeLevelAsync() the Scene name and isAdditive are used to request a Scene using AssetBundleManager.LoadLevelAsync(). If the Scene requested is null, the AssetBundle Manager will display an error in the console and the Coroutine ends.\n</div>\n\n这个脚本是有一个 `Start()` 函数和被 `Start()` 调用的两个协程组成的。`Initialize()` 调用了 `DontDestoryOnLoad()`, 设置了 AssetBundle 的路径和初始化了 AssetBundle 清单。在 `InitializeLevelAsync()` 里使用 `AssetBundleManager.LoadLevelAsync()` 调用场景名字和 `isAdditive` 来请求一个场景。如果场景为空，AssetManager 会在控制台显示出错误，然后协程结束。\n\n<div style='display:none'>\nWhat is important to note here, by looking at the Asset “MyCube” in “AssetBundleSample/Assets” is that “Cube” is dependent upon “MyMaterial” which is then dependent on “UnityLogo”. Only the Scene “TestScene” was requested. “Cube” was included in “TestScene” and all of the dependent Assets were correctly loaded by the AssetBundle Manager.\n</div>\n\n重点注意下，在 \"AssetBundleSample/Assets\" 路径下查看 \"MyCube\" 资源，会发现 \"MyCube\" 依赖于 \"MyMaterial\"，而 \"MyMaterial\" 依赖于 \"UnityLogo\"。只有 \"TestScene\" 场景被请求了。但在 “TestScene” 中的 \"Cube\" 和所有依赖的资源都被 AssetBundle Manager 正确的加载了。\n\n<div style='display:none'>\nIt is also worth noting how the path to the AssetBundles is being set. This code will set the location for the AssetBundles to the Local AssetBundle Server when the scene is running within the Editor or from a Development Build. (For more information on development builds, please see the documentation on publishing builds.) When working in the Editor while Simulation Mode is enabled, AssetBundles will be simulated and this setting will not be used.\n</div>\n\nAssetBundle 的路径怎么设置也值得注意下。当场景在编辑器中或者从一个开发版 Build 中运行时，这段代码会给本地资源服务器设置 AssetBundle 的位置。（更多关于开发版 Build，请查看 [发布 Builds 文档](http://docs.unity3d.com/Manual/PublishingBuilds.html)。）模拟模式开启后，AssetBundle 会在编辑器中被模拟，这个设置将不会被使用。\n\n<div style='display:none'>\nTo understand the use of DontDestroyOnLoad() it is worth understanding that even though this is a very simple script and in this context it is not absolutely necessary, it is present here with the assumption that this script will become the basis of an AssetBundle loader for a more complex project and will need to survive scene changes.\n</div>\n\n对 `DontDestoryOnLoad()` 作用的理解。虽然在这个非常简单的脚本中并不是绝对需要它，但是他的存在是假设这个脚本会作为一个更复杂的项目的 AssetBundle 加载器基础，它需要在场景变化的以后依然存在。\n\n<div style='display:none'>\n###EXAMPLE 3: VARIANTS\n\nTo work with AssetBundle Variants, the AssetBundles will need to be built, as AssetBundle Variants do not work with Simulation Mode. To build AssetBundles and their Variants, make sure all of the Assets are properly assigned to an AssetBundle Name and, if being used as an AssetBundle Variant, an appropriate AssetBundle Variant Name needs to be assigned as well.\n</div>\n\n### 示例 3：变体\n\n要使用 AssetBundle 变体，需要编译 AssetBundle, 因为模拟模式下不支持它。在编译 AssetBundle 和它的变体钱，确保所有的资源以及被正确地指定 AssetBundle 名字和如果要被 AssetBundle 变体利用到的话，AssetBundle 变体的名字也要指定。\n\n![variant name hd](http://unity3d.com/sites/default/files/variant_name_hd.png)\n\n<div style='display:none'>\ndescriptionAn Asset with both AssetBundle Name and AssetBundle Variant Name set.\n</div>\n\n<small>同时拥有 AssetBundle 名字和 AssetBundle 变体名字的资源</small>\n\n<div style='display:none'>\nWhen all Assets have been assigned to an AssetBundle or AssetBundle Variant, AssetBundles can be built by selecting “Assets/AssetBundles/Build AssetBundles”.\n</div>\n\n当所有的资源都指定到 AssetBundle 或者 AssetBundle 变体后，选择 \"Assets/AssetBundles/Build AssetBundles\" 菜单来编译它们。\n\n![build assetbundles](http://unity3d.com/sites/default/files/build_assetbundles.png)\n\n<div style='display:none'>\ndescriptionAssets/AssetBundles/Build AssetBundles\n</div>\n\n<small>_Assets/AssetBundles/BuildAssetBundles_</small>\n\n<div style='display:none'>\nBy default, the AssetBundles will be optimized for the current build target and built into a folder called “AssetBundles” in the Project’s root directory, grouped by build target.\n</div>\n\n默认情况下，AssetBundle 会根据当前的平台优化，并编译进项目跟目录下的 \"AssetBundles\" 文件夹内，并按平台分组。\n\n<div style='display:none'>\nFor ease of workflow and to use these newly built AssetBundles without deploying them, the Local AssetBundle Server should be enabled. Use “Assets/AssetBundles/Local AssetBundle Server” to enable the Local AssetBundle Server.\n</div>\n\n为了简化流程，不部署新编译出来的 AssetBundle 远程，需要开启本地资源服务器。通过 “Assets/AssetBundles/Local AssetBundle Server” 可以开启本地资源服务器。\n\n![local assetbundles server](http://unity3d.com/sites/default/files/local_assetbundle_server.png)\n\n<div style='display:none'>\ndescriptionStarting the Local AssetBundle Server\n</div>\n\n<small>_启动本地资源服务器_</small>\n\n<div style='display:none'>\nThis local server should run seamlessly, but, as with any network communication, the local server will have the same restrictions as any network communication and may be subject to permissions requirements, firewalls, and other limitations. Be aware that the Local AssetBundle Server is enabling a Local AssetBundle Server that is set to the default IP Address and Port, which is usually http://192.168.1.115:7888/. This information is temporarily stored in the file AssetBundleManager/Resources/AssetBundleServerURL. This information will be set or changed automatically by the AssetBundleManager, and should not need any attention by the user.\n</div>\n\n本地资源服务器应该想其他任何网络连接一样受限制，可能是权限需求，防火墙和其他限制。本地资源服务器启动时会被设置到默认 IP 地址和端口的本地资源访问的服务器，通常是 http://192.168.1.115:7888/. 这个只是暂时的，它被存储在 **AssetBundleManager/Resources/AssetBundleServerURL** 文件里面。这些信息会被 AssetBundleManager 设置或自动改变，用户不需要关注它们。\n\n![assetbundle server url](http://unity3d.com/sites/default/files/assetbundle_serer_url.png)  \n\n<div style='display:none'>\ndescriptionAssetBundleServerURL contains the current URL and Port\n</div>\n\n<small>_包含当前 URL 和 端口的 AssetBundleServerURL_</small>\n\n<div style='display:none'>\nWhen the the Local AssetBundle Server is running, the built AssetBundles can be tested locally.\n</div>\n\n当本地资源服务器运行的时候，编译后 AssetBundle 可以被本地测试。\n\n<div style='display:none'>\n* Make sure Simulation Mode is disabled by using the menu item “Assets/AssetBundles/Simulation Mode”.\n* Make sure the Local AssetBundle Server is enabled by using the menu item “Assets/AssetBundles/Local AssetBundle Server”.\n* Open the scene “AssetBundleSample/Scenes/VariantLoader”.\n* Note that the scene is essentially empty and only contains a Main Camera, Directional Light and “Loader” GameObject.\n* Enter Playmode.\n* Choose “Load SD”.\n* Note that a cube and a Sprite have been loaded into the scene from an AssetBundle.\n* Exit Playmode.\n* Enter Playmode.\n* Choose “Load HD”.\n* Note that the same cube and Sprite have been loaded in the scene, but the Material, its dependent texture and the Sprite texture have been loaded from a different AssetBundle. The materials have different colors and the images are at a significantly higher resolution.\n</div>\n\n* 选择 “Assets/AssetBundles/Simulation Mode” 确保模拟模式被禁用了\n* 选择 \"Assets/AssetBundles/Local AssetBundle Server\" 确保本地资源服务器开启\n* 打开 \"AssetBundleSample/Scenes/VariantLoader\"\n* 注意场景是个空的只有一个主摄像机，方向光和游戏对象 \"Loader\"\n* 退出 PlayMode (如果在 PlayMode 下)\n* 打开 PlayMode\n* 选择 \"Load HD\"\n* 注意同一个 Cube 和 Sprite 加载进场景了，但是材质和他依赖的独立纹理和 Sprite 纹理却从不同的 AssetBundle 加载。这些材质有不同的颜色，图片有更高的分辨率。\n\n<div style='display:none'>\nThis scene is driven by the script “LoadVariants.cs”.\n</div>\n\n这个场景是被 \"LoadVariant.cs\" 脚本驱动的。\n\n<div style='display:none'>\nOpen “AssetBundleSample/Scripts/LoadVariants.cs” in a script editor.\n</div>\n\n从编辑器中打开 \"AssetBundleSample/Scripts/LoadVariants\"。\n\n<div style='display:none'>\nThis script is nearly identical to “LoadScenes.cs”. The main differences are the variable identifying the AssetBundle Variant to be loaded, and code to set the active Variant. There is additional code to create the UI Buttons.\n</div>\n\n这个脚本跟 \"LoadScenes.cs\" 几乎差不多。主要的区别就是用来区别需要加载的 AssetBundle 变体的变量和设置当前变体的代码。还有用来创建 UI 按钮的额外的代码。\n\n<div style='display:none'>\n* public string variantSceneAssetBundle; holds the name of the AssetBundle to be loaded.\n* public string variantSceneName; holds the name of the Scene to be loaded from the loaded AssetBundle.\n* private string[] activeVariants; holds the AssetBundleVariantNames to identify which AssetBundle Variants to load.\n* private bool bundlesLoaded; is used to hide the UI when the Assets have been loaded.\n</div>\n\n* **public string variantSceneAssetBundle;** 保存要加载的 AssetBundle 的名字\n* **public string variantSceneName;** 保存要从已加载的 AssetBundle 中加载的场景名字\n* **private string[] activeVariants;** 保存用来区分需要加载的 AssetBundle 变体的 `AsssetBundleVariantNames`\n* **private bool bundlesLoaded** 用来在加载完资源之后隐藏 UI\n\n<div style='display:none'>\nThe script comprises of a BeginExample() function and two Coroutines, called from Start(). BeginExample is called by the “Load HD” or “Load SD” button in OnGUI. In Initialize(), DontDestroyOnLoad() is called, the path to the AssetBundles is set and the AssetBundle Manifest is initialized. In BeginExample(), between calling Initialize() and InitializeLevelAsync(), the active Variants are set. The value being set here is created by the “Load HD” or “Load SD” button in OnGUI. In InitializeLevelAsync() the Scene name and isAdditive are used to request a Scene using AssetBundleManager.LoadLevelAsync(). If the Scene requested is null, the AssetBundle Manager will display an error in the console and the Coroutine ends.\n</div>\n\n脚本由一个 `BeginExample()` 函数和被 `Start()` 调用的两个协程组成。 `BeginExample()` 在 `OnGUI()`函数中 被 `Load HD` 或者 `Load SD` 按钮调用。`Initialize()` 调用了 `DontDestoryOnLoad()`, 设置了 AssetBundle 的路径和初始化了 AssetBundle 清单。在 `BeginExample()` 方法里，在调用 `Initialize()` 和 `InitializeLevelAsync()` 之间，当前的变体被设置了。这里被设置的值从靠 `OnGUI` 里的 \"Load HD\" 或者 \"Load SD\" 按钮创建的。在 `InitializeLevelAsync()` 里使用 `AssetBundleManager.LoadLevelAsync()` 调用场景名字和 `isAdditive` 来请求一个场景。如果场景为空，AssetManager 会在控制台显式出错误，然后协程结束。\n\n<div style='display:none'>\nWhat is important to note here is how AssetBundle Variants are loaded. The array activeVariants contains a list of all of the possible Variant Names that are “active”. This array is used to set the AssetBundleManager.ActiveVariants property. When loading an AssetBundle that has a variant, the AssetBundle Manager will choose the AssetBundles that have “active” Variant Names in the ActiveVariants property. In the current example the ActiveVariants property contains only one element; the Active Variant is either “sd” or “hd”. It is possible to have multiple entries in the ActiveVariants property. For example there could be the following AssetBundles: my-material.sd, my-material.hd, my-text.english, my-text.danish, my-text.catalan, my-text.welsh. The ActiveVariants property could contain both “hd” and “danish”, or “sd” and “english” and so on for any of the other possible combinations of these Variant Names. This way, the AssetBundle Manager can load hd/sd images and the language choices separate from each other.\n</div>\n\n这里需要重视的是 AssetBundle 变体是怎么样加载的。**activeVariants** 数组包含了所有可能的 “激活的” 变量名列表。这个数组用来设置 **AssetBundleManager.ActiveVariants** 属性。当加载一个含有变体的 AssetBundle 时，AssetBundle Manager 将会选择在 **ActiveVariants** 属性里含有 “激活” 的变体名字的 AssetBundle。当前的示例中，**ActiveVariants** 属性只包含一个元素。当前的变体要么是 \"sd\"，要么是 “hd”。在 **ActiveVariants** 属性中有多个实体是有可能的。比如，可能有下面一些 AssetBundle: my-material.sd，my-material.hd， my-text.english，my-text.catalan，my-text.welsh。**ActiveVariants** 属性可以包含 “hd” 和 “danish” 两者或者 “sd” 和 \"english\" 等等任何可以有其他可能组合的变体名。这种方式下，AssetBundle Manager 分开可以加载 hd/sd 图片和语言选择。\n\n<div style='display:none'>\nThere are some rules to this that are worth noting. If, for some reason, there are AssetBundles that have Variants assigned, but no Active Variant Name is set in the ActiveVariants property- for example neither “sd” nor “hd” are in the ActiveVariants property for the current example - the AssetBundle Manager will simply use the first AssetBundle it finds with the correct AssetBundle Name, ignoring the Variant Name. If, for some reason, there are multiple Active Variant Names in the ActiveVariants property for the same set of AssetBundles - for example, both “sd” and “hd” are in the ActiveVariants property for the current example - the AssetBundle Manager will choose the AssetBundle Variant whose Variant Name comes first in the ActiveVariants property.\n</div>\n\n有些规则值得注意下。如果，因为一些因素，有一些指定了变体的 AssetBundle，但是在 **ActiveVariants** 属性里没有 “激活” 的变体名 - 比如当前例子中的 “sd” 或者 “hd” 不在 **ActiveVraiants** 属性中 - AssetBundle Manager 将会简单的选择第一个它发现的正确名字的 AssetBundle 而忽略变体名。再如果，又因为一些因素，在 **ActiveVariants** 属性里对同一个 AssetBundle 集合有多个 “激活” 的变体名 - 比如， 在当前的例子里，“sd” 和 “hd” 都在 **ActiveVariants** 属性里 - AssetBundle Manager 将选择在 **ActiveVariants** 属性中的第一个变体名。\n\n<div style='display:none'>\n###EXAMPLE 4: TANKS EXAMPLE\n\nThis more complex example will sum up everything in this article, including loading a scene from an AssetBundle and loading AssetBundle Variants for resolution, content and localization.\n</div>\n\n### 示例 4：坦克示例\n\n这个更复杂的示例将包括这篇文章中的所有内容，包括从 AssetBundle 中加载场景和为分辨率，内容和位置加载 AssetBundle 变体。\n\n<div style='display:none'>\n* Make sure Simulation Mode is disabled by using the menu item “Assets/AssetBundles/Simulation Mode”.\n* Make sure the Local AssetBundle Server is enabled by using the menu item “Assets/AssetBundles/Local AssetBundle Server”.\n* Open the scene “AssetBundleSample/Scenes/TanksLoader”.\n* Note that the scene is essentially empty and only contains only the “Loader” GameObject.\n* Enter Playmode.\n* Select one choice for resolution, style and language.\n* Note that the assets loaded are the options chosen in the UI.\n* Note that if none of the choices are explicitly chosen, the AssetBundleManager will choose one automatically (as per the rules above) and print a warning in the console.\n</div>\n\n* 选择 “Assets/AssetBundles/Simulation Mode” 确保模拟模式被禁用了\n* 选择 \"Assets/AssetBundles/Local AssetBundle Server\" 确保本地资源服务器开启\n* 打开 \"AssetBundleSample/Scenes/TanksLoader\"\n* 注意场景是个空的只有一个主摄像机，方向光和游戏对象 \"Loader\"\n* 进入 PlayMode\n* 选择一个分辨率，风格和语言\n* 注意在 UI 里的选择项就是加载的资源\n* 如果没有显式的选择一个，AssetBundleManager 将自动选择（基于上面的原则）一个并且在命令行输出一个警告。\n\n<div style='display:none'>\nThis scene is driven by the script “LoadTanks.cs”.\n</div>\n\n场景靠 \"LoadTanks.cs\" 脚本驱动。\n\n<div style='display:none'>\nOpen “AssetBundleSample/Scripts/LoadTanks.cs” in a script editor.\n</div>\n\n在编辑器里面打开 “AssetBundleSample/Scripts/LoadTanks.cs” 脚本。\n\n<div style='display:none'>\nThis script is very similar to “LoadScenes.cs” and “LoadAssets.cs”. This script uses code to both load a scene which depends upon a variant and to load an additional GameObject that also depends upon a variant. There is additional code to create the UI Buttons.\n</div>\n\n这个脚本与 “LoadScenes.cs” 和 \"LoadAssets.cs\" 非常像。脚本使用代码去加载依赖变体的场景和一样依赖变体的额外的游戏对象。也有一些额外的代码创建 UI 按钮。\n\n<div style='display:none'>\n* public string sceneAssetBundle; holds the name of the Scene bearing AssetBundle to be loaded.\n* public string sceneName; holds the name of the Scene to be loaded from the loaded AssetBundle.\n* public string textAssetBundle; holds the name of the Text Asset bearing AssetBundle to be loaded.\n* public string textAssetName; holds the name of the Text Asset to be loaded from the loaded AssetBundle.\n* private string[] activeVariants; holds the ActiveVariants to pass to the AssetBundleManager.\n* private bool bundlesLoaded; is used to hide the UI when the Assets have been loaded.\n* private bool sd, hd, normal, desert, english, danish; holds values used to set the ActiveVariant.\n* private string tankAlbedoStyle, tankAlbedoResolution, language; holds values used to set the ActiveVariant.\n</div>\n\n* **public string sceneAssetBundle;** 保存携带场景的 AssetBundle 的名字\n* **public string sceneName;** 保存要从已加载的 AssetBundle 中加载的场景名字。\n* **public string textAssetBundle;** 保存携带文字资源的 AssetBundle 的名字\n* **public string textAssetName;** 保存要从已加载的 AssetBundle 中加载的文字资源的名字\n* **private string activeVariants;** 保存要传给 AssetBundleManager 的 `ActiveVariants`\n* **private bool bundlesLoaded;** 用来资源加载之后隐藏 UI\n* **private bool sd, hd, normal, desert, englisth, danish;** 保存用来设置 `ActiveVariants` 的值\n* **private string tankAlbedoStyle, tankAlbedoResolution, languge;** 保存用来设置 `ActiveVariants` 的值\n\n<div style='display:none'>\nThe script comprises of a BeginExample() function and three Coroutines, called from Start(). The BeginExample() function is called by the button “Load Scene” in OnGUI(). In Initialize(), DontDestroyOnLoad() is called, the path to the AssetBundles is set and the AssetBundle Manifest is initialized. In BeginExample(), between calling Initialize() and InitializeLevelAsync(), the active Variants are set. The value being set here is created by the button “Load Scene” based on the user input in OnGUI(). In InitializeLevelAsync() the Scene name and isAdditive are used to request a Scene using AssetBundleManager.LoadLevelAsync(). If the Scene requested is null, the AssetBundle Manager will display an error in the console and the Coroutine ends. In InstantiateGameObjectAsync() the Asset and AssetBundle name are requested using AssetBundleManager.LoadAssetAsync() and if the Asset requested is not null, it is instantiated. If the AssetBundle cannot be loaded or the Asset cannot be requested, an error will be printed in the console.\n</div>\n\n脚本由一个 `BeginExample()` 函数和被 `Start()` 调用的两个协程组成。 `BeginExample()` 在 `OnGUI()`函数中 被 \"Load Scene\" 按钮调用。`Initialize()` 调用了 `DontDestoryOnLoad()`, 设置了 AssetBundle 的路径和初始化了 AssetBundle 清单。在 `BeginExample()` 方法里，在调用 `Initialize()` 和 `InitializeLevelAsync()` 之间，当前的变体被设置了。这里被设置的值从靠 `OnGUI` 里的 \"Load Scene\" 按钮创建的。在 `InitializeLevelAsync()` 里使用 `AssetBundleManager.LoadLevelAsync()` 调用场景名字和 `isAdditive` 来请求一个场景。如果场景为空，AssetManager 会在控制台显式出错误，然后协程结束。在 `InstantiateGameObjectAsync()` 中资源和 AssetBundle 名字被 `AssetBundleManager.LoadAssetAsync()` 调用。如果调用的资源不为空，它会被实例化。如果 AssetBundle 不能被加载或者资源不能被请求，控制台会打印出错误来。\n\n<div style='display:none'>\nWhat is important to note here is how several Asset, AssetBundles and AssetBundleVariants are being accessed and loaded in this scene, and how these values can be set at run-time.\n</div>\n\n这小结要注意的内容是，多个 资源，AssetBunle 和 AssetBunle 变体怎么被访问和加载进场景里，和怎么样在运行期设置这些值。  \n","slug":"AssetBundleAndABManage_3","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkaww00342quoyucdfeiv"},{"title":"Unity 5：使用 Asset Bundle 和 Asset Bundle Manager (2)","date":"2015-11-11T12:28:07.000Z","_content":"\n这篇是 Unity 官方教程 [AssetBundles and the AssetBundle Manager](http://unity3d.com/cn/learn/tutorials/topics/scripting/assetbundles-and-assetbundle-manager?playlist=17117) 的翻译， 分三部分，这是第二部分。翻译不到之处请不吝指出。非常谢谢！\n<hr>\n\n<div style='display:none'>\n##WORKING WITH ASSETBUNDLES AND THE ASSETBUNDLE MANAGER\n###INTRODUCTION\n</div>\n\n### 介绍\n\n<div style='display:none'>\nOne of the key areas of effort in working with AssetBundles is the building and testing of bundles. Often, during development, the Assets themselves are changing regularly. Normally this would require regularly building AssetBundles, uploading them to a host and testing these remotely hosted AssetBundles through a network connection with the working project.\n</div>\n\n使用 AssetBundle 中一个关键的地方是编译和测试 bundles。一般情况下，资源在开发过程中是会变的。正常地，可能需要要求有规律的编译 AssetBundle, 上传到服务器和然后通过网络连接在当前项目中测试远程的 AssetBundle.\n\n<div style='display:none'>\nThis section focuses on using the AssetBundle Manager when working with AssetBundles. The AssetBundle Manager provides a High-level API for a massively improved workflow compared to manipulating AssetBundles directly with the foundation Low-level API.\n</div>\n\n这节主要关注 AssetBundle Manager 使用 AssetBundle。相对利用基础的低层 API 来操作 AssetBundle, AssetBundle Manager 为太幅改进的流程提供了高层的 API。\n\n<div style='display:none'>\n###WORKING WITH ASSETBUNDLES\n\nThe steps of working with AssetBundles in the editor fall roughly into these steps: - Organizing & Setting-up AssetBundles in the editor. - Building AssetBundles. - Uploading AssetBundles to external storage. - Downloading AssetBundles at run-time. - Loading objects from AssetBundles.\n</div>\n\n### 使用 AssetBundle  \n\n在编辑器中使用 AssetBundle 的大体步骤：- 在编辑器中组织 & 设置 AssetBundle。 - 编译 AssetBundle。 - 上传 AssetBundle 到外部存储 - 运行期下载 AssetBundle - 从 AssetBundle 加载对象。  \n\n<div style='display:none'>\nIt is worth noting that some AssetBundles can be stored locally for immediate loading as a default setup. This is useful to protect against an install where the application cannot reach remote external storage to download desired AssetBundles. For example, the application would load default language and localization data from a local AssetBundle when the application has no access to downloadable content.  \n</div>\n\n值得注意的一点，有些 AssetBundle 可以存储在本地作为即时加载的默认设置。这样对不能访问远程存储下载期望的资源的安装特别有用。比如，当不能访问可下载内容的时候，程序可以从本地的 AssetBundle 中加载默认的语言和本地化数据。\n\n<div style='display:none'>\nIt is also worth noting that an AssetBundle contains platform ready Assets. The contents of an AssetBundle have been compiled and optimized for the current target platform according to the Import Settings and the Target Platform set in the Build Settings. Because of this, AssetBundles should be built for each target platform.\n</div>\n\n值得注意的是一个 AssetBundle 包括平台准备资源。AssetBundle 的内容会根据 Import Settings 里设置的当前平台和 Build Settings 里面的目标平台做编译和优化。因为这样，需要为每个平台编译 AssetBundle。\n\n<div style='display:none'>\nIn the following simple scene, one legitimate way of organizing the scene into AssetBundles for the greatest versatility would be to have a base scene, which would include the ground, dunes, rock columns, tree and cactus. This scene could be allowed to include the dependent Materials, as these are fairly simple and would not likely need to be changed depending upon resolution or device. The tank model would be in an AssetBundle of it’s own, which would allow changes or updates to the player Asset. Two additional AssetBundles would be used to complete the tank GameObject. These would be the dependent Materials in one, and the dependent Texture in another. This would allow for changes and updates to the texture and material as needed with the least amount of trouble. This particular organization will also allow for alternative versions, or variants, of these Assets to be loaded from a choice of AssetBundle Variants on demand depending upon need, such as platform, location or resolution of the target device.\n</div>\n\n在接下来的简单的场景中, 为了AssetBundle 最大的用途，有个合理的组织 AssetBundle 场景内容的方式就是把草地，沙丘，岩石柱，树和仙人掌都打包到一个基础场景里面。这个基础场景可能包含依赖的材质，因为他们很简单，以后不太可能会基于分辨率或者设备而改变。坦克模型将需要一个自己的 AssetBundle, 这样允许改变或者更新玩家资源。为了实现坦克游戏对象，还需要两个额外的 AssetBundle. 一个是独立的材质资源，另外是独立的纹理资源。这将会给需要给纹理和材质的更改和更新时带来最小的麻烦。这个特别的组织方式也允许有其他版本或者基于平台、位置或者目标设备分辨率选择 AssetBundle 的变体。\n<!--more-->\n\n![simpleScene](http://unity3d.com/sites/default/files/simple_scene.png) \n<div style='display:none'>\n<small>_A Simplified Example Scene_</small>\n</div>\n<small>_一个简单的示例场景_</small>\n\n<div style='display:none'>\nTo organize and setup AssetBundles in the editor, the Assets themselves need to be assigned to an AssetBundle. When viewing an Asset, the AssetBundle Name and AssetBundle Variant can be found at the bottom of the preview window in the Inspector. The preview window must be open to see them.\n</div>\n\n为了在编辑器中组织和设置 AssetBundle, 资源需要指定一个 AssetBundle。 查看资源的时候，可以在 Inspector 的底部查看 AssetBundle 的名字和变体。在打开的预览窗口中能看到他们。\n\n![assetbundleName](http://unity3d.com/sites/default/files/assetbundlename.png)\n\n<div style='display:none'>\ndescriptionAn Asset that has not been assigned to an AssetBundle.\n</div>\n\n<small>一个还没有指定 AssetBundle 的资源</small>  \n\n<div style='display:none'>\nTo assign an Asset to an AssetBundle, use the AssetBundle Name drop down menu. Here, either create a new AssetBundle name or choose an existing one. AssetBundle Variants and the AssetBundle Variant Name menu will be covered later in this lesson.\n</div>\n\n使用 AssetBundle 名字下拉菜单来给资源指定 AssetBundle。在这可以创建一个新的 AssetBundle 或者选择已经存在的 AssetBundle。教程的后面会谈到 AssetBundle 变体和 AssetBundle 变体名字。\n\n![abmenu2](http://unity3d.com/sites/default/files/ab-menu2.png) \n\n\n<div style='display:none'>\ndescriptionAssigning an Asset to an AssetBundle\n</div>\n\n<small>_给一个资源指定 AssetBundle_</small>  \n\n<div style='display:none'>\nTo create a new AssetBundle, choose New and a text field will become active to name a new AssetBundle.\n</div>\n\n创建新的 AssetBundle, 选择 **New**，文本区域将会激活用来命名新的 AssetBundle。\n\n<div style='display:none'>\nTo remove an Asset from an AssetBundle, choose None and the Asset will now be unassigned.\n</div>\n\n从 AssetBundle 中删除资源，选择 **None**，资源现在就变成为没有指定 AssetBundle 了。\n\n<div style='display:none'>\nTo remove an AssetBundle Name from the list, all Assets assigned to that AssetBundle Name must be removed from that AssetBundle name, and then “Remove Unused Names” can be selected. This will remove all unused AssetBundle Names.\n</div>\n\n要从列表中删除一个  AssetBundle 名字，需要把所有指定到这个 AssetBundle 中的资源从 AssetBundle 名字中删除，然后选择 **Remove Unused Names**。这会删除所有没有被使用的 AssetBundle 名字。\n\n![creat a new name](http://unity3d.com/sites/default/files/creating_a_new_ab_name.png)\n\n<div style='display:none'>\ndescriptionCreating a new AssetBundle Name (Note Illegal Capital “T” in the AssetBundle Name)\n</div>\n\n<small>_创建一个新的 AssetBundle 名字（注意 大写的 \"T\" 在 AssetBundle 名字中非法）_</small>\n\n<div style='display:none'>\nAssets will be assigned to the AssetBundle selected in the AssetBundle Name menu. AssetBundle names are strictly lower case. If an uppercase letter is used, as in the example above, Unity will replace the capital letter with a lowercase one.\n</div>\n\n资源将会指定到在 AssetBundle 名字菜单中选择的 AssetBundle。AssetBundle 名字是严格小写的。如果使用了大写字母，就像上面的例子一样，Unity 将会用小写字母来代替。\n\n![tank assign to ab](http://unity3d.com/sites/default/files/tank_assigned_to_ab.png)  \n<div style='display:none'>\ndescriptionThe Tank Asset is now assigned to the AssetBundle “tank”.\n</div>\n\n<small>_坦克资源现在已经被指定到 \"tanke\" AssetBundle 上了_</small>\n\n<div style='display:none'>\nNote how the AssetBundle Name has been corrected to lowercase letters automatically.\n</div>\n\n注意 AssetBundle 的名字已经被自动纠正到了小写字母。\n\n<div style='display:none'>\n###USING ASSETBUNDLE VARIANTS\n\nBeing able to load Assets on demand from AssetBundles allows for many creative solutions to difficult issues related to loading, storing and updating Assets. One specific case where AssetBundles can help is the need to load a different set of Assets into a project depending upon the device, location or user preference. This is done by using AssetBundle Variants.\n</div>\n\n### 使用 AssetBundle 变体\n\n从 AssetBundle 中按需加载资源的可能让很多困难问题有很多创意的解决方案，比如加载，存储和更新资源。一个典型的 AssetBunle 能有帮助的用例就是需要基于设备，位置或者用户习惯加载资源的项目。这个可以用 AssetBundle 变体来实现。\n\n<div style='display:none'>\nAssetBundle Variants deliver different versions of the same Asset to be assigned to an object in the scene. AssetBundle Variants completely remap different Assets to the same object. Only one Variant of an AssetBundle is ever loaded at any given time. Asset Variants can be created for many different situations. Asset Variants can be different resolutions of the same Asset: Standard Definition graphics vs High Definition graphics or models with different polycounts. Asset Variants can be created with different content for an object: text, images, textures and typefaces can be different for each supported language, region or theme. These Assets are saved in a series of identically constructed AssetBundles and identified by their Variant Name.\n</div>\n\nAssetBundle 变体提供场景中指定到一个对象上同一个资源的不同版本。AssetBundle 变体完全是重新映射不同的资源到同一个对象上。在同一时间只能有一种 AssetBundle 被加载。我们可以为不同的方案创建资源变体。同一个资源可以有不同分辨率的资源变体：标准图形 VS 高清图形或者不同多边形数的模型。可以为一个对象创建不同内容的资源变体：为每个支持语言，区域或主题的文字，图片，纹理和字体。这些资源都可以存储到一系列统一构建的 AssetBundle 中并用名字来区分他们。\n\n<div style='display:none'>\nFor this to work, all of the matching AssetBundle Variants must be constructed and named identically. The only difference between AssetBundle Variants are the individual Assets contained in the AssetBundle and the AssetBundle Variant Name which is appended to the AssetBundle Name to identify it. To be a compatible AssetBundle Variant, the folder structure and contents of the AssetBundle must match. All the Assets need to be present in each AssetBundle, and must have the same name and in the same hierarchical order.\n</div>\n\n为了这些可以工作，所有匹配的 AssetBundle 变体必须构建和命名都一样。AssetBundle 变体间仅仅不同的地方就是 AssetBundle 内的资源和 加到 AssetBudle 后面的用来区分 AssetBundle 变体的名字。为了 AssetBundle 变体的兼容性，AssetBundle 的文件夹结构和内容需要匹配。所有的资源都要在 AssetBundle 里，具有相同的名字和在相同的分级顺利（hierarchial order）。\n\n<div style='display:none'>\nThe following example can be found in the AssetBundle Sample.\n</div>\n\n下面的示例可以在  AssetBundle 示例中找到。\n\n![variant structure](http://unity3d.com/sites/default/files/matching_variant_structure.png) \n\n<div style='display:none'>\ndescriptionExample of AssetBundle Variants.\n</div>\n\n<small>_AssetBundle 变体示例_</small>\n\n<div style='display:none'>\nIn the above example, both folders - MyAssets-HD and MyAssets-SD - have been assigned to the AssetBundle Name “myassets”. Each then has been given an AssetBundle Variant Name to identify it, in these cases hd and sd, respectively. Note how the two sets of Assets have the same name and share the same hierarchical structure. As the parent directory has been assigned to an AssetBundle and none of the children have been assigned to an AssetBundle, all of the children will be added to the parent’s AssetBundle when it is built.\n</div>\n\n在上面的例子中，**MyAsset-HD** 和 **MyAssets-SD** 两个文件夹都被指定了 AssetBundle 名字 \"myassets\"。每个都给予了 AssetBundle 变体名字去区分他们，在这里分别是 `hd` 和 `sd`。注意两个资源集都有相同的名字和分级结构。父目录被指定到了一个 AssetBundle 而它所有的子对象都没有指定到 AssetBundle 中，当父目录被编译的时候，所有的子对象都会加到父目录的 AssetBundle 中。\n\n![variant name hd](http://unity3d.com/sites/default/files/variant_name_hd.png) \n\n<small>_MyAsset-HD 设置了 AssetBundle 名字和变体名字_</small>\n\n![variant name sd](http://unity3d.com/sites/default/files/variant_name_sd.png)\n\n<small>_MyAssets-SD 设置了 AssetBundle 名字和变体名字_</small>\n\n<div style='display:none'>\t\ndescriptionMyAssets-HD with AssetBundle Name and AssetBundle Variant Name set.\n\ndescriptionMyAssets-SD with AssetBundle Name and AssetBundle Variant Name set.\n</div>\n\n<div style='display:none'>\nIt is worth noting that a hierarchical menu structure can be created for the AssetBundle Names. Note in the above images the AssetBundle Name has a path: variant/myassets. This will create a new menu item as a parent, called “variants” for the AssetBundle Name “myassets”.\n</div>\n\n注意，我们可以为 AssetBundle 名字创建层级菜单。上面的图片中 AssetBundle 名字有个路径：variant/myassets。 这会为 \"myassets\" 名字的 AssetBundle 创建一个 \"variants\" 名字为父级的新菜单项。\n\n<div style='display:none'>\t\ndescriptionAssetBundle Name with hierarchical menus.\n</div>\n\n<small>_层级菜单的 AssetBundle 名字_</small>\n\n<div style='display:none'>\nOnce Assets have been assigned to AssetBundles, the AssetBundles will need to be built and tested.\n</div>\n\n一旦资源被指定到 AssetBundle, 这个 AssetBundle 将要被编译和测试。\n\n<div style='display:none'>\n###USING THE ASSETBUNDLE MANAGER\n\nUnity has a Low-level API to work with AssetBundles directly. This tutorial will not cover the Low-level API. For more information on the Low-level AssetBundle API, please see the information linked below.\n</div>\n\n### 使用 AssetBundle Manager\n\nUnity 提供了直接使用 AssetBundle 的底层 API. 但是这篇教程不会覆盖这些底层 API。关于底层 API 的更多信息，请阅读这个链接。\n\n<div style='display:none'>\nFor building, testing and managing AssetBundles, this tutorial will concentrate on the AssetBundle Manger and its High-level API.\n</div>\n\n关于编译，测试和管理 AssetBundle，这篇教程会专注到 AssetBundle Manager 和它的高层 API 上。\n\n<div style='display:none'>\nThe AssetBundle Manager is a downloadable package that can be installed in any current Unity project and will provide a High-level API and improved workflow for managing AssetBundles. The AssetBundle Manager can be downloaded here. To use the AssetBundle Manager in a project, simply add the AssetBundle Manager folder to the project’s Assets folder.\n</div>\n\nAssetBundle Manager 是一个可下载的，可以安装在当前 Unity 项目中的包，它提供高层 API 和改进了 AssetBundle 的流程。AssetBundle Manager 可以再 [这里](http://u3d.as/jyk) 下载。要在项目中使用 AssetBundle Manager，简单的将它加到当前的项目的 **Asset** 文件夹中。\n\n<div style='display:none'>\nBuilding and testing AssetBundles can be a pain-point during development. Assets are often changing on a regular basis. With the Low-level AssetBundle API, testing would require regular building and uploading of the AssetBundles to a remote host and testing these remotely hosted AssetBundles through a network connection with the working project. The AssetBundle Manager allows for a massively improved workflow compared to manipulating AssetBundles directly with the Low-level API. The AssetBundle Manager helps manage the key steps in building and testing AssetBundles. The key features provided by the AssetBundle Manager are a Simulation Mode, a Local AssetBundle Server and a quick menu item to Build AssetBundles to work seamlessly with the Local AssetBundle Server.\n</div>\n\n编译和测试 AssetBundle 可能是在开发过程中的一个痛点。资源会时常的改变。使用底层 AssetBunle API 时，测试需要规律的编译和上传 AssetBundle 到一个远程服务器上，然后从当我的项目建立一个网络连接来测试远程服务器上的 AssetBundle。相对于直接操作 AssetBundle 的底层 API, AssetBundle Manager 大幅度的优化了流程。AssetBundle Manager 提供的最核心的功能是一个模拟模式，一个本地的 AssetBundle 服务器和一些快捷的菜单去编译 AssetBundle 和无间隙地和本地 AssetBundle 服务器合作。\n\n<div style='display:none'>\nAdding the AssetBundle Manager to a project will create a new item in the Assets Menu called “AssetBundles”. \n</div>\n\n把 AssetBundle Manager 加入到项目之后将会在 **Asset** 菜单中创建一个叫 **AssetBundles** 的新菜单项。\n\n![assetbundle](http://unity3d.com/sites/default/files/assetbundle-menu.png)\n\n<div style='display:none'>\ndescriptionAssets > AssetBundles\n</div>\n\n<small>_Assets > AssetBundles_</small>\n\n<div style='display:none'>\nSelecting the AssetBundles menu item will show a small selection of menu items.\n</div>\n\n选中 **AssetBundles** 菜单将会显示一个小菜单选项。\n\n![assetbundle menu item](http://unity3d.com/sites/default/files/assetbundle_menu_item.png)  \n\n<div style='display:none'>\ndescriptionAssets > AssetBundles menu items\n</div>\n\n<small>_Assets > AssetBundles 菜单项_</small>\n\n<div style='display:none'>\nSimulation Mode, when enabled, allows the editor to simulate AssetBundles without having to actually build them. To enable Simulation Mode, select the menu item “Simulation Mode”. A checkmark will appear indicating that Simulation Mode is enabled. To disable Simulation Mode, select the menu item again. Simulation Mode will be disabled and the check-mark will be removed.\n</div>\n\n模拟模式开启后，允许编辑器不用实际编译就可以模拟 AssetBundle。要打开模拟模式，选择 **Simulation Mode** 菜单项。对勾符号表示模拟模式已经开启。要关闭模拟模式就再选择一次菜单项目。然后对勾符号会被移除，模拟模式会被禁用。\n\n<div style='display:none'>\nWith Simulation Mode enabled, the editor looks to see which Assets are assigned to AssetBundles and uses these Assets directly from the Project’s hierarchy as if they were in an AssetBundle. These AssetBundles, however, do not need to be built. From this point on, work within the editor can continue as if AssetBundles were built and hosted remotely.\n</div>\n\n当模拟模式开启后，编辑器会查看哪些资源被指定到了 AssetBundle，然后从项目的 hierarchy 中直接使用他们，就像他们在 AssetBundle 中一样。但是这些 AssetBundle 不需要编译。从这点来看，在编辑可以工作到了 AssetBundle 编译后放到远程服务器上一样可以工作。 \n\n<div style='display:none'>\nThe huge advantage to the workflow when simulation mode is enabled is that Assets can be changed, manipulated, imported, removed and as long as they are correctly assigned to an AssetBundle, work on the project does not need to stop to build and deploy AssetBundles before testing. Testing with the Simulation Mode enabled is immediate.\n</div>\n\n开启模拟模式最大的好处是，只要资源被正确地指定到 AssetBundle ，在当前运行的项目测试前不需要停下来去编译和重新部署 AssetBundle 就可以修改，操作，导入，删除资源。当开启模拟模式之后，测试是马上生效的。\n\n<div style='display:none'>\nIt is worth noting that AssetBundle Variants do not work under Simulation Mode. To test AssetBundle Variants, the AssetBundles will need to be built and deployed. AssetBundle Variants do work with the Local Asset Server, however.\n</div>\n\n注意 AssetBundle 变体在模拟模式下不支持。测试 AssetBundle 变体，AssetBundle 需要重新编译和部署。但是，本地的资源服务器支持 AssetBundle 变体。\n\n<div style='display:none'>\nThe ABM can also enable a Local Asset Server for testing from either the editor or from local builds - including Mobile. When Local Asset Server is enabled, AssetBundles must be built and placed in a folder explicitly called “AssetBundles” in the root of the Project, which is on the same level as the “Assets” folder.\n</div>\n\nAssetBundle Manager 也可以开启一个本地资源服务器来从编辑器或者本地或移动端的 build 来测试。当本地资源服务器开启后，AssetBundle 必须编译，然后放到项目跟目录中，跟 **Assets** 文件夹同级的 **AssetBundles** 文件夹里。\n\n![assetbundles folder](http://unity3d.com/sites/default/files/assetbundles_folder.png)  \n\n<div style='display:none'>\ndescriptionThe location of the AssetBundles folder required by the Local Asset Server\n</div>\n\n<small>_本地资源服务器要求的 AssetBundes 文件夹位置_</small>\n\n<div style='display:none'>\nWith the AssetBundles hosted locally, it is easy to access the Local Asset Server from the working project with a few simple lines of code. Please see the example in the AssetBundle Sample project, which will be covered later in this lesson.\n</div>\n\nAssetBundles 本地托管之后, 从当前项目中访问本地资源服务器只需要几行的代码就可以方便的访问。请阅读 AssetBundle 示例项目中的示例，我们会在教程的下面覆盖到。\n\n<div style='display:none'>\nBuilding AssetBundles and saving them into the “AssetBundles” folder on the root of the Project can be done simply by selecting “Build AssetBundles” from the “Assets/AssetBundles” menu. When “Build AssetBundles” is selected, Unity will build all of the AssetBundles that have had Assets assigned to them, compiling and optimizing them for the current build target, and finally saving them and a master Manifest to the “AssetBundles” folder in the root of the project. If there is no “AssetBundles” folder, Unity will make one. Inside the “AssetBundles” folder, the AssetBundles are organized by build target.\n</div>\n\n编译和保存到 AssetBundle 到项目根目录的 **AssetBundles** 文件夹中可以从 **Assets/AssetBundles** 菜单中选择 **Build AssetBundles** 来完成。当 **Build AssetBundles** 被选择之后， Unity 将会编译所有有资源指定的 AssetBundle, 然后为当前的平台编译和优化他们，最后保存他们和一个主清单到项目根目录下的 **AssetBundles** 文件夹下。如果没有 **AssetBundles**文件夹，Unity 会创建一个。在 **AssetBundles** 文件夹里，AssetBudle 按照编译目标平台来组织。\n\n![grouped by target](http://unity3d.com/sites/default/files/grouped_by_target.png)\n\n<div style='display:none'>\ndescriptionContents of the “AssetBundles” folder, grouped by build target.\n</div>\n\n<small>_\"AssetBundles\" 文件夹，按照编译目标平台来分组_</small>\n\n<div style='display:none'>\nWith AssetBundles built and either deployed, or by enabling the Local AssetBundle Server, these AssetBundles can be downloaded and incorporated into a Project at run-time.\n</div>\n\nAssetBundle 被编译后部署到远程服务器或者开始本地资源服务器，这些 AssetBundles 可以在运行期下载和插入到项目中。\n\n\n<div style='display:none'>\n###USING ASSETBUNDLES IN PRACTICE\n\nTo use AssetBundles in practice, this lesson will be using the AssetBundle Manager. The AssetBundle Manager will take care of loading AssetBundles and their associated Asset Dependencies. To load Assets from AssetBundles using the AssetBundle Manager, a script needs to be written using the API provided by the AssetBundle Manager.\n</div>\n\n### AssetBundle 练习\n\n练习 AssetBundle, 这教程将会使用 AssetBundle Manager。AssetBundle Manager 会应付 AssetBundle 的加载和他们相关的资源依赖。利用 AssetBundle Manager 来从 AssetBundle 中加载资源，脚本需要使用 AssetBundle Manager 提供的 API。\n\n<div style='display:none'>\nThe AssetBundle Manager’s API includes:\n\n* Initialize() Initializes the AssetBundle manifest object.\n* LoadAssetAsync() Loads a given asset from a given AssetBundle and handles all the dependencies.\n* LoadLevelAsync() Loads a given scene from a given AssetBundle and handles all the dependencies.\n* LoadDependencies() Loads all the dependent AssetBundles for a given AssetBundle.\n* BaseDownloadingURL Sets the base downloading url which is used for automatic downloading dependencies.\n* SimulateAssetBundleInEditor Sets Simulation Mode in the Editor.\n* Variants Sets the active variant.\n* RemapVariantName() Resolves the correct AssetBundle according to the active variant.\n</div>\n\nAssetBundle Manager 的 API 包括：\n\n* **Initialize()** 初始化 AssetBundle 清单对象\n* **LoadAssetAsync()** 从指定的一个 AssetBundle 中加载资源并处理所有的依赖\n* **LoadLevelAsync()** 从指定的一个 AssetBundle 中加载场景并处理所有的依赖\n* **LoadDependencies()** 加载指定的 AssetBundle 的所有独立的 AssetBundle\n* **BaseDownloadingURL** 设置用来自动下载依赖的基本地址\n* **SimulateAssetBundleInEditor** 在编辑器中设置模拟模式\n* **Vraiants** 设置当前的变体\n* **RemapVariantName()** 根据当前的变体决定正确的 AssetBundle\n\n<div style='display:none'>\nSample files are included with the AssetBundle Manager in a folder called \"AssetBundle Sample\". There are three basic sample scenes and one more advanced sample scene in the \"AssetBundleSample/Scenes\" folder:\n</div>\n\n示例文件放置在 AssetBundle Manager 内的 **AssetBundle Sample** 文件加下。有 3 个基础的示例场景和一个高级的示例场景在 **AssetBundleSample/Scenes** 文件夹下：\n\n<div style='display:none'>\n* \"AssetLoader\" demonstrates how to load a normal Asset from AssetBundles.\n* \"SceneLoader\" demonstrates how to load a Scene from AssetBundles.\n* \"VariantLoader\" demonstrates how to load AssetBundle Variants.\n* “LoadTanks” is more advanced and will demonstrate a more complex example with loading a Scene, \nAssets and AssetBundle Variants into the same scene.\n</div>\n\n* \"AssetLoader\" 演示了怎么样从 AssetBundle 加载普通资源\n* \"SceneLoader\" 演示了怎么样从 AssetBundle 加载场景\n* \"VariantLoader\" 演示了怎么样加载 AssetBundle 变体\n* \"LoadTanks\" 更高级，演示了复杂一点的，从同一个场景中加载场景，资源，和 AssetBundle 变体的示例。\n\n<div style='display:none'>\nEach one of these scenes is driven by a very basic script: LoadAssets.cs, LoadScenes.cs, LoadVariants.cs and LoadTanks.cs respectively.\n</div>\n\n每个场景都各个被非常基础的脚本驱动着：LoadAsset.cs，LoadScenes.cs，LoadVariants.cs 和 LoadTanks.cs。\n\n<div style='display:none'>\nAt this point it is important to reiterate the workflow provided by the AssetBundle Manager.\n</div>\n\n当前重申一下 AssetBundle Manager 提供的流程还是很重要的。\n\n<div style='display:none'>\nTo successfully test the use of AssetBundles, there are three possible scenarios.\n</div>\n\n为了能成功的试验 AssetBundle 的使用，这里有三种可能的情景：\n\n<div style='display:none'>\nIn the first scenario, without using the AssetBundle Manager, AssetBundles will need to be built and deployed and all testing is done with the complete and final system in place. In this scenario, with every change to the Assets in a Project, new AssetBundles need to be built and deployed.\n</div>\n\n第一个情景，没有使用 AssetBundle Manager, AssetBundle 将需要被编译和部署，所有的测试都会在最终完整准备后完成。在这个场景中，每次项目中资源的改变，都需要编译和部署新的 AssetBundle。\n\n<div style='display:none'>\nThere are two improvements to the workflow provided by the AssetBundle Manager. These are the Local AssetBundle Server and Simulation Mode.\n</div>\n\nAssetBundle Manager 在流程上提供了两个改进。他们是本地资源服务器和模拟模式。\n\n<div style='display:none'>\nIn Simulation Mode, the AssetBundle Manager simulates built AssetBundles when running the Project within the editor. This is the fastest workflow to use. Simply enable “Simulation Mode” using the menu item “Assets/AssetBundles/Simulation Mode” and test the project. No AssetBundles will be built. It is important to note, however, that AssetBundle Variants do not work with Simulation Mode. It is also important to note that Assets can be manipulated in the project when Simulation Mode is enabled, and the effect of these changes can seen in the scene view, which will not be possible with deployed AssetBundles.\n</div>\n\n在模拟模式中，编辑器内运行项目时，AssetBundle Manager 会模拟编译后的 AssetBundles。这是使用 AssetBundle 的最快的流程。只需简单的使用 \"Assets/AssetBundles/Simulation Mode\" 菜单打开 \"模拟模式\", 然后测试项目。没有 AssetBundle 会被编译。尽管如此，要注意 AssetBundle 变体在模拟模式下不工作。还有要注意的是，模拟模式开始后，资源可以再项目中操作，并且改变后的效果在 Sence 视图中可以看到，而这使用部署后的 AssetBundle 是不行的。\n\n<div style='display:none'>\nThe Local AssetBundle Server provides a more accurate representation of deployed AssetBundles, but requires that the AssetBundles be built and stored in a default folder within the project. When the Local AssetBundle Server is enabled, the built AssetBundles will be available to the Editor and all builds running locally that can reach the Editor on the local network. It is worth noting that this is the only way to test AssetBundle Variants locally.\n</div>\n\n本地资源服务器提供了部署的 AssetBundle 更精确的演示，但是需要 AssetBundle 被编译和存储到项目中的默认文件夹。当本地资源服务器开启之后，被编译的 AssetBundle 将可以被编辑器和所有运行在本地的，可以通过本地网络连接编辑器的 build 使用。注意这个是能本地测试 AssetBundle 变体的唯一方式。\n\n<div style='display:none'>\nTo run one of the sample scenes, the AssetBundle Manager must be running in one of these modes. To run the AssetBundle Variant scene successfully, AssetBundles must be built and the Local AssetBundle Server must be enabled.\n</div>\n\n要运行示例场景，AssetBundle Manager 必须运行在这些模式中的一种。要成功运行 AssetBundle 变体，AssetBundle 必须被编译并且本地资源服务器必须被开启。\n\n[译者：剩下的内容请关注本文的第三部分]  \n\n","source":"_posts/AssetBundleAndABManage_2.md","raw":"title: Unity 5：使用 Asset Bundle 和 Asset Bundle Manager (2)\ndate: 2015-11-11 20:28:07\ntags: AssetBundle\ncategory: Unity\n---\n\n这篇是 Unity 官方教程 [AssetBundles and the AssetBundle Manager](http://unity3d.com/cn/learn/tutorials/topics/scripting/assetbundles-and-assetbundle-manager?playlist=17117) 的翻译， 分三部分，这是第二部分。翻译不到之处请不吝指出。非常谢谢！\n<hr>\n\n<div style='display:none'>\n##WORKING WITH ASSETBUNDLES AND THE ASSETBUNDLE MANAGER\n###INTRODUCTION\n</div>\n\n### 介绍\n\n<div style='display:none'>\nOne of the key areas of effort in working with AssetBundles is the building and testing of bundles. Often, during development, the Assets themselves are changing regularly. Normally this would require regularly building AssetBundles, uploading them to a host and testing these remotely hosted AssetBundles through a network connection with the working project.\n</div>\n\n使用 AssetBundle 中一个关键的地方是编译和测试 bundles。一般情况下，资源在开发过程中是会变的。正常地，可能需要要求有规律的编译 AssetBundle, 上传到服务器和然后通过网络连接在当前项目中测试远程的 AssetBundle.\n\n<div style='display:none'>\nThis section focuses on using the AssetBundle Manager when working with AssetBundles. The AssetBundle Manager provides a High-level API for a massively improved workflow compared to manipulating AssetBundles directly with the foundation Low-level API.\n</div>\n\n这节主要关注 AssetBundle Manager 使用 AssetBundle。相对利用基础的低层 API 来操作 AssetBundle, AssetBundle Manager 为太幅改进的流程提供了高层的 API。\n\n<div style='display:none'>\n###WORKING WITH ASSETBUNDLES\n\nThe steps of working with AssetBundles in the editor fall roughly into these steps: - Organizing & Setting-up AssetBundles in the editor. - Building AssetBundles. - Uploading AssetBundles to external storage. - Downloading AssetBundles at run-time. - Loading objects from AssetBundles.\n</div>\n\n### 使用 AssetBundle  \n\n在编辑器中使用 AssetBundle 的大体步骤：- 在编辑器中组织 & 设置 AssetBundle。 - 编译 AssetBundle。 - 上传 AssetBundle 到外部存储 - 运行期下载 AssetBundle - 从 AssetBundle 加载对象。  \n\n<div style='display:none'>\nIt is worth noting that some AssetBundles can be stored locally for immediate loading as a default setup. This is useful to protect against an install where the application cannot reach remote external storage to download desired AssetBundles. For example, the application would load default language and localization data from a local AssetBundle when the application has no access to downloadable content.  \n</div>\n\n值得注意的一点，有些 AssetBundle 可以存储在本地作为即时加载的默认设置。这样对不能访问远程存储下载期望的资源的安装特别有用。比如，当不能访问可下载内容的时候，程序可以从本地的 AssetBundle 中加载默认的语言和本地化数据。\n\n<div style='display:none'>\nIt is also worth noting that an AssetBundle contains platform ready Assets. The contents of an AssetBundle have been compiled and optimized for the current target platform according to the Import Settings and the Target Platform set in the Build Settings. Because of this, AssetBundles should be built for each target platform.\n</div>\n\n值得注意的是一个 AssetBundle 包括平台准备资源。AssetBundle 的内容会根据 Import Settings 里设置的当前平台和 Build Settings 里面的目标平台做编译和优化。因为这样，需要为每个平台编译 AssetBundle。\n\n<div style='display:none'>\nIn the following simple scene, one legitimate way of organizing the scene into AssetBundles for the greatest versatility would be to have a base scene, which would include the ground, dunes, rock columns, tree and cactus. This scene could be allowed to include the dependent Materials, as these are fairly simple and would not likely need to be changed depending upon resolution or device. The tank model would be in an AssetBundle of it’s own, which would allow changes or updates to the player Asset. Two additional AssetBundles would be used to complete the tank GameObject. These would be the dependent Materials in one, and the dependent Texture in another. This would allow for changes and updates to the texture and material as needed with the least amount of trouble. This particular organization will also allow for alternative versions, or variants, of these Assets to be loaded from a choice of AssetBundle Variants on demand depending upon need, such as platform, location or resolution of the target device.\n</div>\n\n在接下来的简单的场景中, 为了AssetBundle 最大的用途，有个合理的组织 AssetBundle 场景内容的方式就是把草地，沙丘，岩石柱，树和仙人掌都打包到一个基础场景里面。这个基础场景可能包含依赖的材质，因为他们很简单，以后不太可能会基于分辨率或者设备而改变。坦克模型将需要一个自己的 AssetBundle, 这样允许改变或者更新玩家资源。为了实现坦克游戏对象，还需要两个额外的 AssetBundle. 一个是独立的材质资源，另外是独立的纹理资源。这将会给需要给纹理和材质的更改和更新时带来最小的麻烦。这个特别的组织方式也允许有其他版本或者基于平台、位置或者目标设备分辨率选择 AssetBundle 的变体。\n<!--more-->\n\n![simpleScene](http://unity3d.com/sites/default/files/simple_scene.png) \n<div style='display:none'>\n<small>_A Simplified Example Scene_</small>\n</div>\n<small>_一个简单的示例场景_</small>\n\n<div style='display:none'>\nTo organize and setup AssetBundles in the editor, the Assets themselves need to be assigned to an AssetBundle. When viewing an Asset, the AssetBundle Name and AssetBundle Variant can be found at the bottom of the preview window in the Inspector. The preview window must be open to see them.\n</div>\n\n为了在编辑器中组织和设置 AssetBundle, 资源需要指定一个 AssetBundle。 查看资源的时候，可以在 Inspector 的底部查看 AssetBundle 的名字和变体。在打开的预览窗口中能看到他们。\n\n![assetbundleName](http://unity3d.com/sites/default/files/assetbundlename.png)\n\n<div style='display:none'>\ndescriptionAn Asset that has not been assigned to an AssetBundle.\n</div>\n\n<small>一个还没有指定 AssetBundle 的资源</small>  \n\n<div style='display:none'>\nTo assign an Asset to an AssetBundle, use the AssetBundle Name drop down menu. Here, either create a new AssetBundle name or choose an existing one. AssetBundle Variants and the AssetBundle Variant Name menu will be covered later in this lesson.\n</div>\n\n使用 AssetBundle 名字下拉菜单来给资源指定 AssetBundle。在这可以创建一个新的 AssetBundle 或者选择已经存在的 AssetBundle。教程的后面会谈到 AssetBundle 变体和 AssetBundle 变体名字。\n\n![abmenu2](http://unity3d.com/sites/default/files/ab-menu2.png) \n\n\n<div style='display:none'>\ndescriptionAssigning an Asset to an AssetBundle\n</div>\n\n<small>_给一个资源指定 AssetBundle_</small>  \n\n<div style='display:none'>\nTo create a new AssetBundle, choose New and a text field will become active to name a new AssetBundle.\n</div>\n\n创建新的 AssetBundle, 选择 **New**，文本区域将会激活用来命名新的 AssetBundle。\n\n<div style='display:none'>\nTo remove an Asset from an AssetBundle, choose None and the Asset will now be unassigned.\n</div>\n\n从 AssetBundle 中删除资源，选择 **None**，资源现在就变成为没有指定 AssetBundle 了。\n\n<div style='display:none'>\nTo remove an AssetBundle Name from the list, all Assets assigned to that AssetBundle Name must be removed from that AssetBundle name, and then “Remove Unused Names” can be selected. This will remove all unused AssetBundle Names.\n</div>\n\n要从列表中删除一个  AssetBundle 名字，需要把所有指定到这个 AssetBundle 中的资源从 AssetBundle 名字中删除，然后选择 **Remove Unused Names**。这会删除所有没有被使用的 AssetBundle 名字。\n\n![creat a new name](http://unity3d.com/sites/default/files/creating_a_new_ab_name.png)\n\n<div style='display:none'>\ndescriptionCreating a new AssetBundle Name (Note Illegal Capital “T” in the AssetBundle Name)\n</div>\n\n<small>_创建一个新的 AssetBundle 名字（注意 大写的 \"T\" 在 AssetBundle 名字中非法）_</small>\n\n<div style='display:none'>\nAssets will be assigned to the AssetBundle selected in the AssetBundle Name menu. AssetBundle names are strictly lower case. If an uppercase letter is used, as in the example above, Unity will replace the capital letter with a lowercase one.\n</div>\n\n资源将会指定到在 AssetBundle 名字菜单中选择的 AssetBundle。AssetBundle 名字是严格小写的。如果使用了大写字母，就像上面的例子一样，Unity 将会用小写字母来代替。\n\n![tank assign to ab](http://unity3d.com/sites/default/files/tank_assigned_to_ab.png)  \n<div style='display:none'>\ndescriptionThe Tank Asset is now assigned to the AssetBundle “tank”.\n</div>\n\n<small>_坦克资源现在已经被指定到 \"tanke\" AssetBundle 上了_</small>\n\n<div style='display:none'>\nNote how the AssetBundle Name has been corrected to lowercase letters automatically.\n</div>\n\n注意 AssetBundle 的名字已经被自动纠正到了小写字母。\n\n<div style='display:none'>\n###USING ASSETBUNDLE VARIANTS\n\nBeing able to load Assets on demand from AssetBundles allows for many creative solutions to difficult issues related to loading, storing and updating Assets. One specific case where AssetBundles can help is the need to load a different set of Assets into a project depending upon the device, location or user preference. This is done by using AssetBundle Variants.\n</div>\n\n### 使用 AssetBundle 变体\n\n从 AssetBundle 中按需加载资源的可能让很多困难问题有很多创意的解决方案，比如加载，存储和更新资源。一个典型的 AssetBunle 能有帮助的用例就是需要基于设备，位置或者用户习惯加载资源的项目。这个可以用 AssetBundle 变体来实现。\n\n<div style='display:none'>\nAssetBundle Variants deliver different versions of the same Asset to be assigned to an object in the scene. AssetBundle Variants completely remap different Assets to the same object. Only one Variant of an AssetBundle is ever loaded at any given time. Asset Variants can be created for many different situations. Asset Variants can be different resolutions of the same Asset: Standard Definition graphics vs High Definition graphics or models with different polycounts. Asset Variants can be created with different content for an object: text, images, textures and typefaces can be different for each supported language, region or theme. These Assets are saved in a series of identically constructed AssetBundles and identified by their Variant Name.\n</div>\n\nAssetBundle 变体提供场景中指定到一个对象上同一个资源的不同版本。AssetBundle 变体完全是重新映射不同的资源到同一个对象上。在同一时间只能有一种 AssetBundle 被加载。我们可以为不同的方案创建资源变体。同一个资源可以有不同分辨率的资源变体：标准图形 VS 高清图形或者不同多边形数的模型。可以为一个对象创建不同内容的资源变体：为每个支持语言，区域或主题的文字，图片，纹理和字体。这些资源都可以存储到一系列统一构建的 AssetBundle 中并用名字来区分他们。\n\n<div style='display:none'>\nFor this to work, all of the matching AssetBundle Variants must be constructed and named identically. The only difference between AssetBundle Variants are the individual Assets contained in the AssetBundle and the AssetBundle Variant Name which is appended to the AssetBundle Name to identify it. To be a compatible AssetBundle Variant, the folder structure and contents of the AssetBundle must match. All the Assets need to be present in each AssetBundle, and must have the same name and in the same hierarchical order.\n</div>\n\n为了这些可以工作，所有匹配的 AssetBundle 变体必须构建和命名都一样。AssetBundle 变体间仅仅不同的地方就是 AssetBundle 内的资源和 加到 AssetBudle 后面的用来区分 AssetBundle 变体的名字。为了 AssetBundle 变体的兼容性，AssetBundle 的文件夹结构和内容需要匹配。所有的资源都要在 AssetBundle 里，具有相同的名字和在相同的分级顺利（hierarchial order）。\n\n<div style='display:none'>\nThe following example can be found in the AssetBundle Sample.\n</div>\n\n下面的示例可以在  AssetBundle 示例中找到。\n\n![variant structure](http://unity3d.com/sites/default/files/matching_variant_structure.png) \n\n<div style='display:none'>\ndescriptionExample of AssetBundle Variants.\n</div>\n\n<small>_AssetBundle 变体示例_</small>\n\n<div style='display:none'>\nIn the above example, both folders - MyAssets-HD and MyAssets-SD - have been assigned to the AssetBundle Name “myassets”. Each then has been given an AssetBundle Variant Name to identify it, in these cases hd and sd, respectively. Note how the two sets of Assets have the same name and share the same hierarchical structure. As the parent directory has been assigned to an AssetBundle and none of the children have been assigned to an AssetBundle, all of the children will be added to the parent’s AssetBundle when it is built.\n</div>\n\n在上面的例子中，**MyAsset-HD** 和 **MyAssets-SD** 两个文件夹都被指定了 AssetBundle 名字 \"myassets\"。每个都给予了 AssetBundle 变体名字去区分他们，在这里分别是 `hd` 和 `sd`。注意两个资源集都有相同的名字和分级结构。父目录被指定到了一个 AssetBundle 而它所有的子对象都没有指定到 AssetBundle 中，当父目录被编译的时候，所有的子对象都会加到父目录的 AssetBundle 中。\n\n![variant name hd](http://unity3d.com/sites/default/files/variant_name_hd.png) \n\n<small>_MyAsset-HD 设置了 AssetBundle 名字和变体名字_</small>\n\n![variant name sd](http://unity3d.com/sites/default/files/variant_name_sd.png)\n\n<small>_MyAssets-SD 设置了 AssetBundle 名字和变体名字_</small>\n\n<div style='display:none'>\t\ndescriptionMyAssets-HD with AssetBundle Name and AssetBundle Variant Name set.\n\ndescriptionMyAssets-SD with AssetBundle Name and AssetBundle Variant Name set.\n</div>\n\n<div style='display:none'>\nIt is worth noting that a hierarchical menu structure can be created for the AssetBundle Names. Note in the above images the AssetBundle Name has a path: variant/myassets. This will create a new menu item as a parent, called “variants” for the AssetBundle Name “myassets”.\n</div>\n\n注意，我们可以为 AssetBundle 名字创建层级菜单。上面的图片中 AssetBundle 名字有个路径：variant/myassets。 这会为 \"myassets\" 名字的 AssetBundle 创建一个 \"variants\" 名字为父级的新菜单项。\n\n<div style='display:none'>\t\ndescriptionAssetBundle Name with hierarchical menus.\n</div>\n\n<small>_层级菜单的 AssetBundle 名字_</small>\n\n<div style='display:none'>\nOnce Assets have been assigned to AssetBundles, the AssetBundles will need to be built and tested.\n</div>\n\n一旦资源被指定到 AssetBundle, 这个 AssetBundle 将要被编译和测试。\n\n<div style='display:none'>\n###USING THE ASSETBUNDLE MANAGER\n\nUnity has a Low-level API to work with AssetBundles directly. This tutorial will not cover the Low-level API. For more information on the Low-level AssetBundle API, please see the information linked below.\n</div>\n\n### 使用 AssetBundle Manager\n\nUnity 提供了直接使用 AssetBundle 的底层 API. 但是这篇教程不会覆盖这些底层 API。关于底层 API 的更多信息，请阅读这个链接。\n\n<div style='display:none'>\nFor building, testing and managing AssetBundles, this tutorial will concentrate on the AssetBundle Manger and its High-level API.\n</div>\n\n关于编译，测试和管理 AssetBundle，这篇教程会专注到 AssetBundle Manager 和它的高层 API 上。\n\n<div style='display:none'>\nThe AssetBundle Manager is a downloadable package that can be installed in any current Unity project and will provide a High-level API and improved workflow for managing AssetBundles. The AssetBundle Manager can be downloaded here. To use the AssetBundle Manager in a project, simply add the AssetBundle Manager folder to the project’s Assets folder.\n</div>\n\nAssetBundle Manager 是一个可下载的，可以安装在当前 Unity 项目中的包，它提供高层 API 和改进了 AssetBundle 的流程。AssetBundle Manager 可以再 [这里](http://u3d.as/jyk) 下载。要在项目中使用 AssetBundle Manager，简单的将它加到当前的项目的 **Asset** 文件夹中。\n\n<div style='display:none'>\nBuilding and testing AssetBundles can be a pain-point during development. Assets are often changing on a regular basis. With the Low-level AssetBundle API, testing would require regular building and uploading of the AssetBundles to a remote host and testing these remotely hosted AssetBundles through a network connection with the working project. The AssetBundle Manager allows for a massively improved workflow compared to manipulating AssetBundles directly with the Low-level API. The AssetBundle Manager helps manage the key steps in building and testing AssetBundles. The key features provided by the AssetBundle Manager are a Simulation Mode, a Local AssetBundle Server and a quick menu item to Build AssetBundles to work seamlessly with the Local AssetBundle Server.\n</div>\n\n编译和测试 AssetBundle 可能是在开发过程中的一个痛点。资源会时常的改变。使用底层 AssetBunle API 时，测试需要规律的编译和上传 AssetBundle 到一个远程服务器上，然后从当我的项目建立一个网络连接来测试远程服务器上的 AssetBundle。相对于直接操作 AssetBundle 的底层 API, AssetBundle Manager 大幅度的优化了流程。AssetBundle Manager 提供的最核心的功能是一个模拟模式，一个本地的 AssetBundle 服务器和一些快捷的菜单去编译 AssetBundle 和无间隙地和本地 AssetBundle 服务器合作。\n\n<div style='display:none'>\nAdding the AssetBundle Manager to a project will create a new item in the Assets Menu called “AssetBundles”. \n</div>\n\n把 AssetBundle Manager 加入到项目之后将会在 **Asset** 菜单中创建一个叫 **AssetBundles** 的新菜单项。\n\n![assetbundle](http://unity3d.com/sites/default/files/assetbundle-menu.png)\n\n<div style='display:none'>\ndescriptionAssets > AssetBundles\n</div>\n\n<small>_Assets > AssetBundles_</small>\n\n<div style='display:none'>\nSelecting the AssetBundles menu item will show a small selection of menu items.\n</div>\n\n选中 **AssetBundles** 菜单将会显示一个小菜单选项。\n\n![assetbundle menu item](http://unity3d.com/sites/default/files/assetbundle_menu_item.png)  \n\n<div style='display:none'>\ndescriptionAssets > AssetBundles menu items\n</div>\n\n<small>_Assets > AssetBundles 菜单项_</small>\n\n<div style='display:none'>\nSimulation Mode, when enabled, allows the editor to simulate AssetBundles without having to actually build them. To enable Simulation Mode, select the menu item “Simulation Mode”. A checkmark will appear indicating that Simulation Mode is enabled. To disable Simulation Mode, select the menu item again. Simulation Mode will be disabled and the check-mark will be removed.\n</div>\n\n模拟模式开启后，允许编辑器不用实际编译就可以模拟 AssetBundle。要打开模拟模式，选择 **Simulation Mode** 菜单项。对勾符号表示模拟模式已经开启。要关闭模拟模式就再选择一次菜单项目。然后对勾符号会被移除，模拟模式会被禁用。\n\n<div style='display:none'>\nWith Simulation Mode enabled, the editor looks to see which Assets are assigned to AssetBundles and uses these Assets directly from the Project’s hierarchy as if they were in an AssetBundle. These AssetBundles, however, do not need to be built. From this point on, work within the editor can continue as if AssetBundles were built and hosted remotely.\n</div>\n\n当模拟模式开启后，编辑器会查看哪些资源被指定到了 AssetBundle，然后从项目的 hierarchy 中直接使用他们，就像他们在 AssetBundle 中一样。但是这些 AssetBundle 不需要编译。从这点来看，在编辑可以工作到了 AssetBundle 编译后放到远程服务器上一样可以工作。 \n\n<div style='display:none'>\nThe huge advantage to the workflow when simulation mode is enabled is that Assets can be changed, manipulated, imported, removed and as long as they are correctly assigned to an AssetBundle, work on the project does not need to stop to build and deploy AssetBundles before testing. Testing with the Simulation Mode enabled is immediate.\n</div>\n\n开启模拟模式最大的好处是，只要资源被正确地指定到 AssetBundle ，在当前运行的项目测试前不需要停下来去编译和重新部署 AssetBundle 就可以修改，操作，导入，删除资源。当开启模拟模式之后，测试是马上生效的。\n\n<div style='display:none'>\nIt is worth noting that AssetBundle Variants do not work under Simulation Mode. To test AssetBundle Variants, the AssetBundles will need to be built and deployed. AssetBundle Variants do work with the Local Asset Server, however.\n</div>\n\n注意 AssetBundle 变体在模拟模式下不支持。测试 AssetBundle 变体，AssetBundle 需要重新编译和部署。但是，本地的资源服务器支持 AssetBundle 变体。\n\n<div style='display:none'>\nThe ABM can also enable a Local Asset Server for testing from either the editor or from local builds - including Mobile. When Local Asset Server is enabled, AssetBundles must be built and placed in a folder explicitly called “AssetBundles” in the root of the Project, which is on the same level as the “Assets” folder.\n</div>\n\nAssetBundle Manager 也可以开启一个本地资源服务器来从编辑器或者本地或移动端的 build 来测试。当本地资源服务器开启后，AssetBundle 必须编译，然后放到项目跟目录中，跟 **Assets** 文件夹同级的 **AssetBundles** 文件夹里。\n\n![assetbundles folder](http://unity3d.com/sites/default/files/assetbundles_folder.png)  \n\n<div style='display:none'>\ndescriptionThe location of the AssetBundles folder required by the Local Asset Server\n</div>\n\n<small>_本地资源服务器要求的 AssetBundes 文件夹位置_</small>\n\n<div style='display:none'>\nWith the AssetBundles hosted locally, it is easy to access the Local Asset Server from the working project with a few simple lines of code. Please see the example in the AssetBundle Sample project, which will be covered later in this lesson.\n</div>\n\nAssetBundles 本地托管之后, 从当前项目中访问本地资源服务器只需要几行的代码就可以方便的访问。请阅读 AssetBundle 示例项目中的示例，我们会在教程的下面覆盖到。\n\n<div style='display:none'>\nBuilding AssetBundles and saving them into the “AssetBundles” folder on the root of the Project can be done simply by selecting “Build AssetBundles” from the “Assets/AssetBundles” menu. When “Build AssetBundles” is selected, Unity will build all of the AssetBundles that have had Assets assigned to them, compiling and optimizing them for the current build target, and finally saving them and a master Manifest to the “AssetBundles” folder in the root of the project. If there is no “AssetBundles” folder, Unity will make one. Inside the “AssetBundles” folder, the AssetBundles are organized by build target.\n</div>\n\n编译和保存到 AssetBundle 到项目根目录的 **AssetBundles** 文件夹中可以从 **Assets/AssetBundles** 菜单中选择 **Build AssetBundles** 来完成。当 **Build AssetBundles** 被选择之后， Unity 将会编译所有有资源指定的 AssetBundle, 然后为当前的平台编译和优化他们，最后保存他们和一个主清单到项目根目录下的 **AssetBundles** 文件夹下。如果没有 **AssetBundles**文件夹，Unity 会创建一个。在 **AssetBundles** 文件夹里，AssetBudle 按照编译目标平台来组织。\n\n![grouped by target](http://unity3d.com/sites/default/files/grouped_by_target.png)\n\n<div style='display:none'>\ndescriptionContents of the “AssetBundles” folder, grouped by build target.\n</div>\n\n<small>_\"AssetBundles\" 文件夹，按照编译目标平台来分组_</small>\n\n<div style='display:none'>\nWith AssetBundles built and either deployed, or by enabling the Local AssetBundle Server, these AssetBundles can be downloaded and incorporated into a Project at run-time.\n</div>\n\nAssetBundle 被编译后部署到远程服务器或者开始本地资源服务器，这些 AssetBundles 可以在运行期下载和插入到项目中。\n\n\n<div style='display:none'>\n###USING ASSETBUNDLES IN PRACTICE\n\nTo use AssetBundles in practice, this lesson will be using the AssetBundle Manager. The AssetBundle Manager will take care of loading AssetBundles and their associated Asset Dependencies. To load Assets from AssetBundles using the AssetBundle Manager, a script needs to be written using the API provided by the AssetBundle Manager.\n</div>\n\n### AssetBundle 练习\n\n练习 AssetBundle, 这教程将会使用 AssetBundle Manager。AssetBundle Manager 会应付 AssetBundle 的加载和他们相关的资源依赖。利用 AssetBundle Manager 来从 AssetBundle 中加载资源，脚本需要使用 AssetBundle Manager 提供的 API。\n\n<div style='display:none'>\nThe AssetBundle Manager’s API includes:\n\n* Initialize() Initializes the AssetBundle manifest object.\n* LoadAssetAsync() Loads a given asset from a given AssetBundle and handles all the dependencies.\n* LoadLevelAsync() Loads a given scene from a given AssetBundle and handles all the dependencies.\n* LoadDependencies() Loads all the dependent AssetBundles for a given AssetBundle.\n* BaseDownloadingURL Sets the base downloading url which is used for automatic downloading dependencies.\n* SimulateAssetBundleInEditor Sets Simulation Mode in the Editor.\n* Variants Sets the active variant.\n* RemapVariantName() Resolves the correct AssetBundle according to the active variant.\n</div>\n\nAssetBundle Manager 的 API 包括：\n\n* **Initialize()** 初始化 AssetBundle 清单对象\n* **LoadAssetAsync()** 从指定的一个 AssetBundle 中加载资源并处理所有的依赖\n* **LoadLevelAsync()** 从指定的一个 AssetBundle 中加载场景并处理所有的依赖\n* **LoadDependencies()** 加载指定的 AssetBundle 的所有独立的 AssetBundle\n* **BaseDownloadingURL** 设置用来自动下载依赖的基本地址\n* **SimulateAssetBundleInEditor** 在编辑器中设置模拟模式\n* **Vraiants** 设置当前的变体\n* **RemapVariantName()** 根据当前的变体决定正确的 AssetBundle\n\n<div style='display:none'>\nSample files are included with the AssetBundle Manager in a folder called \"AssetBundle Sample\". There are three basic sample scenes and one more advanced sample scene in the \"AssetBundleSample/Scenes\" folder:\n</div>\n\n示例文件放置在 AssetBundle Manager 内的 **AssetBundle Sample** 文件加下。有 3 个基础的示例场景和一个高级的示例场景在 **AssetBundleSample/Scenes** 文件夹下：\n\n<div style='display:none'>\n* \"AssetLoader\" demonstrates how to load a normal Asset from AssetBundles.\n* \"SceneLoader\" demonstrates how to load a Scene from AssetBundles.\n* \"VariantLoader\" demonstrates how to load AssetBundle Variants.\n* “LoadTanks” is more advanced and will demonstrate a more complex example with loading a Scene, \nAssets and AssetBundle Variants into the same scene.\n</div>\n\n* \"AssetLoader\" 演示了怎么样从 AssetBundle 加载普通资源\n* \"SceneLoader\" 演示了怎么样从 AssetBundle 加载场景\n* \"VariantLoader\" 演示了怎么样加载 AssetBundle 变体\n* \"LoadTanks\" 更高级，演示了复杂一点的，从同一个场景中加载场景，资源，和 AssetBundle 变体的示例。\n\n<div style='display:none'>\nEach one of these scenes is driven by a very basic script: LoadAssets.cs, LoadScenes.cs, LoadVariants.cs and LoadTanks.cs respectively.\n</div>\n\n每个场景都各个被非常基础的脚本驱动着：LoadAsset.cs，LoadScenes.cs，LoadVariants.cs 和 LoadTanks.cs。\n\n<div style='display:none'>\nAt this point it is important to reiterate the workflow provided by the AssetBundle Manager.\n</div>\n\n当前重申一下 AssetBundle Manager 提供的流程还是很重要的。\n\n<div style='display:none'>\nTo successfully test the use of AssetBundles, there are three possible scenarios.\n</div>\n\n为了能成功的试验 AssetBundle 的使用，这里有三种可能的情景：\n\n<div style='display:none'>\nIn the first scenario, without using the AssetBundle Manager, AssetBundles will need to be built and deployed and all testing is done with the complete and final system in place. In this scenario, with every change to the Assets in a Project, new AssetBundles need to be built and deployed.\n</div>\n\n第一个情景，没有使用 AssetBundle Manager, AssetBundle 将需要被编译和部署，所有的测试都会在最终完整准备后完成。在这个场景中，每次项目中资源的改变，都需要编译和部署新的 AssetBundle。\n\n<div style='display:none'>\nThere are two improvements to the workflow provided by the AssetBundle Manager. These are the Local AssetBundle Server and Simulation Mode.\n</div>\n\nAssetBundle Manager 在流程上提供了两个改进。他们是本地资源服务器和模拟模式。\n\n<div style='display:none'>\nIn Simulation Mode, the AssetBundle Manager simulates built AssetBundles when running the Project within the editor. This is the fastest workflow to use. Simply enable “Simulation Mode” using the menu item “Assets/AssetBundles/Simulation Mode” and test the project. No AssetBundles will be built. It is important to note, however, that AssetBundle Variants do not work with Simulation Mode. It is also important to note that Assets can be manipulated in the project when Simulation Mode is enabled, and the effect of these changes can seen in the scene view, which will not be possible with deployed AssetBundles.\n</div>\n\n在模拟模式中，编辑器内运行项目时，AssetBundle Manager 会模拟编译后的 AssetBundles。这是使用 AssetBundle 的最快的流程。只需简单的使用 \"Assets/AssetBundles/Simulation Mode\" 菜单打开 \"模拟模式\", 然后测试项目。没有 AssetBundle 会被编译。尽管如此，要注意 AssetBundle 变体在模拟模式下不工作。还有要注意的是，模拟模式开始后，资源可以再项目中操作，并且改变后的效果在 Sence 视图中可以看到，而这使用部署后的 AssetBundle 是不行的。\n\n<div style='display:none'>\nThe Local AssetBundle Server provides a more accurate representation of deployed AssetBundles, but requires that the AssetBundles be built and stored in a default folder within the project. When the Local AssetBundle Server is enabled, the built AssetBundles will be available to the Editor and all builds running locally that can reach the Editor on the local network. It is worth noting that this is the only way to test AssetBundle Variants locally.\n</div>\n\n本地资源服务器提供了部署的 AssetBundle 更精确的演示，但是需要 AssetBundle 被编译和存储到项目中的默认文件夹。当本地资源服务器开启之后，被编译的 AssetBundle 将可以被编辑器和所有运行在本地的，可以通过本地网络连接编辑器的 build 使用。注意这个是能本地测试 AssetBundle 变体的唯一方式。\n\n<div style='display:none'>\nTo run one of the sample scenes, the AssetBundle Manager must be running in one of these modes. To run the AssetBundle Variant scene successfully, AssetBundles must be built and the Local AssetBundle Server must be enabled.\n</div>\n\n要运行示例场景，AssetBundle Manager 必须运行在这些模式中的一种。要成功运行 AssetBundle 变体，AssetBundle 必须被编译并且本地资源服务器必须被开启。\n\n[译者：剩下的内容请关注本文的第三部分]  \n\n","slug":"AssetBundleAndABManage_2","published":1,"updated":"2016-01-12T05:15:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cikpfkax900372quobxbjowdd"}],"PostAsset":[],"PostCategory":[{"post_id":"cikpfkatx00002quo33xaxwaa","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkau500042quo8wxv0zis"},{"post_id":"cikpfkauz00082quovzf8pl37","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkav000092quobjrw8ert"},{"post_id":"cikpfkav2000c2quoymv0jber","category_id":"cikpfkav2000d2quopu31egp4","_id":"cikpfkav3000g2quo0hc559od"},{"post_id":"cikpfkav5000h2quon2n5qi4r","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkav6000i2quoyz1l0dzp"},{"post_id":"cikpfkav8000l2quokru21m20","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkav9000m2quomguyt01m"},{"post_id":"cikpfkava000o2quo1pxzudv3","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkavb000p2quorzxsm8sz"},{"post_id":"cikpfkavc000r2quoqnawtwbj","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkavd000v2quo3dd7i7pc"},{"post_id":"cikpfkave000w2quo1ng84yla","category_id":"cikpfkav2000d2quopu31egp4","_id":"cikpfkavf000x2quob5ijptq0"},{"post_id":"cikpfkavg00102quoa56ibbbf","category_id":"cikpfkav2000d2quopu31egp4","_id":"cikpfkavh00112quon2uut423"},{"post_id":"cikpfkavi00142quoe64tyyvm","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkavj00152quofuw7bc6u"},{"post_id":"cikpfkavk00172quophd0en43","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkavk00182quoesfkc14a"},{"post_id":"cikpfkavl001a2quozcbutu3k","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkavm001b2quox2n7eriu"},{"post_id":"cikpfkavn001d2quokucithwu","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkavo001e2quoc421j640"},{"post_id":"cikpfkavo001g2quo7xbtkq6j","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkavp001h2quoqi5s88dd"},{"post_id":"cikpfkavr001j2quoe2kphayw","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkavr001k2quot6pebh08"},{"post_id":"cikpfkavs001m2quojtzmwiw8","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkavt001n2quohqpixzhg"},{"post_id":"cikpfkavv001p2quoyu4hhfd0","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkavw001q2quo1miz78x6"},{"post_id":"cikpfkavx001s2quoshnj1uoy","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkavy001t2quowprp3g4y"},{"post_id":"cikpfkavz001v2quotk4temyw","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkaw0001w2quo8oeve6i4"},{"post_id":"cikpfkaw0001y2quorpuv8u9u","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkaw2001z2quoxey5ddvl"},{"post_id":"cikpfkaw300212quo2m140n7r","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkaw400222quoqbdlpkpz"},{"post_id":"cikpfkaw500242quo6f2enc4c","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkaw600252quosto22a3h"},{"post_id":"cikpfkaw700272quop2fxsyft","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkaw800282quodnv9wloq"},{"post_id":"cikpfkaw8002a2quoeqt2mvid","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkaw9002b2quorlvxyb6g"},{"post_id":"cikpfkawa002d2quom8syy5qk","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkawb002e2quo989nrccu"},{"post_id":"cikpfkawc002g2quonjsgmvmx","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkawe002h2quohge69cph"},{"post_id":"cikpfkawf002j2quoxdk0bdlf","category_id":"cikpfkavd000s2quoxupist0g","_id":"cikpfkawg002k2quogg8i9cvg"},{"post_id":"cikpfkawi002m2quosjgzafe1","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkawi002n2quogwc673dr"},{"post_id":"cikpfkawk002p2quomwzqfc89","category_id":"cikpfkav2000d2quopu31egp4","_id":"cikpfkawl002q2quosdw7qgbf"},{"post_id":"cikpfkawo002t2quoqo28h4yu","category_id":"cikpfkav2000d2quopu31egp4","_id":"cikpfkawp002u2quo9s69e9cv"},{"post_id":"cikpfkawq002x2quoe90r4l2r","category_id":"cikpfkav2000d2quopu31egp4","_id":"cikpfkawr002y2quoi2fwvh3p"},{"post_id":"cikpfkawt00302quoz61pa8kl","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkawt00312quols4kp922"},{"post_id":"cikpfkaww00342quoyucdfeiv","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkax600352quosjuxjmkq"},{"post_id":"cikpfkax900372quobxbjowdd","category_id":"cikpfkau200012quolrp83rto","_id":"cikpfkax900382quo9t8sb7xv"}],"PostTag":[{"post_id":"cikpfkatx00002quo33xaxwaa","tag_id":"cikpfkau300022quonv18shju","_id":"cikpfkau500032quof5yumamy"},{"post_id":"cikpfkauz00082quovzf8pl37","tag_id":"cikpfkav0000a2quo43dr8834","_id":"cikpfkav1000b2quo2fjiq52j"},{"post_id":"cikpfkav2000c2quoymv0jber","tag_id":"cikpfkav3000e2quo013d8pis","_id":"cikpfkav3000f2quoosnnixx8"},{"post_id":"cikpfkav5000h2quon2n5qi4r","tag_id":"cikpfkav6000j2quorvg1xqtg","_id":"cikpfkav7000k2quol4k4xxxn"},{"post_id":"cikpfkav8000l2quokru21m20","tag_id":"cikpfkav6000j2quorvg1xqtg","_id":"cikpfkav9000n2quox38gnnro"},{"post_id":"cikpfkava000o2quo1pxzudv3","tag_id":"cikpfkav6000j2quorvg1xqtg","_id":"cikpfkavb000q2quo19f3u3sk"},{"post_id":"cikpfkavc000r2quoqnawtwbj","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkavd000u2quojk94flqo"},{"post_id":"cikpfkave000w2quo1ng84yla","tag_id":"cikpfkavf000y2quodxx9wys2","_id":"cikpfkavf000z2quod69e2zmd"},{"post_id":"cikpfkavg00102quoa56ibbbf","tag_id":"cikpfkavh00122quort041j28","_id":"cikpfkavh00132quo4veqag96"},{"post_id":"cikpfkavi00142quoe64tyyvm","tag_id":"cikpfkav0000a2quo43dr8834","_id":"cikpfkavj00162quosfnt6to0"},{"post_id":"cikpfkavk00172quophd0en43","tag_id":"cikpfkav0000a2quo43dr8834","_id":"cikpfkavk00192quofeg5inq0"},{"post_id":"cikpfkavl001a2quozcbutu3k","tag_id":"cikpfkav0000a2quo43dr8834","_id":"cikpfkavm001c2quoticgcbyk"},{"post_id":"cikpfkavn001d2quokucithwu","tag_id":"cikpfkav0000a2quo43dr8834","_id":"cikpfkavo001f2quotbj4qias"},{"post_id":"cikpfkavo001g2quo7xbtkq6j","tag_id":"cikpfkav0000a2quo43dr8834","_id":"cikpfkavq001i2quo397ieel8"},{"post_id":"cikpfkavr001j2quoe2kphayw","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkavr001l2quoqte3f99k"},{"post_id":"cikpfkavs001m2quojtzmwiw8","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkavt001o2quoa9smnij0"},{"post_id":"cikpfkavv001p2quoyu4hhfd0","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkavw001r2quow4ojl6f2"},{"post_id":"cikpfkavx001s2quoshnj1uoy","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkavy001u2quo5i82ihqv"},{"post_id":"cikpfkavz001v2quotk4temyw","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkaw0001x2quo6nrim47s"},{"post_id":"cikpfkaw0001y2quorpuv8u9u","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkaw200202quo07xqf999"},{"post_id":"cikpfkaw300212quo2m140n7r","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkaw500232quo1t67paix"},{"post_id":"cikpfkaw500242quo6f2enc4c","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkaw600262quo85r9l8n1"},{"post_id":"cikpfkaw700272quop2fxsyft","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkaw800292quo8j6wwf5h"},{"post_id":"cikpfkaw8002a2quoeqt2mvid","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkawa002c2quoycpsgq19"},{"post_id":"cikpfkawa002d2quom8syy5qk","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkawb002f2quo8qsdi6dp"},{"post_id":"cikpfkawc002g2quonjsgmvmx","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkawe002i2quo9a6ezbhp"},{"post_id":"cikpfkawf002j2quoxdk0bdlf","tag_id":"cikpfkavd000t2quo2c3i0h5p","_id":"cikpfkawg002l2quog8mibozj"},{"post_id":"cikpfkawi002m2quosjgzafe1","tag_id":"cikpfkav6000j2quorvg1xqtg","_id":"cikpfkawi002o2quoz5uti323"},{"post_id":"cikpfkawk002p2quomwzqfc89","tag_id":"cikpfkawl002r2quop91jqdux","_id":"cikpfkawl002s2quok9raj484"},{"post_id":"cikpfkawo002t2quoqo28h4yu","tag_id":"cikpfkawp002v2quot5yau9xf","_id":"cikpfkawp002w2quo8m9190uy"},{"post_id":"cikpfkawq002x2quoe90r4l2r","tag_id":"cikpfkav3000e2quo013d8pis","_id":"cikpfkawr002z2quoqdmbb4sw"},{"post_id":"cikpfkawt00302quoz61pa8kl","tag_id":"cikpfkawu00322quoz04x4ruy","_id":"cikpfkawu00332quo0wqbcq0z"},{"post_id":"cikpfkaww00342quoyucdfeiv","tag_id":"cikpfkau300022quonv18shju","_id":"cikpfkax600362quo40qlq201"},{"post_id":"cikpfkax900372quobxbjowdd","tag_id":"cikpfkau300022quonv18shju","_id":"cikpfkax900392quoldh1uj0n"}],"Tag":[{"name":"AssetBundle","_id":"cikpfkau300022quonv18shju"},{"name":"UNet","_id":"cikpfkav0000a2quo43dr8834"},{"name":"Python","_id":"cikpfkav3000e2quo013d8pis"},{"name":"Unity","_id":"cikpfkav6000j2quorvg1xqtg"},{"name":"Shader","_id":"cikpfkavd000t2quo2c3i0h5p"},{"name":"Visual Studio","_id":"cikpfkavf000y2quodxx9wys2"},{"name":"Git","_id":"cikpfkavh00122quort041j28"},{"name":"一点一滴","_id":"cikpfkawl002r2quop91jqdux"},{"name":"Swift","_id":"cikpfkawp002v2quot5yau9xf"},{"name":"Graphic","_id":"cikpfkawu00322quoz04x4ruy"}]}}