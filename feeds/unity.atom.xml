<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>心亡则忙，亡心则忘</title><link href="http://blog.shuiguzi.com/" rel="alternate"></link><link href="http://blog.shuiguzi.com/feeds/unity.atom.xml" rel="self"></link><id>http://blog.shuiguzi.com/</id><updated>2015-11-12T16:08:22+08:00</updated><entry><title>Unity 5: 使用 Asset Bundle 和 Asset Bundle Manager (3)</title><link href="http://blog.shuiguzi.com/unity-5-shi-yong-asset-bundle-he-asset-bundle-manager-3.html" rel="alternate"></link><updated>2015-11-12T16:08:22+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2015-11-12:unity-5-shi-yong-asset-bundle-he-asset-bundle-manager-3.html</id><summary type="html">&lt;p&gt;这篇是 Unity 官方教程 &lt;a href="http://unity3d.com/cn/learn/tutorials/topics/scripting/assetbundles-and-assetbundle-manager?playlist=17117"&gt;AssetBundles and the AssetBundle Manager&lt;/a&gt; 的翻译， 分三部分，这是第三部分。翻译不到之处请不吝指出。非常谢谢！&lt;/p&gt;
&lt;p&gt;译者注：英文太啰嗦了，但是还是坚持的把它翻译完了。因为啰嗦的好处是起码能让概念多复习几遍，跟容易记得住。如果读者觉得啰嗦，可以自行执行 &lt;strong&gt;跳读技能&lt;/strong&gt; 来阅读译文。&lt;/p&gt;
&lt;p&gt;本文的项目连接：&lt;a href="http://u3d.as/jyk"&gt;http://u3d.as/jyk&lt;/a&gt;
&lt;hr&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
###EXAMPLE 1: LOADING ASSETS

* Enable Simulation Mode using the menu item “Assets/AssetBundles/Simulation Mode”.
* Open the scene “AssetBundleSample/Scenes/AssetLoader”.
* Note that the scene is essentially empty and only contains a Main Camera, Directional 
 Light and “Loader” GameObject.
* Enter Playmode.
* Note that a cube has been loaded into the scene from an AssetBundle.

This scene is driven by the script “LoadAssets.cs”.
&lt;/div&gt;

&lt;h3&gt;示例 1：加载资源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 "Asset/AssetBundles/Simulation Mode" 菜单打开模拟模式&lt;/li&gt;
&lt;li&gt;打开 "AssetBundleSample/Scenes/AssetLoader" 场景&lt;/li&gt;
&lt;li&gt;注意场景是个空的只有一个主摄像机，方向光和游戏对象 "Loader"&lt;/li&gt;
&lt;li&gt;进入 PlayMode&lt;/li&gt;
&lt;li&gt;然后会注意到一个 cube 已经从 AssetBundle 加载到场景里面了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个场景是被 "LoadAssts.cs" 脚本驱动的。&lt;/p&gt;
&lt;div style='display:none'&gt;
Open “AssetBundleSample/Scripts/LoadAssets.cs” in a script editor.
&lt;/div&gt;

&lt;p&gt;在脚本编辑器里面打开脚本 "AssetBundleSample/Scripts/LoadAssets.cs"&lt;/p&gt;
&lt;div style='display:none'&gt;
There are two public variables: public string assetBundleName; and public string assetName;
&lt;/div&gt;

&lt;p&gt;脚本里有两个公共变量： &lt;code&gt;public string assetBundleName;&lt;/code&gt; 和 &lt;code&gt;public string assetName;&lt;/code&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
* public string assetBundleName; holds the name of the AssetBundle to be loaded.
* public string assetName; holds the name of the Asset to be loaded from the loaded AssetBundle.
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;public string assetBundleName;&lt;/strong&gt; 保存了要被加载的 AssetBundle 的名字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;public string assetName;&lt;/strong&gt; 保存了要已加载的 AssetBundle 中加载的资源的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;div style='display:none'&gt;
The script comprises of a Start() function and two Coroutines, called from Start(). In Initialize(), DontDestroyOnLoad() is called, the path to the AssetBundles is set and the AssetBundle Manifest is initialized. In InstantiateGameObjectAsync() the Asset and AssetBundle name are requested using AssetBundleManager.LoadAssetAsync() and if the Asset requested is not null, it is instantiated.
&lt;/div&gt;

&lt;p&gt;这个脚本是由一个 &lt;code&gt;Start()&lt;/code&gt; 函数和被 &lt;code&gt;Start()&lt;/code&gt; 调用的两个协程组成的。&lt;code&gt;Initialize()&lt;/code&gt; 调用了 &lt;code&gt;DontDestoryOnLoad()&lt;/code&gt;, 设置了 AssetBundle 的路径和初始化了 AssetBundle 清单。在 &lt;code&gt;InstantiateGameObjectAsync()&lt;/code&gt; 中，如果资源不为空，&lt;code&gt;AssetBundleManager.LoadAssetAsync()&lt;/code&gt; 调用资源和 AssetBundle 的名字。&lt;/p&gt;
&lt;div style='display:none'&gt;
What is important to note here, by looking at the Asset “MyCube” in “AssetBundleSample/Assets” is that “MyCube” is dependent upon “MyMaterial” which is then dependent on “UnityLogo”. Only the Asset “MyCube” was requested, and all of the dependent Assets were correctly loaded.
&lt;/div&gt;

&lt;p&gt;重点注意下，在 "AssetBundleSample/Assets" 路径下查看 "MyCube" 资源，会发现 "MyCube" 依赖于 "MyMaterial"，而 "MyMaterial" 依赖于 "UnityLogo"。脚本中只有 "MyCube" 资源被调用，但是所有的依赖资源都被正确的加载了。&lt;/p&gt;
&lt;div style='display:none'&gt;
It is also worth noting how the path to the AssetBundles is being set. This code will set the location for the AssetBundles to the Local AssetBundle Server when the scene is running within the Editor or from a Development Build. (For more information on development builds, please see the documentation on publishing builds.) When working in the Editor while Simulation Mode is enabled, AssetBundles will be simulated and this setting will not be used.
&lt;/div&gt;

&lt;p&gt;AssetBundle 的路径怎么设置也值得注意下。当场景在编辑器中或者从一个开发版 Build 中运行时，这段代码会给本地资源服务器设置 AssetBundle 的位置。（更多关于开发版 Build，请查看&lt;a href="http://docs.unity3d.com/Manual/PublishingBuilds.html"&gt;发布 Builds 文档&lt;/a&gt;。）模拟模式开启后，AssetBundle 会在编辑器中被模拟，这个设置将不会被使用。&lt;/p&gt;
&lt;div style='display:none'&gt;
To understand the use of DontDestroyOnLoad() it is worth understanding that even though this is a very simple script and in this context it is not absolutely necessary, it is present here with the assumption that this script will become the basis of an AssetBundle loader for a more complex project and will need to survive scene changes.
&lt;/div&gt;

&lt;p&gt;对 &lt;code&gt;DontDestoryOnLoad()&lt;/code&gt; 作用的理解。虽然在这个非常简单的脚本中并不是绝对需要它，但是他的存在是假设这个脚本会作为一个更复杂的项目的 AssetBundle 加载器基础，它需要在场景变化的以后依然存在。&lt;/p&gt;
&lt;div style='display:none'&gt;
###EXAMPLE 2: LOADING SCENES

* Make sure Simulation Mode is enabled by using the menu item “Assets/AssetBundles/Simulation Mode”.
* Open the scene “AssetBundleSample/Scenes/SceneLoader”.
* Note that the scene is essentially empty and only contains a Main Camera, Directional Light and “Loader” GameObject.
* Enter Playmode.
* Note that a cube and a plane have been loaded into the scene from an AssetBundle.

This scene is driven by the script “LoadScenes.cs”.
&lt;/div&gt;

&lt;h3&gt;示例 2：加载场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用 "Asset/AssetBundles/Simulation Mode" 菜单打开模拟模式&lt;/li&gt;
&lt;li&gt;开始 "AssetBundleSample/Scenes/SceneLoader" 场景&lt;/li&gt;
&lt;li&gt;注意场景是个空的只有一个主摄像机，方向光和游戏对象 "Loader"&lt;/li&gt;
&lt;li&gt;开打 PlayMode&lt;/li&gt;
&lt;li&gt;然后会注意到一个 cube 和 plane 已经从 AssetBundle 加载到场景里面了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个场景被 "LoadScene.cs" 脚本驱动着。&lt;/p&gt;
&lt;div style='display:none'&gt;
Open “AssetBundleSample/Scripts/LoadScenes.cs” in a script editor.
&lt;/div&gt;

&lt;p&gt;在脚本编辑其中打开 "AssetBundleSample/Scripts/LoadScenes.cs" 脚本。&lt;/p&gt;
&lt;div style='display:none'&gt;
There are two public variables: public string sceneAssetBundle; and public string sceneName;
&lt;/div&gt;

&lt;p&gt;脚本里有个两个公共变量：&lt;code&gt;public string sceneAssetBundle;&lt;/code&gt; 和 &lt;code&gt;public string sceneName;&lt;/code&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
* sceneAssetBundle; holds the name of the AssetBundle to be loaded.
* sceneName; holds the name of the Scene to be loaded from the loaded AssetBundle.
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sceneAssetBundle;&lt;/strong&gt; 保持了要加载的 AssetBundle 的名字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sceneName;&lt;/strong&gt; 保持了要从已加载的 AssetBundle 里加载的场景的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;div style='display:none'&gt;
The script comprises of a Start() function and two Coroutines, called from Start(). In Initialize(), DontDestroyOnLoad() is called, the path to the AssetBundles is set and the AssetBundle Manifest is initialized. In InitializeLevelAsync() the Scene name and isAdditive are used to request a Scene using AssetBundleManager.LoadLevelAsync(). If the Scene requested is null, the AssetBundle Manager will display an error in the console and the Coroutine ends.
&lt;/div&gt;

&lt;p&gt;这个脚本是有一个 &lt;code&gt;Start()&lt;/code&gt; 函数和被 &lt;code&gt;Start()&lt;/code&gt; 调用的两个协程组成的。&lt;code&gt;Initialize()&lt;/code&gt; 调用了 &lt;code&gt;DontDestoryOnLoad()&lt;/code&gt;, 设置了 AssetBundle 的路径和初始化了 AssetBundle 清单。在 &lt;code&gt;InitializeLevelAsync()&lt;/code&gt; 里使用 &lt;code&gt;AssetBundleManager.LoadLevelAsync()&lt;/code&gt; 调用场景名字和 &lt;code&gt;isAdditive&lt;/code&gt; 来请求一个场景。如果场景为空，AssetManager 会在控制台显示出错误，然后协程结束。&lt;/p&gt;
&lt;div style='display:none'&gt;
What is important to note here, by looking at the Asset “MyCube” in “AssetBundleSample/Assets” is that “Cube” is dependent upon “MyMaterial” which is then dependent on “UnityLogo”. Only the Scene “TestScene” was requested. “Cube” was included in “TestScene” and all of the dependent Assets were correctly loaded by the AssetBundle Manager.
&lt;/div&gt;

&lt;p&gt;重点注意下，在 "AssetBundleSample/Assets" 路径下查看 "MyCube" 资源，会发现 "MyCube" 依赖于 "MyMaterial"，而 "MyMaterial" 依赖于 "UnityLogo"。只有 "TestScene" 场景被请求了。但在 “TestScene” 中的 "Cube" 和所有依赖的资源都被 AssetBundle Manager 正确的加载了。&lt;/p&gt;
&lt;div style='display:none'&gt;
It is also worth noting how the path to the AssetBundles is being set. This code will set the location for the AssetBundles to the Local AssetBundle Server when the scene is running within the Editor or from a Development Build. (For more information on development builds, please see the documentation on publishing builds.) When working in the Editor while Simulation Mode is enabled, AssetBundles will be simulated and this setting will not be used.
&lt;/div&gt;

&lt;p&gt;AssetBundle 的路径怎么设置也值得注意下。当场景在编辑器中或者从一个开发版 Build 中运行时，这段代码会给本地资源服务器设置 AssetBundle 的位置。（更多关于开发版 Build，请查看 &lt;a href="http://docs.unity3d.com/Manual/PublishingBuilds.html"&gt;发布 Builds 文档&lt;/a&gt;。）模拟模式开启后，AssetBundle 会在编辑器中被模拟，这个设置将不会被使用。&lt;/p&gt;
&lt;div style='display:none'&gt;
To understand the use of DontDestroyOnLoad() it is worth understanding that even though this is a very simple script and in this context it is not absolutely necessary, it is present here with the assumption that this script will become the basis of an AssetBundle loader for a more complex project and will need to survive scene changes.
&lt;/div&gt;

&lt;p&gt;对 &lt;code&gt;DontDestoryOnLoad()&lt;/code&gt; 作用的理解。虽然在这个非常简单的脚本中并不是绝对需要它，但是他的存在是假设这个脚本会作为一个更复杂的项目的 AssetBundle 加载器基础，它需要在场景变化的以后依然存在。&lt;/p&gt;
&lt;div style='display:none'&gt;
###EXAMPLE 3: VARIANTS

To work with AssetBundle Variants, the AssetBundles will need to be built, as AssetBundle Variants do not work with Simulation Mode. To build AssetBundles and their Variants, make sure all of the Assets are properly assigned to an AssetBundle Name and, if being used as an AssetBundle Variant, an appropriate AssetBundle Variant Name needs to be assigned as well.
&lt;/div&gt;

&lt;h3&gt;示例 3：变体&lt;/h3&gt;
&lt;p&gt;要使用 AssetBundle 变体，需要编译 AssetBundle, 因为模拟模式下不支持它。在编译 AssetBundle 和它的变体钱，确保所有的资源以及被正确地指定 AssetBundle 名字和如果要被 AssetBundle 变体利用到的话，AssetBundle 变体的名字也要指定。&lt;/p&gt;
&lt;p&gt;&lt;img alt="variant name hd" src="http://unity3d.com/sites/default/files/variant_name_hd.png" width="40%" /&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
descriptionAn Asset with both AssetBundle Name and AssetBundle Variant Name set.
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;同时拥有 AssetBundle 名字和 AssetBundle 变体名字的资源&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
When all Assets have been assigned to an AssetBundle or AssetBundle Variant, AssetBundles can be built by selecting “Assets/AssetBundles/Build AssetBundles”.
&lt;/div&gt;

&lt;p&gt;当所有的资源都指定到 AssetBundle 或者 AssetBundle 变体后，选择 "Assets/AssetBundles/Build AssetBundles" 菜单来编译它们。&lt;/p&gt;
&lt;p&gt;&lt;img alt="build assetbundles" src="http://unity3d.com/sites/default/files/build_assetbundles.png" width="50%" /&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
descriptionAssets/AssetBundles/Build AssetBundles
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Assets/AssetBundles/BuildAssetBundles&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
By default, the AssetBundles will be optimized for the current build target and built into a folder called “AssetBundles” in the Project’s root directory, grouped by build target.
&lt;/div&gt;

&lt;p&gt;默认情况下，AssetBundle 会根据当前的平台优化，并编译进项目跟目录下的 "AssetBundles" 文件夹内，并按平台分组。&lt;/p&gt;
&lt;div style='display:none'&gt;
For ease of workflow and to use these newly built AssetBundles without deploying them, the Local AssetBundle Server should be enabled. Use “Assets/AssetBundles/Local AssetBundle Server” to enable the Local AssetBundle Server.
&lt;/div&gt;

&lt;p&gt;为了简化流程，不部署新编译出来的 AssetBundle 远程，需要开启本地资源服务器。通过 “Assets/AssetBundles/Local AssetBundle Server” 可以开启本地资源服务器。&lt;/p&gt;
&lt;p&gt;&lt;img alt="local assetbundles server" src="http://unity3d.com/sites/default/files/local_assetbundle_server.png" width="50%" /&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
descriptionStarting the Local AssetBundle Server
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;启动本地资源服务器&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
This local server should run seamlessly, but, as with any network communication, the local server will have the same restrictions as any network communication and may be subject to permissions requirements, firewalls, and other limitations. Be aware that the Local AssetBundle Server is enabling a Local AssetBundle Server that is set to the default IP Address and Port, which is usually http://192.168.1.115:7888/. This information is temporarily stored in the file AssetBundleManager/Resources/AssetBundleServerURL. This information will be set or changed automatically by the AssetBundleManager, and should not need any attention by the user.
&lt;/div&gt;

&lt;p&gt;本地资源服务器应该想其他任何网络连接一样受限制，可能是权限需求，防火墙和其他限制。本地资源服务器启动时会被设置到默认 IP 地址和端口的本地资源访问的服务器，通常是 http://192.168.1.115:7888/. 这个只是暂时的，它被存储在 &lt;strong&gt;AssetBundleManager/Resources/AssetBundleServerURL&lt;/strong&gt; 文件里面。这些信息会被 AssetBundleManager 设置或自动改变，用户不需要关注它们。&lt;/p&gt;
&lt;p&gt;&lt;img alt="assetbundle server url" src="http://unity3d.com/sites/default/files/assetbundle_serer_url.png" width="25%" /&gt;  &lt;/p&gt;
&lt;div style='display:none'&gt;
descriptionAssetBundleServerURL contains the current URL and Port
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;包含当前 URL 和 端口的 AssetBundleServerURL&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
When the the Local AssetBundle Server is running, the built AssetBundles can be tested locally.
&lt;/div&gt;

&lt;p&gt;当本地资源服务器运行的时候，编译后 AssetBundle 可以被本地测试。&lt;/p&gt;
&lt;div style='display:none'&gt;
* Make sure Simulation Mode is disabled by using the menu item “Assets/AssetBundles/Simulation Mode”.
* Make sure the Local AssetBundle Server is enabled by using the menu item “Assets/AssetBundles/Local AssetBundle Server”.
* Open the scene “AssetBundleSample/Scenes/VariantLoader”.
* Note that the scene is essentially empty and only contains a Main Camera, Directional Light and “Loader” GameObject.
* Enter Playmode.
* Choose “Load SD”.
* Note that a cube and a Sprite have been loaded into the scene from an AssetBundle.
* Exit Playmode.
* Enter Playmode.
* Choose “Load HD”.
* Note that the same cube and Sprite have been loaded in the scene, but the Material, its dependent texture and the Sprite texture have been loaded from a different AssetBundle. The materials have different colors and the images are at a significantly higher resolution.
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;选择 “Assets/AssetBundles/Simulation Mode” 确保模拟模式被禁用了&lt;/li&gt;
&lt;li&gt;选择 "Assets/AssetBundles/Local AssetBundle Server" 确保本地资源服务器开启&lt;/li&gt;
&lt;li&gt;打开 "AssetBundleSample/Scenes/VariantLoader"&lt;/li&gt;
&lt;li&gt;注意场景是个空的只有一个主摄像机，方向光和游戏对象 "Loader"&lt;/li&gt;
&lt;li&gt;退出 PlayMode (如果在 PlayMode 下)&lt;/li&gt;
&lt;li&gt;打开 PlayMode&lt;/li&gt;
&lt;li&gt;选择 "Load HD"&lt;/li&gt;
&lt;li&gt;注意同一个 Cube 和 Sprite 加载进场景了，但是材质和他依赖的独立纹理和 Sprite 纹理却从不同的 AssetBundle 加载。这些材质有不同的颜色，图片有更高的分辨率。&lt;/li&gt;
&lt;/ul&gt;
&lt;div style='display:none'&gt;
This scene is driven by the script “LoadVariants.cs”.
&lt;/div&gt;

&lt;p&gt;这个场景是被 "LoadVariant.cs" 脚本驱动的。&lt;/p&gt;
&lt;div style='display:none'&gt;
Open “AssetBundleSample/Scripts/LoadVariants.cs” in a script editor.
&lt;/div&gt;

&lt;p&gt;从编辑器中打开 "AssetBundleSample/Scripts/LoadVariants"。&lt;/p&gt;
&lt;div style='display:none'&gt;
This script is nearly identical to “LoadScenes.cs”. The main differences are the variable identifying the AssetBundle Variant to be loaded, and code to set the active Variant. There is additional code to create the UI Buttons.
&lt;/div&gt;

&lt;p&gt;这个脚本跟 "LoadScenes.cs" 几乎差不多。主要的区别就是用来区别需要加载的 AssetBundle 变体的变量和设置当前变体的代码。还有用来创建 UI 按钮的额外的代码。&lt;/p&gt;
&lt;div style='display:none'&gt;
* public string variantSceneAssetBundle; holds the name of the AssetBundle to be loaded.
* public string variantSceneName; holds the name of the Scene to be loaded from the loaded AssetBundle.
* private string[] activeVariants; holds the AssetBundleVariantNames to identify which AssetBundle Variants to load.
* private bool bundlesLoaded; is used to hide the UI when the Assets have been loaded.
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;public string variantSceneAssetBundle;&lt;/strong&gt; 保存要加载的 AssetBundle 的名字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;public string variantSceneName;&lt;/strong&gt; 保存要从已加载的 AssetBundle 中加载的场景名字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;private string[] activeVariants;&lt;/strong&gt; 保存用来区分需要加载的 AssetBundle 变体的 &lt;code&gt;AsssetBundleVariantNames&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;private bool bundlesLoaded&lt;/strong&gt; 用来在加载完资源之后隐藏 UI&lt;/li&gt;
&lt;/ul&gt;
&lt;div style='display:none'&gt;
The script comprises of a BeginExample() function and two Coroutines, called from Start(). BeginExample is called by the “Load HD” or “Load SD” button in OnGUI. In Initialize(), DontDestroyOnLoad() is called, the path to the AssetBundles is set and the AssetBundle Manifest is initialized. In BeginExample(), between calling Initialize() and InitializeLevelAsync(), the active Variants are set. The value being set here is created by the “Load HD” or “Load SD” button in OnGUI. In InitializeLevelAsync() the Scene name and isAdditive are used to request a Scene using AssetBundleManager.LoadLevelAsync(). If the Scene requested is null, the AssetBundle Manager will display an error in the console and the Coroutine ends.
&lt;/div&gt;

&lt;p&gt;脚本由一个 &lt;code&gt;BeginExample()&lt;/code&gt; 函数和被 &lt;code&gt;Start()&lt;/code&gt; 调用的两个协程组成。 &lt;code&gt;BeginExample()&lt;/code&gt; 在 &lt;code&gt;OnGUI()&lt;/code&gt;函数中 被 &lt;code&gt;Load HD&lt;/code&gt; 或者 &lt;code&gt;Load SD&lt;/code&gt; 按钮调用。&lt;code&gt;Initialize()&lt;/code&gt; 调用了 &lt;code&gt;DontDestoryOnLoad()&lt;/code&gt;, 设置了 AssetBundle 的路径和初始化了 AssetBundle 清单。在 &lt;code&gt;BeginExample()&lt;/code&gt; 方法里，在调用 &lt;code&gt;Initialize()&lt;/code&gt; 和 &lt;code&gt;InitializeLevelAsync()&lt;/code&gt; 之间，当前的变体被设置了。这里被设置的值从靠 &lt;code&gt;OnGUI&lt;/code&gt; 里的 "Load HD" 或者 "Load SD" 按钮创建的。在 &lt;code&gt;InitializeLevelAsync()&lt;/code&gt; 里使用 &lt;code&gt;AssetBundleManager.LoadLevelAsync()&lt;/code&gt; 调用场景名字和 &lt;code&gt;isAdditive&lt;/code&gt; 来请求一个场景。如果场景为空，AssetManager 会在控制台显式出错误，然后协程结束。&lt;/p&gt;
&lt;div style='display:none'&gt;
What is important to note here is how AssetBundle Variants are loaded. The array activeVariants contains a list of all of the possible Variant Names that are “active”. This array is used to set the AssetBundleManager.ActiveVariants property. When loading an AssetBundle that has a variant, the AssetBundle Manager will choose the AssetBundles that have “active” Variant Names in the ActiveVariants property. In the current example the ActiveVariants property contains only one element; the Active Variant is either “sd” or “hd”. It is possible to have multiple entries in the ActiveVariants property. For example there could be the following AssetBundles: my-material.sd, my-material.hd, my-text.english, my-text.danish, my-text.catalan, my-text.welsh. The ActiveVariants property could contain both “hd” and “danish”, or “sd” and “english” and so on for any of the other possible combinations of these Variant Names. This way, the AssetBundle Manager can load hd/sd images and the language choices separate from each other.
&lt;/div&gt;

&lt;p&gt;这里需要重视的是 AssetBundle 变体是怎么样加载的。&lt;strong&gt;activeVariants&lt;/strong&gt; 数组包含了所有可能的 “激活的” 变量名列表。这个数组用来设置 &lt;strong&gt;AssetBundleManager.ActiveVariants&lt;/strong&gt; 属性。当加载一个含有变体的 AssetBundle 时，AssetBundle Manager 将会选择在 &lt;strong&gt;ActiveVariants&lt;/strong&gt; 属性里含有 “激活” 的变体名字的 AssetBundle。当前的示例中，&lt;strong&gt;ActiveVariants&lt;/strong&gt; 属性只包含一个元素。当前的变体要么是 "sd"，要么是 “hd”。在 &lt;strong&gt;ActiveVariants&lt;/strong&gt; 属性中有多个实体是有可能的。比如，可能有下面一些 AssetBundle: my-material.sd，my-material.hd， my-text.english，my-text.catalan，my-text.welsh。&lt;strong&gt;ActiveVariants&lt;/strong&gt; 属性可以包含 “hd” 和 “danish” 两者或者 “sd” 和 "english" 等等任何可以有其他可能组合的变体名。这种方式下，AssetBundle Manager 分开可以加载 hd/sd 图片和语言选择。&lt;/p&gt;
&lt;div style='display:none'&gt;
There are some rules to this that are worth noting. If, for some reason, there are AssetBundles that have Variants assigned, but no Active Variant Name is set in the ActiveVariants property- for example neither “sd” nor “hd” are in the ActiveVariants property for the current example - the AssetBundle Manager will simply use the first AssetBundle it finds with the correct AssetBundle Name, ignoring the Variant Name. If, for some reason, there are multiple Active Variant Names in the ActiveVariants property for the same set of AssetBundles - for example, both “sd” and “hd” are in the ActiveVariants property for the current example - the AssetBundle Manager will choose the AssetBundle Variant whose Variant Name comes first in the ActiveVariants property.
&lt;/div&gt;

&lt;p&gt;有些规则值得注意下。如果，因为一些因素，有一些指定了变体的 AssetBundle，但是在 &lt;strong&gt;ActiveVariants&lt;/strong&gt; 属性里没有 “激活” 的变体名 - 比如当前例子中的 “sd” 或者 “hd” 不在 &lt;strong&gt;ActiveVraiants&lt;/strong&gt; 属性中 - AssetBundle Manager 将会简单的选择第一个它发现的正确名字的 AssetBundle 而忽略变体名。再如果，又因为一些因素，在 &lt;strong&gt;ActiveVariants&lt;/strong&gt; 属性里对同一个 AssetBundle 集合有多个 “激活” 的变体名 - 比如， 在当前的例子里，“sd” 和 “hd” 都在 &lt;strong&gt;ActiveVariants&lt;/strong&gt; 属性里 - AssetBundle Manager 将选择在 &lt;strong&gt;ActiveVariants&lt;/strong&gt; 属性中的第一个变体名。&lt;/p&gt;
&lt;div style='display:none'&gt;
###EXAMPLE 4: TANKS EXAMPLE

This more complex example will sum up everything in this article, including loading a scene from an AssetBundle and loading AssetBundle Variants for resolution, content and localization.
&lt;/div&gt;

&lt;h3&gt;示例 4：坦克示例&lt;/h3&gt;
&lt;p&gt;这个更复杂的示例将包括这篇文章中的所有内容，包括从 AssetBundle 中加载场景和为分辨率，内容和位置加载 AssetBundle 变体。&lt;/p&gt;
&lt;div style='display:none'&gt;
* Make sure Simulation Mode is disabled by using the menu item “Assets/AssetBundles/Simulation Mode”.
* Make sure the Local AssetBundle Server is enabled by using the menu item “Assets/AssetBundles/Local AssetBundle Server”.
* Open the scene “AssetBundleSample/Scenes/TanksLoader”.
* Note that the scene is essentially empty and only contains only the “Loader” GameObject.
* Enter Playmode.
* Select one choice for resolution, style and language.
* Note that the assets loaded are the options chosen in the UI.
* Note that if none of the choices are explicitly chosen, the AssetBundleManager will choose one automatically (as per the rules above) and print a warning in the console.
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;选择 “Assets/AssetBundles/Simulation Mode” 确保模拟模式被禁用了&lt;/li&gt;
&lt;li&gt;选择 "Assets/AssetBundles/Local AssetBundle Server" 确保本地资源服务器开启&lt;/li&gt;
&lt;li&gt;打开 "AssetBundleSample/Scenes/TanksLoader"&lt;/li&gt;
&lt;li&gt;注意场景是个空的只有一个主摄像机，方向光和游戏对象 "Loader"&lt;/li&gt;
&lt;li&gt;进入 PlayMode&lt;/li&gt;
&lt;li&gt;选择一个分辨率，风格和语言&lt;/li&gt;
&lt;li&gt;注意在 UI 里的选择项就是加载的资源&lt;/li&gt;
&lt;li&gt;如果没有显式的选择一个，AssetBundleManager 将自动选择（基于上面的原则）一个并且在命令行输出一个警告。&lt;/li&gt;
&lt;/ul&gt;
&lt;div style='display:none'&gt;
This scene is driven by the script “LoadTanks.cs”.
&lt;/div&gt;

&lt;p&gt;场景靠 "LoadTanks.cs" 脚本驱动。&lt;/p&gt;
&lt;div style='display:none'&gt;
Open “AssetBundleSample/Scripts/LoadTanks.cs” in a script editor.
&lt;/div&gt;

&lt;p&gt;在编辑器里面打开 “AssetBundleSample/Scripts/LoadTanks.cs” 脚本。&lt;/p&gt;
&lt;div style='display:none'&gt;
This script is very similar to “LoadScenes.cs” and “LoadAssets.cs”. This script uses code to both load a scene which depends upon a variant and to load an additional GameObject that also depends upon a variant. There is additional code to create the UI Buttons.
&lt;/div&gt;

&lt;p&gt;这个脚本与 “LoadScenes.cs” 和 "LoadAssets.cs" 非常像。脚本使用代码去加载依赖变体的场景和一样依赖变体的额外的游戏对象。也有一些额外的代码创建 UI 按钮。&lt;/p&gt;
&lt;div style='display:none'&gt;
* public string sceneAssetBundle; holds the name of the Scene bearing AssetBundle to be loaded.
* public string sceneName; holds the name of the Scene to be loaded from the loaded AssetBundle.
* public string textAssetBundle; holds the name of the Text Asset bearing AssetBundle to be loaded.
* public string textAssetName; holds the name of the Text Asset to be loaded from the loaded AssetBundle.
* private string[] activeVariants; holds the ActiveVariants to pass to the AssetBundleManager.
* private bool bundlesLoaded; is used to hide the UI when the Assets have been loaded.
* private bool sd, hd, normal, desert, english, danish; holds values used to set the ActiveVariant.
* private string tankAlbedoStyle, tankAlbedoResolution, language; holds values used to set the ActiveVariant.
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;public string sceneAssetBundle;&lt;/strong&gt; 保存携带场景的 AssetBundle 的名字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;public string sceneName;&lt;/strong&gt; 保存要从已加载的 AssetBundle 中加载的场景名字。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;public string textAssetBundle;&lt;/strong&gt; 保存携带文字资源的 AssetBundle 的名字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;public string textAssetName;&lt;/strong&gt; 保存要从已加载的 AssetBundle 中加载的文字资源的名字&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;private string activeVariants;&lt;/strong&gt; 保存要传给 AssetBundleManager 的 &lt;code&gt;ActiveVariants&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;private bool bundlesLoaded;&lt;/strong&gt; 用来资源加载之后隐藏 UI&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;private bool sd, hd, normal, desert, englisth, danish;&lt;/strong&gt; 保存用来设置 &lt;code&gt;ActiveVariants&lt;/code&gt; 的值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;private string tankAlbedoStyle, tankAlbedoResolution, languge;&lt;/strong&gt; 保存用来设置 &lt;code&gt;ActiveVariants&lt;/code&gt; 的值&lt;/li&gt;
&lt;/ul&gt;
&lt;div style='display:none'&gt;
The script comprises of a BeginExample() function and three Coroutines, called from Start(). The BeginExample() function is called by the button “Load Scene” in OnGUI(). In Initialize(), DontDestroyOnLoad() is called, the path to the AssetBundles is set and the AssetBundle Manifest is initialized. In BeginExample(), between calling Initialize() and InitializeLevelAsync(), the active Variants are set. The value being set here is created by the button “Load Scene” based on the user input in OnGUI(). In InitializeLevelAsync() the Scene name and isAdditive are used to request a Scene using AssetBundleManager.LoadLevelAsync(). If the Scene requested is null, the AssetBundle Manager will display an error in the console and the Coroutine ends. In InstantiateGameObjectAsync() the Asset and AssetBundle name are requested using AssetBundleManager.LoadAssetAsync() and if the Asset requested is not null, it is instantiated. If the AssetBundle cannot be loaded or the Asset cannot be requested, an error will be printed in the console.
&lt;/div&gt;

&lt;p&gt;脚本由一个 &lt;code&gt;BeginExample()&lt;/code&gt; 函数和被 &lt;code&gt;Start()&lt;/code&gt; 调用的两个协程组成。 &lt;code&gt;BeginExample()&lt;/code&gt; 在 &lt;code&gt;OnGUI()&lt;/code&gt;函数中 被 "Load Scene" 按钮调用。&lt;code&gt;Initialize()&lt;/code&gt; 调用了 &lt;code&gt;DontDestoryOnLoad()&lt;/code&gt;, 设置了 AssetBundle 的路径和初始化了 AssetBundle 清单。在 &lt;code&gt;BeginExample()&lt;/code&gt; 方法里，在调用 &lt;code&gt;Initialize()&lt;/code&gt; 和 &lt;code&gt;InitializeLevelAsync()&lt;/code&gt; 之间，当前的变体被设置了。这里被设置的值从靠 &lt;code&gt;OnGUI&lt;/code&gt; 里的 "Load Scene" 按钮创建的。在 &lt;code&gt;InitializeLevelAsync()&lt;/code&gt; 里使用 &lt;code&gt;AssetBundleManager.LoadLevelAsync()&lt;/code&gt; 调用场景名字和 &lt;code&gt;isAdditive&lt;/code&gt; 来请求一个场景。如果场景为空，AssetManager 会在控制台显式出错误，然后协程结束。在 &lt;code&gt;InstantiateGameObjectAsync()&lt;/code&gt; 中资源和 AssetBundle 名字被 &lt;code&gt;AssetBundleManager.LoadAssetAsync()&lt;/code&gt; 调用。如果调用的资源不为空，它会被实例化。如果 AssetBundle 不能被加载或者资源不能被请求，控制台会打印出错误来。&lt;/p&gt;
&lt;div style='display:none'&gt;
What is important to note here is how several Asset, AssetBundles and AssetBundleVariants are being accessed and loaded in this scene, and how these values can be set at run-time.
&lt;/div&gt;

&lt;p&gt;这小结要注意的内容是，多个 资源，AssetBunle 和 AssetBunle 变体怎么被访问和加载进场景里，和怎么样在运行期设置这些值。&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;文章连接：&lt;br /&gt;
&lt;em&gt; &lt;a href="http://blog.shuiguzi.com/unity-5-asset-bundle-he-asset-bundle-manager-1.html"&gt;Unity 5: Asset Bundle 和 Asset Bundle Manager (1)&lt;/a&gt;&lt;br /&gt;
&lt;/em&gt; &lt;a href="http://blog.shuiguzi.com/unity-5-shi-yong-asset-bundle-he-asset-bundle-manager-2.html"&gt;Unity 5: Asset Bundle 和 Asset Bundle Manager (2)&lt;/a&gt;&lt;br /&gt;
* &lt;a href="http://blog.shuiguzi.com/unity-5-shi-yong-asset-bundle-he-asset-bundle-manager-3.html"&gt;Unity 5: Asset Bundle 和 Asset Bundle Manager (3)&lt;/a&gt;&lt;/p&gt;</summary><category term="Unity"></category></entry><entry><title>Unity 5: 使用 Asset Bundle 和 Asset Bundle Manager (2)</title><link href="http://blog.shuiguzi.com/unity-5-shi-yong-asset-bundle-he-asset-bundle-manager-2.html" rel="alternate"></link><updated>2015-11-11T20:28:08+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2015-11-11:unity-5-shi-yong-asset-bundle-he-asset-bundle-manager-2.html</id><summary type="html">&lt;p&gt;这篇是 Unity 官方教程 &lt;a href="http://unity3d.com/cn/learn/tutorials/topics/scripting/assetbundles-and-assetbundle-manager?playlist=17117"&gt;AssetBundles and the AssetBundle Manager&lt;/a&gt; 的翻译， 分三部分，这是第二部分。翻译不到之处请不吝指出。非常谢谢！
&lt;hr&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
##WORKING WITH ASSETBUNDLES AND THE ASSETBUNDLE MANAGER
###INTRODUCTION
&lt;/div&gt;

&lt;h3&gt;介绍&lt;/h3&gt;
&lt;div style='display:none'&gt;
One of the key areas of effort in working with AssetBundles is the building and testing of bundles. Often, during development, the Assets themselves are changing regularly. Normally this would require regularly building AssetBundles, uploading them to a host and testing these remotely hosted AssetBundles through a network connection with the working project.
&lt;/div&gt;

&lt;p&gt;使用 AssetBundle 中一个关键的地方是编译和测试 bundles。一般情况下，资源在开发过程中是会变的。正常地，可能需要要求有规律的编译 AssetBundle, 上传到服务器和然后通过网络连接在当前项目中测试远程的 AssetBundle.&lt;/p&gt;
&lt;div style='display:none'&gt;
This section focuses on using the AssetBundle Manager when working with AssetBundles. The AssetBundle Manager provides a High-level API for a massively improved workflow compared to manipulating AssetBundles directly with the foundation Low-level API.
&lt;/div&gt;

&lt;p&gt;这节主要关注 AssetBundle Manager 使用 AssetBundle。相对利用基础的低层 API 来操作 AssetBundle, AssetBundle Manager 为太幅改进的流程提供了高层的 API。&lt;/p&gt;
&lt;div style='display:none'&gt;
###WORKING WITH ASSETBUNDLES

The steps of working with AssetBundles in the editor fall roughly into these steps: - Organizing &amp; Setting-up AssetBundles in the editor. - Building AssetBundles. - Uploading AssetBundles to external storage. - Downloading AssetBundles at run-time. - Loading objects from AssetBundles.
&lt;/div&gt;

&lt;h3&gt;使用 AssetBundle&lt;/h3&gt;
&lt;p&gt;在编辑器中使用 AssetBundle 的大体步骤：- 在编辑器中组织 &amp;amp; 设置 AssetBundle。 - 编译 AssetBundle。 - 上传 AssetBundle 到外部存储 - 运行期下载 AssetBundle - 从 AssetBundle 加载对象。  &lt;/p&gt;
&lt;div style='display:none'&gt;
It is worth noting that some AssetBundles can be stored locally for immediate loading as a default setup. This is useful to protect against an install where the application cannot reach remote external storage to download desired AssetBundles. For example, the application would load default language and localization data from a local AssetBundle when the application has no access to downloadable content.  
&lt;/div&gt;

&lt;p&gt;值得注意的一点，有些 AssetBundle 可以存储在本地作为即时加载的默认设置。这样对不能访问远程存储下载期望的资源的安装特别有用。比如，当不能访问可下载内容的时候，程序可以从本地的 AssetBundle 中加载默认的语言和本地化数据。&lt;/p&gt;
&lt;div style='display:none'&gt;
It is also worth noting that an AssetBundle contains platform ready Assets. The contents of an AssetBundle have been compiled and optimized for the current target platform according to the Import Settings and the Target Platform set in the Build Settings. Because of this, AssetBundles should be built for each target platform.
&lt;/div&gt;

&lt;p&gt;值得注意的是一个 AssetBundle 包括平台准备资源。AssetBundle 的内容会根据 Import Settings 里设置的当前平台和 Build Settings 里面的目标平台做编译和优化。因为这样，需要为每个平台编译 AssetBundle。&lt;/p&gt;
&lt;div style='display:none'&gt;
In the following simple scene, one legitimate way of organizing the scene into AssetBundles for the greatest versatility would be to have a base scene, which would include the ground, dunes, rock columns, tree and cactus. This scene could be allowed to include the dependent Materials, as these are fairly simple and would not likely need to be changed depending upon resolution or device. The tank model would be in an AssetBundle of it’s own, which would allow changes or updates to the player Asset. Two additional AssetBundles would be used to complete the tank GameObject. These would be the dependent Materials in one, and the dependent Texture in another. This would allow for changes and updates to the texture and material as needed with the least amount of trouble. This particular organization will also allow for alternative versions, or variants, of these Assets to be loaded from a choice of AssetBundle Variants on demand depending upon need, such as platform, location or resolution of the target device.
&lt;/div&gt;

&lt;p&gt;在接下来的简单的场景中, 为了AssetBundle 最大的用途，有个合理的组织 AssetBundle 场景内容的方式就是把草地，沙丘，岩石柱，树和仙人掌都打包到一个基础场景里面。这个基础场景可能包含依赖的材质，因为他们很简单，以后不太可能会基于分辨率或者设备而改变。坦克模型将需要一个自己的 AssetBundle, 这样允许改变或者更新玩家资源。为了实现坦克游戏对象，还需要两个额外的 AssetBundle. 一个是独立的材质资源，另外是独立的纹理资源。这将会给需要给纹理和材质的更改和更新时带来最小的麻烦。这个特别的组织方式也允许有其他版本或者基于平台、位置或者目标设备分辨率选择 AssetBundle 的变体。&lt;/p&gt;
&lt;p&gt;&lt;img alt="simpleScene" src="http://unity3d.com/sites/default/files/simple_scene.png" width="90%" /&gt;&lt;br /&gt;
&lt;div style='display:none'&gt;
&lt;small&gt;&lt;em&gt;A Simplified Example Scene&lt;/em&gt;&lt;/small&gt;
&lt;/div&gt;
&lt;small&gt;&lt;em&gt;一个简单的示例场景&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
To organize and setup AssetBundles in the editor, the Assets themselves need to be assigned to an AssetBundle. When viewing an Asset, the AssetBundle Name and AssetBundle Variant can be found at the bottom of the preview window in the Inspector. The preview window must be open to see them.
&lt;/div&gt;

&lt;p&gt;为了在编辑器中组织和设置 AssetBundle, 资源需要指定一个 AssetBundle。 查看资源的时候，可以在 Inspector 的底部查看 AssetBundle 的名字和变体。在打开的预览窗口中能看到他们。&lt;/p&gt;
&lt;p&gt;&lt;img alt="assetbundleName" src="http://unity3d.com/sites/default/files/assetbundlename.png" width="50%" /&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
descriptionAn Asset that has not been assigned to an AssetBundle.
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;一个还没有指定 AssetBundle 的资源&lt;/small&gt;  &lt;/p&gt;
&lt;div style='display:none'&gt;
To assign an Asset to an AssetBundle, use the AssetBundle Name drop down menu. Here, either create a new AssetBundle name or choose an existing one. AssetBundle Variants and the AssetBundle Variant Name menu will be covered later in this lesson.
&lt;/div&gt;

&lt;p&gt;使用 AssetBundle 名字下拉菜单来给资源指定 AssetBundle。在这可以创建一个新的 AssetBundle 或者选择已经存在的 AssetBundle。教程的后面会谈到 AssetBundle 变体和 AssetBundle 变体名字。&lt;/p&gt;
&lt;p&gt;&lt;img alt="abmenu2" src="http://unity3d.com/sites/default/files/ab-menu2.png" width="50%" /&gt;  &lt;/p&gt;
&lt;div style='display:none'&gt;
descriptionAssigning an Asset to an AssetBundle
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;给一个资源指定 AssetBundle&lt;/em&gt;&lt;/small&gt;  &lt;/p&gt;
&lt;div style='display:none'&gt;
To create a new AssetBundle, choose New and a text field will become active to name a new AssetBundle.
&lt;/div&gt;

&lt;p&gt;创建新的 AssetBundle, 选择 &lt;strong&gt;New&lt;/strong&gt;，文本区域将会激活用来命名新的 AssetBundle。&lt;/p&gt;
&lt;div style='display:none'&gt;
To remove an Asset from an AssetBundle, choose None and the Asset will now be unassigned.
&lt;/div&gt;

&lt;p&gt;从 AssetBundle 中删除资源，选择 &lt;strong&gt;None&lt;/strong&gt;，资源现在就变成为没有指定 AssetBundle 了。&lt;/p&gt;
&lt;div style='display:none'&gt;
To remove an AssetBundle Name from the list, all Assets assigned to that AssetBundle Name must be removed from that AssetBundle name, and then “Remove Unused Names” can be selected. This will remove all unused AssetBundle Names.
&lt;/div&gt;

&lt;p&gt;要从列表中删除一个  AssetBundle 名字，需要把所有指定到这个 AssetBundle 中的资源从 AssetBundle 名字中删除，然后选择 &lt;strong&gt;Remove Unused Names&lt;/strong&gt;。这会删除所有没有被使用的 AssetBundle 名字。&lt;/p&gt;
&lt;p&gt;&lt;img alt="creat a new name" src="http://unity3d.com/sites/default/files/creating_a_new_ab_name.png" width="50%" /&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
descriptionCreating a new AssetBundle Name (Note Illegal Capital “T” in the AssetBundle Name)
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;创建一个新的 AssetBundle 名字（注意 大写的 "T" 在 AssetBundle 名字中非法）&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
Assets will be assigned to the AssetBundle selected in the AssetBundle Name menu. AssetBundle names are strictly lower case. If an uppercase letter is used, as in the example above, Unity will replace the capital letter with a lowercase one.
&lt;/div&gt;

&lt;p&gt;资源将会指定到在 AssetBundle 名字菜单中选择的 AssetBundle。AssetBundle 名字是严格小写的。如果使用了大写字母，就像上面的例子一样，Unity 将会用小写字母来代替。&lt;/p&gt;
&lt;p&gt;&lt;img alt="tank assign to ab" src="http://unity3d.com/sites/default/files/tank_assigned_to_ab.png" width="50%" /&gt;&lt;br /&gt;
&lt;div style='display:none'&gt;
descriptionThe Tank Asset is now assigned to the AssetBundle “tank”.
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;坦克资源现在已经被指定到 "tanke" AssetBundle 上了&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
Note how the AssetBundle Name has been corrected to lowercase letters automatically.
&lt;/div&gt;

&lt;p&gt;注意 AssetBundle 的名字已经被自动纠正到了小写字母。&lt;/p&gt;
&lt;div style='display:none'&gt;
###USING ASSETBUNDLE VARIANTS

Being able to load Assets on demand from AssetBundles allows for many creative solutions to difficult issues related to loading, storing and updating Assets. One specific case where AssetBundles can help is the need to load a different set of Assets into a project depending upon the device, location or user preference. This is done by using AssetBundle Variants.
&lt;/div&gt;

&lt;h3&gt;使用 AssetBundle 变体&lt;/h3&gt;
&lt;p&gt;从 AssetBundle 中按需加载资源的可能让很多困难问题有很多创意的解决方案，比如加载，存储和更新资源。一个典型的 AssetBunle 能有帮助的用例就是需要基于设备，位置或者用户习惯加载资源的项目。这个可以用 AssetBundle 变体来实现。&lt;/p&gt;
&lt;div style='display:none'&gt;
AssetBundle Variants deliver different versions of the same Asset to be assigned to an object in the scene. AssetBundle Variants completely remap different Assets to the same object. Only one Variant of an AssetBundle is ever loaded at any given time. Asset Variants can be created for many different situations. Asset Variants can be different resolutions of the same Asset: Standard Definition graphics vs High Definition graphics or models with different polycounts. Asset Variants can be created with different content for an object: text, images, textures and typefaces can be different for each supported language, region or theme. These Assets are saved in a series of identically constructed AssetBundles and identified by their Variant Name.
&lt;/div&gt;

&lt;p&gt;AssetBundle 变体提供场景中指定到一个对象上同一个资源的不同版本。AssetBundle 变体完全是重新映射不同的资源到同一个对象上。在同一时间只能有一种 AssetBundle 被加载。我们可以为不同的方案创建资源变体。同一个资源可以有不同分辨率的资源变体：标准图形 VS 高清图形或者不同多边形数的模型。可以为一个对象创建不同内容的资源变体：为每个支持语言，区域或主题的文字，图片，纹理和字体。这些资源都可以存储到一系列统一构建的 AssetBundle 中并用名字来区分他们。&lt;/p&gt;
&lt;div style='display:none'&gt;
For this to work, all of the matching AssetBundle Variants must be constructed and named identically. The only difference between AssetBundle Variants are the individual Assets contained in the AssetBundle and the AssetBundle Variant Name which is appended to the AssetBundle Name to identify it. To be a compatible AssetBundle Variant, the folder structure and contents of the AssetBundle must match. All the Assets need to be present in each AssetBundle, and must have the same name and in the same hierarchical order.
&lt;/div&gt;

&lt;p&gt;为了这些可以工作，所有匹配的 AssetBundle 变体必须构建和命名都一样。AssetBundle 变体间仅仅不同的地方就是 AssetBundle 内的资源和 加到 AssetBudle 后面的用来区分 AssetBundle 变体的名字。为了 AssetBundle 变体的兼容性，AssetBundle 的文件夹结构和内容需要匹配。所有的资源都要在 AssetBundle 里，具有相同的名字和在相同的分级顺利（hierarchial order）。&lt;/p&gt;
&lt;div style='display:none'&gt;
The following example can be found in the AssetBundle Sample.
&lt;/div&gt;

&lt;p&gt;下面的示例可以在  AssetBundle 示例中找到。&lt;/p&gt;
&lt;p&gt;&lt;img alt="variant structure" src="http://unity3d.com/sites/default/files/matching_variant_structure.png" width="26%" /&gt;  &lt;/p&gt;
&lt;div style='display:none'&gt;
descriptionExample of AssetBundle Variants.
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;AssetBundle 变体示例&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
In the above example, both folders - MyAssets-HD and MyAssets-SD - have been assigned to the AssetBundle Name “myassets”. Each then has been given an AssetBundle Variant Name to identify it, in these cases hd and sd, respectively. Note how the two sets of Assets have the same name and share the same hierarchical structure. As the parent directory has been assigned to an AssetBundle and none of the children have been assigned to an AssetBundle, all of the children will be added to the parent’s AssetBundle when it is built.
&lt;/div&gt;

&lt;p&gt;在上面的例子中，&lt;strong&gt;MyAsset-HD&lt;/strong&gt; 和 &lt;strong&gt;MyAssets-SD&lt;/strong&gt; 两个文件夹都被指定了 AssetBundle 名字 "myassets"。每个都给予了 AssetBundle 变体名字去区分他们，在这里分别是 &lt;code&gt;hd&lt;/code&gt; 和 &lt;code&gt;sd&lt;/code&gt;。注意两个资源集都有相同的名字和分级结构。父目录被指定到了一个 AssetBundle 而它所有的子对象都没有指定到 AssetBundle 中，当父目录被编译的时候，所有的子对象都会加到父目录的 AssetBundle 中。&lt;/p&gt;
&lt;p&gt;&lt;img alt="variant name hd" src="http://unity3d.com/sites/default/files/variant_name_hd.png" width="40%" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;MyAsset-HD 设置了 AssetBundle 名字和变体名字&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="variant name sd" src="http://unity3d.com/sites/default/files/variant_name_sd.png" width="40%" /&gt;  &lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;MyAssets-SD 设置了 AssetBundle 名字和变体名字&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;  
descriptionMyAssets-HD with AssetBundle Name and AssetBundle Variant Name set.

descriptionMyAssets-SD with AssetBundle Name and AssetBundle Variant Name set.
&lt;/div&gt;

&lt;div style='display:none'&gt;
It is worth noting that a hierarchical menu structure can be created for the AssetBundle Names. Note in the above images the AssetBundle Name has a path: variant/myassets. This will create a new menu item as a parent, called “variants” for the AssetBundle Name “myassets”.
&lt;/div&gt;

&lt;p&gt;注意，我们可以为 AssetBundle 名字创建层级菜单。上面的图片中 AssetBundle 名字有个路径：variant/myassets。 这会为 "myassets" 名字的 AssetBundle 创建一个 "variants" 名字为父级的新菜单项。&lt;/p&gt;
&lt;div style='display:none'&gt;  
descriptionAssetBundle Name with hierarchical menus.
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;层级菜单的 AssetBundle 名字&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
Once Assets have been assigned to AssetBundles, the AssetBundles will need to be built and tested.
&lt;/div&gt;

&lt;p&gt;一旦资源被指定到 AssetBundle, 这个 AssetBundle 将要被编译和测试。&lt;/p&gt;
&lt;div style='display:none'&gt;
###USING THE ASSETBUNDLE MANAGER

Unity has a Low-level API to work with AssetBundles directly. This tutorial will not cover the Low-level API. For more information on the Low-level AssetBundle API, please see the information linked below.
&lt;/div&gt;

&lt;h3&gt;使用 AssetBundle Manager&lt;/h3&gt;
&lt;p&gt;Unity 提供了直接使用 AssetBundle 的底层 API. 但是这篇教程不会覆盖这些底层 API。关于底层 API 的更多信息，请阅读这个链接。&lt;/p&gt;
&lt;div style='display:none'&gt;
For building, testing and managing AssetBundles, this tutorial will concentrate on the AssetBundle Manger and its High-level API.
&lt;/div&gt;

&lt;p&gt;关于编译，测试和管理 AssetBundle，这篇教程会专注到 AssetBundle Manager 和它的高层 API 上。&lt;/p&gt;
&lt;div style='display:none'&gt;
The AssetBundle Manager is a downloadable package that can be installed in any current Unity project and will provide a High-level API and improved workflow for managing AssetBundles. The AssetBundle Manager can be downloaded here. To use the AssetBundle Manager in a project, simply add the AssetBundle Manager folder to the project’s Assets folder.
&lt;/div&gt;

&lt;p&gt;AssetBundle Manager 是一个可下载的，可以安装在当前 Unity 项目中的包，它提供高层 API 和改进了 AssetBundle 的流程。AssetBundle Manager 可以再 &lt;a href="http://u3d.as/jyk"&gt;这里&lt;/a&gt; 下载。要在项目中使用 AssetBundle Manager，简单的将它加到当前的项目的 &lt;strong&gt;Asset&lt;/strong&gt; 文件夹中。&lt;/p&gt;
&lt;div style='display:none'&gt;
Building and testing AssetBundles can be a pain-point during development. Assets are often changing on a regular basis. With the Low-level AssetBundle API, testing would require regular building and uploading of the AssetBundles to a remote host and testing these remotely hosted AssetBundles through a network connection with the working project. The AssetBundle Manager allows for a massively improved workflow compared to manipulating AssetBundles directly with the Low-level API. The AssetBundle Manager helps manage the key steps in building and testing AssetBundles. The key features provided by the AssetBundle Manager are a Simulation Mode, a Local AssetBundle Server and a quick menu item to Build AssetBundles to work seamlessly with the Local AssetBundle Server.
&lt;/div&gt;

&lt;p&gt;编译和测试 AssetBundle 可能是在开发过程中的一个痛点。资源会时常的改变。使用底层 AssetBunle API 时，测试需要规律的编译和上传 AssetBundle 到一个远程服务器上，然后从当我的项目建立一个网络连接来测试远程服务器上的 AssetBundle。相对于直接操作 AssetBundle 的底层 API, AssetBundle Manager 大幅度的优化了流程。AssetBundle Manager 提供的最核心的功能是一个模拟模式，一个本地的 AssetBundle 服务器和一些快捷的菜单去编译 AssetBundle 和无间隙地和本地 AssetBundle 服务器合作。&lt;/p&gt;
&lt;div style='display:none'&gt;
Adding the AssetBundle Manager to a project will create a new item in the Assets Menu called “AssetBundles”. 
&lt;/div&gt;

&lt;p&gt;把 AssetBundle Manager 加入到项目之后将会在 &lt;strong&gt;Asset&lt;/strong&gt; 菜单中创建一个叫 &lt;strong&gt;AssetBundles&lt;/strong&gt; 的新菜单项。&lt;/p&gt;
&lt;p&gt;&lt;img alt="assetbundle" src="http://unity3d.com/sites/default/files/assetbundle-menu.png" width="30%" /&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
descriptionAssets &gt; AssetBundles
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Assets &amp;gt; AssetBundles&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
Selecting the AssetBundles menu item will show a small selection of menu items.
&lt;/div&gt;

&lt;p&gt;选中 &lt;strong&gt;AssetBundles&lt;/strong&gt; 菜单将会显示一个小菜单选项。&lt;/p&gt;
&lt;p&gt;&lt;img alt="assetbundle menu item" src="http://unity3d.com/sites/default/files/assetbundle_menu_item.png" width="30%" /&gt;  &lt;/p&gt;
&lt;div style='display:none'&gt;
descriptionAssets &gt; AssetBundles menu items
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Assets &amp;gt; AssetBundles 菜单项&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
Simulation Mode, when enabled, allows the editor to simulate AssetBundles without having to actually build them. To enable Simulation Mode, select the menu item “Simulation Mode”. A checkmark will appear indicating that Simulation Mode is enabled. To disable Simulation Mode, select the menu item again. Simulation Mode will be disabled and the check-mark will be removed.
&lt;/div&gt;

&lt;p&gt;模拟模式开启后，允许编辑器不用实际编译就可以模拟 AssetBundle。要打开模拟模式，选择 &lt;strong&gt;Simulation Mode&lt;/strong&gt; 菜单项。对勾符号表示模拟模式已经开启。要关闭模拟模式就再选择一次菜单项目。然后对勾符号会被移除，模拟模式会被禁用。&lt;/p&gt;
&lt;div style='display:none'&gt;
With Simulation Mode enabled, the editor looks to see which Assets are assigned to AssetBundles and uses these Assets directly from the Project’s hierarchy as if they were in an AssetBundle. These AssetBundles, however, do not need to be built. From this point on, work within the editor can continue as if AssetBundles were built and hosted remotely.
&lt;/div&gt;

&lt;p&gt;当模拟模式开启后，编辑器会查看哪些资源被指定到了 AssetBundle，然后从项目的 hierarchy 中直接使用他们，就像他们在 AssetBundle 中一样。但是这些 AssetBundle 不需要编译。从这点来看，在编辑可以工作到了 AssetBundle 编译后放到远程服务器上一样可以工作。 &lt;/p&gt;
&lt;div style='display:none'&gt;
The huge advantage to the workflow when simulation mode is enabled is that Assets can be changed, manipulated, imported, removed and as long as they are correctly assigned to an AssetBundle, work on the project does not need to stop to build and deploy AssetBundles before testing. Testing with the Simulation Mode enabled is immediate.
&lt;/div&gt;

&lt;p&gt;开启模拟模式最大的好处是，只要资源被正确地指定到 AssetBundle ，在当前运行的项目测试前不需要停下来去编译和重新部署 AssetBundle 就可以修改，操作，导入，删除资源。当开启模拟模式之后，测试是马上生效的。&lt;/p&gt;
&lt;div style='display:none'&gt;
It is worth noting that AssetBundle Variants do not work under Simulation Mode. To test AssetBundle Variants, the AssetBundles will need to be built and deployed. AssetBundle Variants do work with the Local Asset Server, however.
&lt;/div&gt;

&lt;p&gt;注意 AssetBundle 变体在模拟模式下不支持。测试 AssetBundle 变体，AssetBundle 需要重新编译和部署。但是，本地的资源服务器支持 AssetBundle 变体。&lt;/p&gt;
&lt;div style='display:none'&gt;
The ABM can also enable a Local Asset Server for testing from either the editor or from local builds - including Mobile. When Local Asset Server is enabled, AssetBundles must be built and placed in a folder explicitly called “AssetBundles” in the root of the Project, which is on the same level as the “Assets” folder.
&lt;/div&gt;

&lt;p&gt;AssetBundle Manager 也可以开启一个本地资源服务器来从编辑器或者本地或移动端的 build 来测试。当本地资源服务器开启后，AssetBundle 必须编译，然后放到项目跟目录中，跟 &lt;strong&gt;Assets&lt;/strong&gt; 文件夹同级的 &lt;strong&gt;AssetBundles&lt;/strong&gt; 文件夹里。&lt;/p&gt;
&lt;p&gt;&lt;img alt="assetbundles folder" src="http://unity3d.com/sites/default/files/assetbundles_folder.png" width="70%" /&gt;  &lt;/p&gt;
&lt;div style='display:none'&gt;
descriptionThe location of the AssetBundles folder required by the Local Asset Server
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;本地资源服务器要求的 AssetBundes 文件夹位置&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
With the AssetBundles hosted locally, it is easy to access the Local Asset Server from the working project with a few simple lines of code. Please see the example in the AssetBundle Sample project, which will be covered later in this lesson.
&lt;/div&gt;

&lt;p&gt;AssetBundles 本地托管之后, 从当前项目中访问本地资源服务器只需要几行的代码就可以方便的访问。请阅读 AssetBundle 示例项目中的示例，我们会在教程的下面覆盖到。&lt;/p&gt;
&lt;div style='display:none'&gt;
Building AssetBundles and saving them into the “AssetBundles” folder on the root of the Project can be done simply by selecting “Build AssetBundles” from the “Assets/AssetBundles” menu. When “Build AssetBundles” is selected, Unity will build all of the AssetBundles that have had Assets assigned to them, compiling and optimizing them for the current build target, and finally saving them and a master Manifest to the “AssetBundles” folder in the root of the project. If there is no “AssetBundles” folder, Unity will make one. Inside the “AssetBundles” folder, the AssetBundles are organized by build target.
&lt;/div&gt;

&lt;p&gt;编译和保存到 AssetBundle 到项目根目录的 &lt;strong&gt;AssetBundles&lt;/strong&gt; 文件夹中可以从 &lt;strong&gt;Assets/AssetBundles&lt;/strong&gt; 菜单中选择 &lt;strong&gt;Build AssetBundles&lt;/strong&gt; 来完成。当 &lt;strong&gt;Build AssetBundles&lt;/strong&gt; 被选择之后， Unity 将会编译所有有资源指定的 AssetBundle, 然后为当前的平台编译和优化他们，最后保存他们和一个主清单到项目根目录下的 &lt;strong&gt;AssetBundles&lt;/strong&gt; 文件夹下。如果没有 &lt;strong&gt;AssetBundles&lt;/strong&gt;文件夹，Unity 会创建一个。在 &lt;strong&gt;AssetBundles&lt;/strong&gt; 文件夹里，AssetBudle 按照编译目标平台来组织。&lt;/p&gt;
&lt;p&gt;&lt;img alt="grouped by target" src="http://unity3d.com/sites/default/files/grouped_by_target.png" width="80%" /&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
descriptionContents of the “AssetBundles” folder, grouped by build target.
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;"AssetBundles" 文件夹，按照编译目标平台来分组&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
With AssetBundles built and either deployed, or by enabling the Local AssetBundle Server, these AssetBundles can be downloaded and incorporated into a Project at run-time.
&lt;/div&gt;

&lt;p&gt;AssetBundle 被编译后部署到远程服务器或者开始本地资源服务器，这些 AssetBundles 可以在运行期下载和插入到项目中。&lt;/p&gt;
&lt;div style='display:none'&gt;
###USING ASSETBUNDLES IN PRACTICE

To use AssetBundles in practice, this lesson will be using the AssetBundle Manager. The AssetBundle Manager will take care of loading AssetBundles and their associated Asset Dependencies. To load Assets from AssetBundles using the AssetBundle Manager, a script needs to be written using the API provided by the AssetBundle Manager.
&lt;/div&gt;

&lt;h3&gt;AssetBundle 练习&lt;/h3&gt;
&lt;p&gt;练习 AssetBundle, 这教程将会使用 AssetBundle Manager。AssetBundle Manager 会应付 AssetBundle 的加载和他们相关的资源依赖。利用 AssetBundle Manager 来从 AssetBundle 中加载资源，脚本需要使用 AssetBundle Manager 提供的 API。&lt;/p&gt;
&lt;div style='display:none'&gt;
The AssetBundle Manager’s API includes:

* Initialize() Initializes the AssetBundle manifest object.
* LoadAssetAsync() Loads a given asset from a given AssetBundle and handles all the dependencies.
* LoadLevelAsync() Loads a given scene from a given AssetBundle and handles all the dependencies.
* LoadDependencies() Loads all the dependent AssetBundles for a given AssetBundle.
* BaseDownloadingURL Sets the base downloading url which is used for automatic downloading dependencies.
* SimulateAssetBundleInEditor Sets Simulation Mode in the Editor.
* Variants Sets the active variant.
* RemapVariantName() Resolves the correct AssetBundle according to the active variant.
&lt;/div&gt;

&lt;p&gt;AssetBundle Manager 的 API 包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Initialize()&lt;/strong&gt; 初始化 AssetBundle 清单对象&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LoadAssetAsync()&lt;/strong&gt; 从指定的一个 AssetBundle 中加载资源并处理所有的依赖&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LoadLevelAsync()&lt;/strong&gt; 从指定的一个 AssetBundle 中加载场景并处理所有的依赖&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LoadDependencies()&lt;/strong&gt; 加载指定的 AssetBundle 的所有独立的 AssetBundle&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BaseDownloadingURL&lt;/strong&gt; 设置用来自动下载依赖的基本地址&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SimulateAssetBundleInEditor&lt;/strong&gt; 在编辑器中设置模拟模式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vraiants&lt;/strong&gt; 设置当前的变体&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RemapVariantName()&lt;/strong&gt; 根据当前的变体决定正确的 AssetBundle&lt;/li&gt;
&lt;/ul&gt;
&lt;div style='display:none'&gt;
Sample files are included with the AssetBundle Manager in a folder called "AssetBundle Sample". There are three basic sample scenes and one more advanced sample scene in the "AssetBundleSample/Scenes" folder:
&lt;/div&gt;

&lt;p&gt;示例文件放置在 AssetBundle Manager 内的 &lt;strong&gt;AssetBundle Sample&lt;/strong&gt; 文件加下。有 3 个基础的示例场景和一个高级的示例场景在 &lt;strong&gt;AssetBundleSample/Scenes&lt;/strong&gt; 文件夹下：&lt;/p&gt;
&lt;div style='display:none'&gt;
* "AssetLoader" demonstrates how to load a normal Asset from AssetBundles.
* "SceneLoader" demonstrates how to load a Scene from AssetBundles.
* "VariantLoader" demonstrates how to load AssetBundle Variants.
* “LoadTanks” is more advanced and will demonstrate a more complex example with loading a Scene, 
Assets and AssetBundle Variants into the same scene.
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;"AssetLoader" 演示了怎么样从 AssetBundle 加载普通资源&lt;/li&gt;
&lt;li&gt;"SceneLoader" 演示了怎么样从 AssetBundle 加载场景&lt;/li&gt;
&lt;li&gt;"VariantLoader" 演示了怎么样加载 AssetBundle 变体&lt;/li&gt;
&lt;li&gt;"LoadTanks" 更高级，演示了复杂一点的，从同一个场景中加载场景，资源，和 AssetBundle 变体的示例。&lt;/li&gt;
&lt;/ul&gt;
&lt;div style='display:none'&gt;
Each one of these scenes is driven by a very basic script: LoadAssets.cs, LoadScenes.cs, LoadVariants.cs and LoadTanks.cs respectively.
&lt;/div&gt;

&lt;p&gt;每个场景都各个被非常基础的脚本驱动着：LoadAsset.cs，LoadScenes.cs，LoadVariants.cs 和 LoadTanks.cs。&lt;/p&gt;
&lt;div style='display:none'&gt;
At this point it is important to reiterate the workflow provided by the AssetBundle Manager.
&lt;/div&gt;

&lt;p&gt;当前重申一下 AssetBundle Manager 提供的流程还是很重要的。&lt;/p&gt;
&lt;div style='display:none'&gt;
To successfully test the use of AssetBundles, there are three possible scenarios.
&lt;/div&gt;

&lt;p&gt;为了能成功的试验 AssetBundle 的使用，这里有三种可能的情景：&lt;/p&gt;
&lt;div style='display:none'&gt;
In the first scenario, without using the AssetBundle Manager, AssetBundles will need to be built and deployed and all testing is done with the complete and final system in place. In this scenario, with every change to the Assets in a Project, new AssetBundles need to be built and deployed.
&lt;/div&gt;

&lt;p&gt;第一个情景，没有使用 AssetBundle Manager, AssetBundle 将需要被编译和部署，所有的测试都会在最终完整准备后完成。在这个场景中，每次项目中资源的改变，都需要编译和部署新的 AssetBundle。&lt;/p&gt;
&lt;div style='display:none'&gt;
There are two improvements to the workflow provided by the AssetBundle Manager. These are the Local AssetBundle Server and Simulation Mode.
&lt;/div&gt;

&lt;p&gt;AssetBundle Manager 在流程上提供了两个改进。他们是本地资源服务器和模拟模式。&lt;/p&gt;
&lt;div style='display:none'&gt;
In Simulation Mode, the AssetBundle Manager simulates built AssetBundles when running the Project within the editor. This is the fastest workflow to use. Simply enable “Simulation Mode” using the menu item “Assets/AssetBundles/Simulation Mode” and test the project. No AssetBundles will be built. It is important to note, however, that AssetBundle Variants do not work with Simulation Mode. It is also important to note that Assets can be manipulated in the project when Simulation Mode is enabled, and the effect of these changes can seen in the scene view, which will not be possible with deployed AssetBundles.
&lt;/div&gt;

&lt;p&gt;在模拟模式中，编辑器内运行项目时，AssetBundle Manager 会模拟编译后的 AssetBundles。这是使用 AssetBundle 的最快的流程。只需简单的使用 "Assets/AssetBundles/Simulation Mode" 菜单打开 "模拟模式", 然后测试项目。没有 AssetBundle 会被编译。尽管如此，要注意 AssetBundle 变体在模拟模式下不工作。还有要注意的是，模拟模式开始后，资源可以再项目中操作，并且改变后的效果在 Sence 视图中可以看到，而这使用部署后的 AssetBundle 是不行的。&lt;/p&gt;
&lt;div style='display:none'&gt;
The Local AssetBundle Server provides a more accurate representation of deployed AssetBundles, but requires that the AssetBundles be built and stored in a default folder within the project. When the Local AssetBundle Server is enabled, the built AssetBundles will be available to the Editor and all builds running locally that can reach the Editor on the local network. It is worth noting that this is the only way to test AssetBundle Variants locally.
&lt;/div&gt;

&lt;p&gt;本地资源服务器提供了部署的 AssetBundle 更精确的演示，但是需要 AssetBundle 被编译和存储到项目中的默认文件夹。当本地资源服务器开启之后，被编译的 AssetBundle 将可以被编辑器和所有运行在本地的，可以通过本地网络连接编辑器的 build 使用。注意这个是能本地测试 AssetBundle 变体的唯一方式。&lt;/p&gt;
&lt;div style='display:none'&gt;
To run one of the sample scenes, the AssetBundle Manager must be running in one of these modes. To run the AssetBundle Variant scene successfully, AssetBundles must be built and the Local AssetBundle Server must be enabled.
&lt;/div&gt;

&lt;p&gt;要运行示例场景，AssetBundle Manager 必须运行在这些模式中的一种。要成功运行 AssetBundle 变体，AssetBundle 必须被编译并且本地资源服务器必须被开启。&lt;/p&gt;
&lt;p&gt;[译者：剩下的内容请关注本文的第三部分]&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;文章连接：&lt;br /&gt;
&lt;em&gt; &lt;a href="http://blog.shuiguzi.com/unity-5-asset-bundle-he-asset-bundle-manager-1.html"&gt;Unity 5: Asset Bundle 和 Asset Bundle Manager (1)&lt;/a&gt;&lt;br /&gt;
&lt;/em&gt; &lt;a href="http://blog.shuiguzi.com/unity-5-shi-yong-asset-bundle-he-asset-bundle-manager-2.html"&gt;Unity 5: Asset Bundle 和 Asset Bundle Manager (2)&lt;/a&gt;&lt;br /&gt;
* &lt;a href="http://blog.shuiguzi.com/unity-5-shi-yong-asset-bundle-he-asset-bundle-manager-3.html"&gt;Unity 5: Asset Bundle 和 Asset Bundle Manager (3)&lt;/a&gt;&lt;/p&gt;</summary><category term="Unity"></category></entry><entry><title>Unity 5: Asset Bundle 和 Asset Bundle Manager (1)</title><link href="http://blog.shuiguzi.com/unity-5-asset-bundle-he-asset-bundle-manager-1.html" rel="alternate"></link><updated>2015-11-10T16:16:56+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2015-11-10:unity-5-asset-bundle-he-asset-bundle-manager-1.html</id><summary type="html">&lt;p&gt;这篇是 Unity 官方教程 &lt;a href="http://unity3d.com/cn/learn/tutorials/topics/scripting/assetbundles-and-assetbundle-manager?playlist=17117"&gt;AssetBundles and the AssetBundle Manager&lt;/a&gt; 的翻译， 分两部分，这是第一部分。翻译不到之处请不吝指出。非常谢谢！
&lt;hr&gt;&lt;/p&gt;
&lt;div style="display:none"&gt;
###INTRODUCTION

AssetBundles allow on demand streaming and loading of Assets from a local or remote location. With AssetBundles, Assets can be stored remotely and accessed as needed, increasing the flexibility of the project and reducing the initial application size.
&lt;/div&gt;

&lt;h3&gt;介绍&lt;/h3&gt;
&lt;p&gt;AssetBundle 允许按需地从本地或者远程服务器上加载资源(Asset)。通过 AssetBundle 的方式，资源可以远程存储，有需要的时候访问，这样提升了项目的灵活性和降低初始程序的大小。&lt;/p&gt;
&lt;div style="display:none"&gt;
This lesson will introduce AssetBundles and discuss how to work with them, the steps and stages of the AssetBundle workflow, how to assign Assets to an AssetBundle, how and when to use AssetBundle Variants, how to build and test AssetBundles and Variants - all in the context of using the AssetBundle Manager to simplify creating, testing and deploying AssetBundles. The final section of the lesson will cover specific examples of loading and using AssetBundles and AssetBundle Variants with simple use-cases and simple example scripts.
&lt;/div&gt;

&lt;p&gt;这篇教程将会介绍 AssetBundle 和及其应用，AssetBundle 流程的步骤和各阶段和怎么样编译和测试 AssetBundle 及其变体 - 所有的一切可以用 AssetBundle Manager 来简化创建，测试和部署 AssetBundle。教程的最后一部分将使用一些加载和使用 AssetBundle 变体的简单用例和脚本示例。&lt;/p&gt;
&lt;div style='display:none'&gt;
###SAMPLE PROJECT
&lt;/div&gt;

&lt;h3&gt;演示项目&lt;/h3&gt;
&lt;div style='display:none'&gt;
Before starting this Tutorial Article, it would be best to download the AssetBundle Manager with the AssetBundle Sample project here.
&lt;/div&gt;

&lt;p&gt;在开始教程之前，最后先下载好 AssetBundle 和 AssetBundle Manager 的&lt;a href="http://u3d.as/jyk"&gt;示例程序&lt;/a&gt;。&lt;/p&gt;
&lt;div style='display:none'&gt;
###WHAT IS AN ASSETBUNDLE?

AssetBundles are files created in the Unity editor during edit-time, which can be used later by a build of a project at run-time. AssetBundles can contain asset files such as models, materials, textures and scenes. AssetBundles cannot contain scripts.
&lt;/div&gt;

&lt;h3&gt;什么是 AssetBundle&lt;/h3&gt;
&lt;p&gt;AssetBundle 是由 Unity 编辑器在编辑时期创建的，可以被编译出来的程序在运行期使用的文件。AssetBundle 可以包含模型，材质，纹理和场景文件等资源。但是 AssetBundle 不能包含脚本。&lt;/p&gt;
&lt;div style='display:none'&gt;
Specifically, an AssetBundle is a collection of assets and/or scenes from a project saved in a compact file with the purpose of being loaded separately to the built executable application. AssetBundles can be loaded on demand by a game or application built in Unity. This allows streaming and asynchronous loading of content such as models, textures, audio clips, or even entire scenes. AssetBundles can be “pre-cached” and stored locally for immediate loading when first running an application. The primary purpose of AssetBundles, however, is to stream content on demand from a remote location, to be loaded into the application as necessary. AssetBundles can contain any kind of asset type recognized by Unity, including custom binary data. The only exception is that script assets are not allowed.
&lt;/div&gt;

&lt;p&gt;明确一点说，一个 AssetBundle 就是存储项目资源和 / 或场景集合的文件，目的是为了之后在游戏或者程序中加载。
AssetBundle 可以被在 Unity 中编译出来的游戏或者程序按需加载。它允许传送和异步加载像模型，材质，声音剪辑，
甚至是整个场景。当在程序中初次运行时， AssetBundle 会被存储到本地 “预缓存” 以备以后被立即加载。Assetbundle 的主要目是为了需要的时候能从远程传送内容并加载进程序。AssetBundle 可以包含可以被 Unity 识别的任何资源类型，包括二进制文件。唯一的另外就是不允许是脚本资源。&lt;/p&gt;
&lt;div style='display:none'&gt;
There are many use-cases for AssetBundles. New content can be dynamically loaded and unloaded from an application. Post-release DLC can easily be implemented. An application’s disk footprint or size can be reduced when first deployed, with assets being loaded after installation of the application and only as the assets are needed. Platform and device specific assets can be loaded without having to download or store redundant assets for other platforms or resolutions. Localization of applications becomes easy by downloading and installing only the assets needed based on the user’s location, language or preferences. Applications can be fixed, changed or updated with new content without having to resubmit the application for approval.
&lt;/div&gt;

&lt;p&gt;AssetsBundle 有很多用处。比如新的内容可以动态地在程序中加载和释放。可以很简单实现发布后的可下载内容(DLC, Downloadable Content)。
程序第一次安装的的时候的大小或者磁盘占用空间会减少，资源只有安装的程序需要的时候才会被加载。平台或者设备相关的资源加载时可以不必要下载或冗余存储其他平台和方案中的资源。本地化的程序可以更容易来下载和安装基于用户位置，语言和偏好的资源。新的内容可以下修复，改变或更新，而不需要重新发布程序。&lt;/p&gt;
&lt;div style='display:none'&gt;
The detailed organization of any project’s assets into AssetBundles will be heavily dependent upon the needs of that particular project. There are, however, some basic tenets to understand about AssetBundles.
&lt;/div&gt;

&lt;p&gt;AssetBundle 内项目资源的组织严重依赖于项目的需求。但是，也有一些可以更好的理解 AssetBundle 的原则。&lt;/p&gt;
&lt;div style='display:none'&gt;
* AssetBundles are downloaded and cached in their entirety.
* AssetBundles do not need to be loaded in their entirety.
* Assets in AssetBundles can have dependencies on other assets.
* Assets in AssetBundles can share dependencies with other assets.
* Each AssetBundle has some technical overhead, both in the size of the file and the need to manage that file.
* AssetBundles should be built for each target platform.
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;AssetBundle 是整体被下载和缓存的&lt;/li&gt;
&lt;li&gt;AssetBundle 不需要整体被加载&lt;/li&gt;
&lt;li&gt;AssetBundle 中的资源可以包括依赖的其他资源&lt;/li&gt;
&lt;li&gt;AssetBundle 中的资源可以共享依赖的其他资源&lt;/li&gt;
&lt;li&gt;每个 AssetBundle 在文件大小和处理上都有一些技术上的开销。&lt;/li&gt;
&lt;li&gt;每个平台上的 AssetBundle 都需要单独编译&lt;/li&gt;
&lt;/ul&gt;
&lt;div style='display:none'&gt;
AssetBundles are downloaded in their entirety. If an AssetBundle contains Assets that are not immediately needed, even though they won’t necessarily be loaded into the scene, they will take up both bandwidth to download and disk-space to store.
&lt;/div&gt;

&lt;p&gt;AssetBundle 是整体被下载的。如果在一个 AssetBundle 中包含不需要立即加载，甚至不需要加载进场景的资源，它们也会占用下载带宽和存储空间。&lt;/p&gt;
&lt;div style='display:none'&gt;
The contents of AssetBundles do not need to be loaded in their entirety. Once an AssetBundle has been downloaded, Assets can be selectively loaded from the AssetBundle.
&lt;/div&gt;

&lt;p&gt;AssetBundle 的内容不需要整体加载的。一旦 AssetBundle 被下载过了，资源可以有选择性的从 AssetBundle 中加载。&lt;/p&gt;
&lt;div style='display:none'&gt;
Assets can have dependencies on other assets. For example, a model can have several dependencies. The final model in the game is not just mesh data, but it is a GameObject with all of its Components and all of the Component’s dependencies.
&lt;/div&gt;

&lt;p&gt;资源能包括依赖的其他资源。比如，一个模型有好几个依赖。最终在游戏里的摩西不光只有网格数据，它会是一个包含所有组件和组件的依赖项的游戏对象(GameObject)。&lt;/p&gt;
&lt;p&gt;&lt;img alt="meshmodelwmaterial" src="http://unity3d.com/sites/default/files/meshmodelwmaterial.png" width="30%" /&gt;&lt;br /&gt;
&lt;small&gt;&lt;em&gt;应用了材质的模型&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
This model is dependent on a Material Asset in the model’s Mesh Renderer, and that Material Asset is dependent on a Texture Asset for the Material’s Albedo Texture. As a matter of fact, this tank is dependent upon three Materials, not just one.
&lt;/div&gt;

&lt;p&gt;这个模型依赖于在模型的 Mesh Renderer 组件中的一个材质资源，而这个材质资源依赖于应用在材质的 Albedo 纹理上的纹理资源。实际上，这个坦克依赖了三个材质，而不是仅仅一个。&lt;/p&gt;
&lt;p&gt;&lt;img alt="dependencies" src="http://unity3d.com/sites/default/files/dependencies2.png" width="100%" /&gt;
&lt;div style='display:none'&gt;
&lt;em&gt;The tank model’s Asset dependency chain: Model &amp;gt; Material &amp;gt; Texture&lt;/em&gt;
&lt;/div&gt;
&lt;small&gt;&lt;em&gt;坦克模型资源的依赖链：模型 &amp;gt; 材质 &amp;gt; 纹理&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
Assets can share dependencies with other assets. For example, two different models can share the same Material, which in turn could be dependent on a Texture.
&lt;/div&gt;

&lt;p&gt;资源可以共享依赖的其他资源。比如，两个模型可以共享同一个材质, 相应的可能依赖于同一个纹理。&lt;/p&gt;
&lt;div style='display:none'&gt;
_Both rock columns are different models that share the same Material_
&lt;/div&gt;

&lt;p&gt;&lt;img alt="two rock columns" src="http://unity3d.com/sites/default/files/two_rock_columns.png" width="90%" /&gt;&lt;br /&gt;
&lt;small&gt;&lt;em&gt;两个共享同一个材质的不同的岩石柱模型&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div style='display:none'&gt;
Each AssetBundle has some technical overhead. AssetBundles are files that wrap Assets. This wrapper adds to the overall size of the AssetBundle. Even though this is not a significant increase in size, it is measureable. AssetBundles also require a certain amount of management to organize, create, upload and maintain. The more AssetBundles being used increases overhead for a project, both technical and managerial.
&lt;/div&gt;

&lt;p&gt;每个 AssetBundle 都会有一些技术上的开销。AssetBundles 是包装资源的文件。这个包装会增加 AssetBundle 的总大小。即使这个增量不大，可测量。AssetBundle 还要求一定量的处理来组织，创建，上传和维护。从技术上和处理上，使用的 AssetBundle 越多，其在项目中的开销越大。&lt;/p&gt;
&lt;div style='display:none'&gt;
When organizing AssetBundles, a balance must be struck between too many small AssetBundles that need to be tracked and generate overhead, and too few AssetBundles that are large and contain unnecessary or redundant data. The exact balance will depend heavily upon the needs of the project.
&lt;/div&gt;

&lt;p&gt;当组织 AssetBundle 时，需要在 &lt;strong&gt;使用数量多体积小但需要跟踪和生成开销的 AssetBundle &lt;/strong&gt; 还是 
&lt;strong&gt;数量小但体积大且包含很多不必要的多余的数据的 AssetBundle&lt;/strong&gt; 中做出平衡。具体的平衡策略严重依赖于项目的需求。&lt;/p&gt;
&lt;div style='display:none'&gt;
The contents of an AssetBundle are compiled and optimized for the current target platform according to the Import Settings and the current Target Platform. Because of this, AssetBundles should be built for each target platform.
&lt;/div&gt;

&lt;p&gt;AssetBundle 的内容是根据当前的 Import Settings 和 平台来编译和优化的。所以，AssetBundle 需要为不同平台编译。&lt;/p&gt;
&lt;div style='display:none'&gt;
###MANIFESTS AND DEPENDENCY MANAGEMENT

There are several important points to understand regarding dependencies and dependency management.
&lt;/div&gt;

&lt;h3&gt;清单和依赖管理&lt;/h3&gt;
&lt;p&gt;理解关于依赖和依赖管理，有几个重要的点。&lt;/p&gt;
&lt;div style='display:none'&gt;
Asset dependencies are never lost. Dependent Assets will be added to the AssetBundle automatically along with the selected Asset if that dependent Asset has not been assigned to any AssetBundle when the AssetBundles are built. This is very convenient and prevents the loss of dependent assets. However, this can also cause the duplication of Assets. For example, using the two rock columns above which share the same Material, if both rock columns are in separate AssetBundles and the Material is not explicitly assigned to an AssetBundle, that Material will be added to both AssetBundles containing the rock columns. It is worth noting that when this happens, both duplicate Assets are stored in their respective AssetBundles and the Asset dependencies are now split. Each model Asset will now depend upon the local copy of the Material Asset, removing any advantage of having shared Material Assets. To prevent this from happening, the Material needs to be explicitly assigned to an AssetBundle. This can be an AssetBundle of its own, or shared with other Assets. In either case, the AssetBundles with the rock columns will now be dependent upon the AssetBundle with the rocks’ Material.
&lt;/div&gt;

&lt;p&gt;资源依赖永远不会丢失。当 AssetBundle 编译的时候，即便独立的资源没有指定到任何的 AssetBundle，也会跟着被选中的资源中被自动的加入 AssetBundle中。这样很便捷并且可以防止独立资源的丢失。尽管如此，这还是会引起资源的重复。比如，以上面使用同一个材质的两个岩石柱为例，如果两个岩石柱分开在不同的两个 AssetBundles 中并且这个材质没有显式的指定到一个 AssetBundle 上，这个材质就会被加入到这两个包含岩石柱的 AssetBndles 中。这个值得注意，两个重复的资源现在被存储到各自的 AssetBundle 中，资源的依赖性被分离了。每个模型资源现在依赖于各自的材质资源的本地拷贝，丢失了共享材质的优势。为了比避免这个发生，这个材质需要显式的指定到一个 AssetBundle 中。这样 AssetBundle 可以自己使用它也，也可以和其他资源一起共享。这种情况下，拥有岩石柱的 AssetBundles 依赖于拥有岩石材质的 AssetBundle 了。&lt;/p&gt;
&lt;div style='display:none'&gt;
The dependencies and other information for a project’s AssetBundles are stored in a Manifest. The manifest is very much like a “table of contents” for the project’s AssetBundles. When AssetBundles are built, Unity generates a large amount of data. The details of this data are saved in the Manifest. There is one Manifest created for each target platform. The Manifest lists all of the AssetBundles created from the project for the current build target, and stores and tracks all of their dependencies. With the Manifest, it is possible to query all AssetBundles and all their dependencies.
&lt;/div&gt;

&lt;p&gt;项目的 AssetBundle 的依赖和其他信息存储在 &lt;strong&gt;清单(Manifest)&lt;/strong&gt; 中。清单非常像关于项目的 AssetBundles 的 "目录"。当 AssetBundle 在编译的时候，Unity 会生产大量的数据。数据的细节存储在清单里。每个平台都会创建一个清单。清单为编译对象列举了所有从项目创建的 AssetBundles，存储位置和跟踪他们的依赖。利用清单，可以查询所有的 AssetBundles 和他们的依赖。&lt;/p&gt;
&lt;div style='display:none'&gt;
There is one special setup for AssetBundles called AssetBundle Variants. AssetBundle Variants are designed to support one specific use case - remapping a choice of different Assets to individual objects in a project. This is particularly useful when working with projects that need to select one Asset from a wide variety of different possible choices based on criteria like resolution, language, localization, or user preference. AssetBundle Variants can hold the variety of Assets required to cover all supported options for an object and the desired Asset can be mapped to that object as needed from the chosen AssetBundle Variant.
&lt;/div&gt;

&lt;p&gt;对于 AssetBundles 有一种特殊设置，叫做 AssetBundle 变体。AssetBundle 变体被设计来支持更特殊的使用场景 - 对单独的对象映射不同的资源选择。这对于需要依据一些标准，如分辨率，语言，地区或者用户偏好来从很多可能中选择一个资源的项目特别有用。AssetBundle 变体可以包含用来覆盖所有支持的选项的多种资源，
并且按需从选择的 AssetBundle 变体中映射期望的资源到对象上。&lt;/p&gt;
&lt;div style='display:none'&gt;
AssetBundles are files which contain asset files such as models, materials, textures and scenes. AssetBundles are created by the Unity editor during edit-time and can be used later at run-time by a built application. AssetBundles are designed to load Assets on demand from a local or remote source. AssetBundles can have Variants which can be mapped to objects in the scene depending upon the user’s preference.
&lt;/div&gt;

&lt;p&gt;AesstBundles 是包含模型，材质，纹理和场景文件等资源文件的文件。AssetBundles 在编辑器的编辑期创建，可以被编译出来的程序之后使用。AssetBundles 被设计来从本地或远程源中按需加载资源。AssetBundles 可以拥有变体，可以基于用户偏好映射到对象上。&lt;/p&gt;
&lt;div style='display:none'&gt;
For more detailed information about working with AssetBundles and the AssetBundle Manager, please see the next tutorial lesson in this series.
&lt;/div&gt;

&lt;p&gt;关于使用 AssetBundle 和  AssetBundle Manger 的更多细节，请看这系列的下一个教程。&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;文章连接：&lt;br /&gt;
&lt;em&gt; &lt;a href="http://blog.shuiguzi.com/unity-5-asset-bundle-he-asset-bundle-manager-1.html"&gt;Unity 5: Asset Bundle 和 Asset Bundle Manager (1)&lt;/a&gt;&lt;br /&gt;
&lt;/em&gt; &lt;a href="http://blog.shuiguzi.com/unity-5-shi-yong-asset-bundle-he-asset-bundle-manager-2.html"&gt;Unity 5: Asset Bundle 和 Asset Bundle Manager (2)&lt;/a&gt;&lt;br /&gt;
* &lt;a href="http://blog.shuiguzi.com/unity-5-shi-yong-asset-bundle-he-asset-bundle-manager-3.html"&gt;Unity 5: Asset Bundle 和 Asset Bundle Manager (3)&lt;/a&gt;&lt;/p&gt;</summary><category term="Unity"></category></entry><entry><title>远离 XCodeGhost 影响，各种 XCode 版本下载</title><link href="http://blog.shuiguzi.com/yuan-chi-xcodeghost-ying-xiang-ge-chong-xcode-ban-ben-xia-zai.html" rel="alternate"></link><updated>2015-09-23T16:33:00+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2015-09-23:yuan-chi-xcodeghost-ying-xiang-ge-chong-xcode-ban-ben-xia-zai.html</id><summary type="html">&lt;p&gt;最近 &lt;a href="http://baike.baidu.com/link?url=2582FqWOjsj0CU1shau0JPU--sgJ-moKqnYCcDy87QwZd5jPUwyxiFRbfjmrb8tpZcN8jfSu2Iw-Vokfjn8tJK"&gt;XCodeGhost&lt;/a&gt; 病毒闹的沸沸扬扬,
多款 app 受其影响。就个人觉得之所以会出现这么多从第三方下载 XCode 的情况，可能有如下几个原因引起：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载 XCode 太慢&lt;/li&gt;
&lt;li&gt;需要老版本的 XCode，但是苹果官网找不到 XCode 老版本&lt;/li&gt;
&lt;li&gt;习惯性从网盘等第三方下软件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;速度太慢的问题怎么解决相信网络上有一大推方法，这里就不多说了，下面主要列出 XCode 各个版本的下载地址（&lt;strong&gt;需要 apple id&lt;/strong&gt;）:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xcode 7&lt;ul&gt;
&lt;li&gt;7.1 beta: &lt;a href="https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1_beta/Xcode_7.1_beta.dmg"&gt;https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7.1_beta/Xcode_7.1_beta.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;7.0 : &lt;a href="https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7/Xcode_7.dmg"&gt;https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7/Xcode_7.dmg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Xcode 6&lt;ul&gt;
&lt;li&gt;6.4: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.4/Xcode_6.4.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.4/Xcode_6.4.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6.3.2: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.3.2/Xcode_6.3.2.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.3.2/Xcode_6.3.2.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6.2: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.2/Xcode_6.2.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_6.2/Xcode_6.2.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6.1.1: &lt;a href="https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg"&gt;https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;6.0.1: &lt;a href="https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.0.1/xcode_6.0.1.dmg"&gt;https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.0.1/xcode_6.0.1.dmg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Xcode 5&lt;ul&gt;
&lt;li&gt;5.1.1: &lt;a href="https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_5.1.1/xcode_5.1.1.dmg"&gt;https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_5.1.1/xcode_5.1.1.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5.0.2: &lt;a href="https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_5.0.2/xcode_5.0.2.dmg"&gt;https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_5.0.2/xcode_5.0.2.dmg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Xcode 4&lt;ul&gt;
&lt;li&gt;4.6.3: &lt;a href="https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg"&gt;https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.6.3/xcode4630916281a.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.5.2: &lt;a href="https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.5.2/xcode4520418508a.dmg"&gt;https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.5.2/xcode4520418508a.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.4.1: &lt;a href="https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.4.1/xcode_4.4.1_6938145.dmg"&gt;https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.4.1/xcode_4.4.1_6938145.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.3.2: &lt;a href="https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.3.2/xcode_432_lion.dmg"&gt;https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.3.2/xcode_432_lion.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.2: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.2_for_lion_21264/installxcode_42_lion.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.2_for_lion_21264/installxcode_42_lion.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.1: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.1_for_lion_21263/installxcode_41_lion.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.1_for_lion_21263/installxcode_41_lion.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4.0.2: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.0.2_and_ios_sdk_4.3/xcode_4.0.2_and_ios_sdk_4.3.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_4.0.2_and_ios_sdk_4.3/xcode_4.0.2_and_ios_sdk_4.3.dmg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他更老版本&lt;ul&gt;
&lt;li&gt;3.2.6: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_3.2.6_and_ios_sdk_4.3__final/xcode_3.2.6_and_ios_sdk_4.3.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_3.2.6_and_ios_sdk_4.3__final/xcode_3.2.6_and_ios_sdk_4.3.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.1.4: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_3.1.4_developer_tools/xcode314_2809_developerdvd.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_3.1.4_developer_tools/xcode314_2809_developerdvd.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.0: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_3.0/xcode_3.0.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_3.0/xcode_3.0.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.5: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_2.5_developer_tools/xcode25_8m2558_developerdvd.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_2.5_developer_tools/xcode25_8m2558_developerdvd.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.4.1: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_2.4.1/xcode_2.4.1_8m1910_6936315.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_2.4.1/xcode_2.4.1_8m1910_6936315.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.3: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_2.3/xcode_2.3_8m1780_oz693620813.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_2.3/xcode_2.3_8m1780_oz693620813.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.2.1: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_tools_2.2.1/xcode_2.2.1_8g1165_018213632.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_tools_2.2.1/xcode_2.2.1_8g1165_018213632.dmg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.5: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_v1.5/xcode_tools_1.5_cd.dmg.bin"&gt;http://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_v1.5/xcode_tools_1.5_cd.dmg.bin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.0: &lt;a href="http://developer.apple.com/devcenter/download.action?path=/Mac_OS_X/Mac_OS_X_10.3_Build_7B85/7B85_Xcode_CD.dmg"&gt;http://developer.apple.com/devcenter/download.action?path=/Mac_OS_X/Mac_OS_X_10.3_Build_7B85/7B85_Xcode_CD.dmg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下载地址来源于 &lt;a href="http://stackoverflow.com/questions/10335747/how-to-download-xcode-4-5-6-7-and-get-the-dmg-file"&gt;http://stackoverflow.com/questions/10335747/how-to-download-xcode-4-5-6-7-and-get-the-dmg-file&lt;/a&gt;。&lt;/p&gt;</summary><category term="Unity"></category></entry><entry><title>如何改变图片亮度</title><link href="http://blog.shuiguzi.com/ru-he-gai-bian-tu-pian-liang-du.html" rel="alternate"></link><updated>2015-09-15T22:28:00+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2015-09-15:ru-he-gai-bian-tu-pian-liang-du.html</id><summary type="html">&lt;p&gt;有的时候我们有可能有需求将较暗的图像简单的提亮，这篇文章主要讲一种改变图片亮度的方式。我们从两个问题入手：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了提亮图片，我们操作的对象是什么？&lt;/li&gt;
&lt;li&gt;怎么操作对象能达到改变亮度的效果？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Unity 中的 Color&lt;/h3&gt;
&lt;p&gt;首先我们来回答第一个问题。聪明的你可能已经知道，我们要操作的对象是 &lt;strong&gt;像素&lt;/strong&gt; 。Unity 中 Color 
类的一个实例能表示一个像素点。&lt;/p&gt;
&lt;p&gt;Color 类有 4 个字段表示颜色的各通道数值，他们分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; 红色通道&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt; 绿色通道&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; 蓝色通道&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; aplha通道&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各个通道的数值都是被标准化为 &lt;code&gt;0...1&lt;/code&gt; 之间的值。&lt;/p&gt;
&lt;h3&gt;改变亮度的算法&lt;/h3&gt;
&lt;p&gt;上面 Color 各通道的数值都被标准化，这里我们也依葫芦画瓢来把我们要提高的亮度 brightness 一个数值，不过我们设定它的取值区间为
&lt;code&gt;-1...1&lt;/code&gt;。当 brightness 为负数的时候，图片减暗，正数时，图片变亮。&lt;/p&gt;
&lt;p&gt;算法, 假设 RGB 通道值为 c：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 brightness &amp;lt; 0 时 c = c + c * brightness&lt;/li&gt;
&lt;li&gt;当 brightness &amp;gt;= 0 时 c = c + c * ( 1 / (1 - brightness) - 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;代码实现：&lt;/h3&gt;
&lt;p&gt;结合上面两个点，我们可以写出类似下面示例代码实现。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;BrightenScript&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MonoBehaviour&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;RangeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Texture2D&lt;/span&gt; &lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Start&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Brighten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;GetComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Renderer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;material&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainTexture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Brighten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Texture2D&lt;/span&gt; &lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPixels&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// 对 RGB 通道都做处理&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BrightenChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BrightenChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BrightenChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetPixels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;texture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Apply&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;BrightenChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brightness&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;brightness 为 0.6 时效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="0.6" src="images/BrigthenImage/b1.png" width="24%" /&gt; &lt;/p&gt;
&lt;p&gt;brightness 为 -0.5 时效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="-0.5" src="images/BrigthenImage/b2.png" width="24%" /&gt;&lt;/p&gt;</summary><category term="Unity"></category><category term="Graphic"></category></entry><entry><title>UNet 0x06: Command</title><link href="http://blog.shuiguzi.com/unet-0x06-command.html" rel="alternate"></link><updated>2015-08-13T14:53:00+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2015-08-23:unet-0x06-command.html</id><summary type="html">&lt;p&gt;最开始我们来对上篇文章 &lt;a href="http://blog.shuiguzi.com/unet-0x05-syncvar.html"&gt;UNet 0x05: SyncVar&lt;/a&gt; 中的程序做点修改。在这里也建议朋友们先阅读上篇，然后继续阅读下面内容。&lt;/p&gt;
&lt;p&gt;我们先把只在 Server 端绘制的按钮：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ChangeState&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ChangeState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改成在 Client 端绘制&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 这里是改变的地方&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ChangeState&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ChangeState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改完之后我们运行程序会得到一个结果：无论我们怎么点 ChangeState 按钮，Client 端左上角文字有变化，而 Server 端左上角的文字都不会变化。&lt;/p&gt;
&lt;p&gt;这为什么呢？我们上篇文章中提到 SyncVar 只能从 Server 到 Client 端的方向起作用，所以我们上面点击 ChangeState 按钮
是在 Client 端执行的，只改变了 Client 端的值，不会对 Server 端起作用。&lt;/p&gt;
&lt;p&gt;这篇要介绍的就是能从 Client 端做出的改变也能同步的所有终端的功能。它就是 NetworkBevhaiour 提供 &lt;strong&gt;sending commands&lt;/strong&gt; 功能。&lt;/p&gt;
&lt;h3&gt;Command&lt;/h3&gt;
&lt;p&gt;那什么是 Command 呢？如果了解设计模式的朋友应该知道有种设计模式叫做 Command 模式（命令模式），这里的 Command 代表一种行为，
UNet 中的 Command 也是代表一种行为，换句话说就是一个函数。但是在 UNet 中这个函数有些特别的规定，它要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数的名字 &lt;strong&gt;必须以 Cmd 开头&lt;/strong&gt;，这里注意大小写哟。&lt;/li&gt;
&lt;li&gt;必须带上 &lt;strong&gt;[Command]&lt;/strong&gt; 属性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用代码来示范下就是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;CmdDoSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里还有几点需要知道的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Command 是从 Client 端发起的。当需要从 Client 端发出改变的时候使用它。&lt;/li&gt;
&lt;li&gt;每个客户端的 spawn 之后的对象，都会在其他各端（包括 Server）有同样的实例。而真实执行 Command 的是在 Server 上
的那个实例。所以其实 Command 的执行最终也是在 Server 上的，只不过 Client 会发送请求，要求 Server 上对应的实例来
执行这个 Command。这正好符合 UNet 是以 Server 为主导的理念。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们继续对上篇文章中的代码做些修改。&lt;/p&gt;
&lt;p&gt;首先，我们新加入一个 Command 方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;CmdChangeState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ChangeState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后我们把 ChangeState 调用的方法从 &lt;code&gt;ChangeState()&lt;/code&gt; 改成 &lt;code&gt;CmdChangeState()&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnGUI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ChangeState&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;CmdChangeState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样我们就利用了 Command 方法 &lt;code&gt;CmdChangeState&lt;/code&gt; 来作出改变了。&lt;/p&gt;
&lt;h3&gt;示例代码&lt;/h3&gt;
&lt;p&gt;下面是加上 Command 方法之后的最终代码。这样每次在 Client 端点击 ChangeState 按钮的时候，各个终端中 State 字段的值都会发生改变。
Demo 程序的地址为: &lt;a href="https://github.com/wudixiaop/UNet/tree/master/Assets/106%20-%20Command"&gt;https://github.com/wudixiaop/UNet/tree/master/Assets/106%20-%20Command&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Networking&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;CommandSample&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NetworkBehaviour&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SyncVar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Init State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ChangeState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MaxValue&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;CmdChangeState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ChangeState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;OnGUI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ChangeState&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//  ChangeState();&lt;/span&gt;
            &lt;span class="n"&gt;CmdChangeState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;h3&gt;SyncVar Vs Command&lt;/h3&gt;
&lt;p&gt;下面是一张从 Unity 手册中借来的一种图片，&lt;/p&gt;
&lt;p&gt;&lt;img alt="UNetDirection" src="images/UNet/UNetDirections.jpg" width="46%" /&gt;&lt;/p&gt;
&lt;p&gt;上面图中的 &lt;code&gt;State Updates&lt;/code&gt; 是指的 SyncVar。我们从图中可以了解到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SyncVar 是从 Server -&amp;gt; Client 方向来改变所有端的同一对象实例的状态&lt;/li&gt;
&lt;li&gt;Command 是从 Client -&amp;gt; Server 方向来改变所有端的同一对象实例的状态&lt;/li&gt;
&lt;/ul&gt;</summary><category term="UNet"></category><category term="Unity"></category></entry><entry><title>UNet 0x05: SyncVar</title><link href="http://blog.shuiguzi.com/unet-0x05-syncvar.html" rel="alternate"></link><updated>2015-08-15T14:53:00+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2015-08-15:unet-0x05-syncvar.html</id><summary type="html">&lt;p&gt;开篇需要先介绍一个 UNet 系统里面提供的一个类，名字叫做 &lt;strong&gt;NetworkBehaviour&lt;/strong&gt;。看到名字，不禁让人想起
 MonoBehaviour。NetworkBehaviour 继承自 MonoBehaviour，所以基于 NetworkBehaviour 的脚本也是能挂在 
 GameObject 上面的。&lt;/p&gt;
&lt;p&gt;NetworkBehaviour 给我们提供了什么功能呢？大概是如下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synchronized Variables&lt;/li&gt;
&lt;li&gt;Network callbacks&lt;/li&gt;
&lt;li&gt;Server and Client functions&lt;/li&gt;
&lt;li&gt;Sending Commands&lt;/li&gt;
&lt;li&gt;Client RPC Calls&lt;/li&gt;
&lt;li&gt;Networked Events&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了让描述更准确，上面采用了 &lt;a href="http://docs.unity3d.com/Manual/class-NetworkBehaviour.html"&gt;官方手册&lt;/a&gt; 
中的英文描述。这篇的主角就是 Synchronized Variables。&lt;/p&gt;
&lt;h3&gt;SyncVar 初见&lt;/h3&gt;
&lt;p&gt;我们在接下来把 Synchronized Variables 简称为 SyncVar 。我们先给它来下个粗略的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它是 NetworkBehaviour 的一个带有 [SyncVar] 属性的字段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意定义中 &lt;strong&gt;SyncVar 是字段，不是属性&lt;/strong&gt;。示意代码大概是这个样子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;SpaceShip&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NetworkBehaviour&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SyncVar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;health&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SyncVar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;playerName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面代码中带有两个 SyncVar。&lt;/p&gt;
&lt;p&gt;当 SyncVar 发生改变时，UNet 会从 Server 端向所有有效的 Client 端发送这些改变。注意这里的方向，是从 Server 
到 Client ，而不是从 Client 到 Server 的方向。&lt;/p&gt;
&lt;h3&gt;SyncVar 数据类型&lt;/h3&gt;
&lt;p&gt;既然 SyncVar 是字段，字段是有数据类型的。UNet 中这样规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可以是&lt;/strong&gt; 所有基本数据类型，比如 string，int，float，bool 等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以是&lt;/strong&gt; 结构数据，比如 Vector3 等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可以是&lt;/strong&gt; 类、列表、集合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大概就是 &lt;strong&gt;值类型可以，引用类型不可以&lt;/strong&gt;。当然大部分情况下是这样，特殊情况是存在的。除了 &lt;code&gt;String&lt;/code&gt; 这个特殊的
引用类型除外，下面会介绍。&lt;/p&gt;
&lt;p&gt;那就是疑问了，既然不能是列表和集合，那如果真要同步一组数组怎么办？&lt;/p&gt;
&lt;p&gt;UNet 提供了一些特殊的类，称之为 SyncList, 这些类是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SyncListString&lt;/li&gt;
&lt;li&gt;SyncListFloat&lt;/li&gt;
&lt;li&gt;SyncListInt&lt;/li&gt;
&lt;li&gt;SyncListUInt&lt;/li&gt;
&lt;li&gt;SyncListBool &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他们都继承自 &lt;code&gt;SyncList&amp;lt;T&amp;gt;&lt;/code&gt; 泛型类。当然内建类型有局限性，不能满足所有需求，所以 UNet 还给我们提供
了 &lt;code&gt;SyncListStruct&amp;lt;T&amp;gt;&lt;/code&gt; 泛型类，我们可以通过定义它的子类来扩展，从而达到我们的需求。下面是一个 &lt;code&gt;SyncListStruct&amp;lt;T&amp;gt;&lt;/code&gt; 的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;MyScript&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NetworkBehaviour&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;POW&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;SyncListPOW&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SyncListStruct&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;POW&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;SyncListPOW&lt;/span&gt; &lt;span class="n"&gt;m_pows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SyncListPOW&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意到没有？上面的 &lt;strong&gt;m_pows&lt;/strong&gt; 字段并没有 [SyncVar] 属性。这里有一点非常重要，&lt;strong&gt;SyncList 类型
的字段，不需要带上 [SyncVar] 属性&lt;/strong&gt;。这下子，上面给出的定义要改改了。&lt;/p&gt;
&lt;h3&gt;SyncVar 定义&lt;/h3&gt;
&lt;p&gt;让我们来重新给 SyncVar 下定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它是 NetworkBehaviour 中的一个字段， 如果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它的类型是基本类型或结构，则需要带上 [SyncVar] 属性&lt;/li&gt;
&lt;li&gt;它的类型继承自 SyncList&lt;T&gt; 或者 SyncListStruct&lt;T&gt;，则不需要带上 [SyncVar] 属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3&gt;代码示例&lt;/h3&gt;
&lt;p&gt;Demo 可以再这里找到：&lt;a href="https://github.com/wudixiaop/UNet/tree/master/Assets/105%20-%20Sync%20Var"&gt;https://github.com/wudixiaop/UNet/tree/master/Assets/105%20-%20Sync%20Var&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SyncVar 相关代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Networking&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;SyncVarSample&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NetworkBehaviour&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SyncVar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Init State&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ChangeState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;State&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MaxValue&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnGUI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// 因为 UNet 是以 Server 为主导的系统，只有在 Server 端改变值才能起作用&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ChangeState&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ChangeState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;需要将上面脚本挂到 Spawn Prefab 上面（Spawn Prefab详细参照&lt;a href="http://blog.shuiguzi.com/unet-0x04-zuo-yi-ge-jian-dan-de-network-manager-jie-mian.html"&gt;上一篇文章&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;将 Demo 程序 build 之后，单独运行 build 出来的程序，并启动 Server。在 Unity 编辑器中运行程序，连接 Server。
我们会得到如下截图的样子。&lt;/p&gt;
&lt;p&gt;&lt;img alt="syncvaroutput" src="images/UNet/syncvarOutput.jpg" width="100%" /&gt;&lt;/p&gt;
&lt;p&gt;我们每次点击 ChangeState 按钮，左上角的数字就会发生变化。Server 改变了 State 字段的值，Client 端也对应发生改变。&lt;/p&gt;
&lt;p&gt;这篇就到这里。Enjoy!&lt;/p&gt;</summary><category term="UNet"></category><category term="Unity"></category></entry><entry><title>UNet 0x04: 做一个简单的 Network Manager 界面</title><link href="http://blog.shuiguzi.com/unet-0x04-zuo-yi-ge-jian-dan-de-network-manager-jie-mian.html" rel="alternate"></link><updated>2015-08-12T14:53:00+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2015-08-12:unet-0x04-zuo-yi-ge-jian-dan-de-network-manager-jie-mian.html</id><summary type="html">&lt;p&gt;上一篇中我们引入了 NetworkManager 组件，然后在代码里面通过它来建立了网络连接。这篇让我们来把连接部分的代码独立出来，并提供 GUI 来达到管理 Server / Client 的开启和停止的目的。
这样我们以后就可以重复利用代码了。&lt;/p&gt;
&lt;p&gt;下面是我们这个简单的 NetworkManger 界面提供的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以启动 / 停止 Server，并且多个程序端只能启动一个 Server&lt;/li&gt;
&lt;li&gt;可以启动 / 停止 Client 并连接 Server&lt;/li&gt;
&lt;li&gt;当 Server 停止时，所有 Client 端界面都会重置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个简单的界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="ui" src="images/UNet/SimpleUI.PNG" /&gt;&lt;/p&gt;
&lt;p&gt;本篇中的 demo 可以 &lt;a href="https://github.com/wudixiaop/UNet/tree/master/Assets/104%20-%20simple%20network%20GUI"&gt;戳这里&lt;/a&gt; 得到，下面就 Demo 细说一下。&lt;/p&gt;
&lt;h3&gt;代码&lt;/h3&gt;
&lt;p&gt;我们通过 NetworkManager 的 &lt;code&gt;StartServer()&lt;/code&gt; / &lt;code&gt;StopServer()&lt;/code&gt; 方法来开启 / 停止 Server, &lt;code&gt;StartClient()&lt;/code&gt; / &lt;code&gt;StopClient()&lt;/code&gt; 方法来启动 / 停止 Client。我们可以新建一个 GameObject，
然后把下面脚本挂在它上面。脚本代码如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Networking&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;SimpleNetworkGUI&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MonoBehaviour&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isHaveNetworkRole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;isHaveNetworkRole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnDisconnected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NetworkMessage&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;isHaveNetworkRole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadedLevel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnGUI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isHaveNetworkRole&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Stop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;NetworkManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StopServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;NetworkManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StopClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;OnDisconnected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2f&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Start Server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;isHaveNetworkRole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NetworkManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2f&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Start Client&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NetworkManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MsgType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Disconnect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OnDisconnected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;isHaveNetworkRole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;关于 Demo 其他一些需要知道的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先，代码中利用了 NetworkManager 组件。我们可以把这个组件挂到挂有上面 UI 脚本的 GameObject 之上。&lt;/li&gt;
&lt;li&gt;为了演示效果，Demo 里面创建了一个Prefab， 这个 Prefab 会传递给上面的 NetworkManager 组件（Spawn Info 下的 Player Prefab）。当 Client 连接已经启动的 Server 的时候，Server 端会创建这个 Perfab 的实例。
这个 Prefab 比较特殊，它上面需要添加 &lt;strong&gt;NetworkIndentity&lt;/strong&gt; 组件，这样才能传递过去给 NetworkManager。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到这里，可能有的朋友有疑问。什么 Spawn？ NetworkIndentity 又是什么鬼？&lt;/p&gt;
&lt;h3&gt;UNet 中的 Spawn&lt;/h3&gt;
&lt;p&gt;换句话说，Spawn 就是网络对象实例的初始化这个行为，再换句话说就是创建网络对象。在 UNet 中用 Spawn 来描述，而不是用 Instantiate。&lt;/p&gt;
&lt;p&gt;UNet 是个以 Server 为主导的系统，所有的 Spawn 行为都要在 Server 端发生，通过调用 &lt;code&gt;NetworkServer.Spawn( GameObject go )&lt;/code&gt; 方法，产生的对象会在各个 Client 出现对应的实例。&lt;/p&gt;
&lt;h3&gt;网络对象与 NetworkIndentity&lt;/h3&gt;
&lt;p&gt;每个网络对象（Networked Object）都需要在根上带上 NetworkIndentity 组件。那 NetworkIndentity 组件是什么？ 大概是这个样子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它是标志对象网络身份的一个组件&lt;/li&gt;
&lt;li&gt;拥有系统用来跟踪对象的信息，比如 SenceId, NetworkID, AssetID 等&lt;/li&gt;
&lt;li&gt;所有需要 Spawn 的 Prefab 都必须在对象根上带有这个组件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对了，需要注意一点。带有 NetworkIndentity 组件的对象，在未 Spawn 之前是不可用的，Disabled 状态，即使在 Hierarchy 里面有它的实例也会自动被 Disabled.&lt;/p&gt;
&lt;h3&gt;NetworkManagerHUD 组件&lt;/h3&gt;
&lt;p&gt;为什么要提到这个组件呢。因为它也是一个 NetworkManager 管理的界面。它是 Unity 提供给我们的，提供比我们这篇文章所给的更加丰富的功能。平时开发调试的时候，建议使用这个控件。
引出 NetworkManagerHUD 组件也是这篇文章的目的。&lt;/p&gt;
&lt;p&gt;好了，这篇就到这里。Enjoy!&lt;/p&gt;</summary><category term="UNet"></category><category term="Unity"></category></entry><entry><title>UNet 0x03: NetworkManager 初见</title><link href="http://blog.shuiguzi.com/unet-0x03-networkmanager-chu-jian.html" rel="alternate"></link><updated>2015-08-10T16:05:00+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2015-08-10:unet-0x03-networkmanager-chu-jian.html</id><summary type="html">&lt;p&gt;阅读本章之前, 建议先阅读 &lt;a href="http://blog.shuiguzi.com/unet-0x01-wang-luo-lian-jie-de-jian-li.html"&gt;UNet 0x01: 网络连接的建立&lt;/a&gt; 和 &lt;a href="http://blog.shuiguzi.com/unet-0x02-fa-song-xiao-xi.html"&gt;UNet 0x02: 发送消息&lt;/a&gt; 这两篇文章。&lt;/p&gt;
&lt;p&gt;前两篇文章我们建立 Client / Server 间的连接的时候，手动配置了 Server 的端口和 Client 要连接的目标 Server 及其端口。这些都是在代码里面实现
的。这篇文章我们引入 UNet 提供的一个网络管理组件来达到同样的效果。这个组件的名字叫做 NetworkManager。&lt;/p&gt;
&lt;p&gt;NetworkManager 组件提供了很多功能，但是这篇文章只引入 NetworkManager 组件，不打算深入讲这个组件。下面是 NetworkManager 在 Inspector 里面的长相：&lt;/p&gt;
&lt;p&gt;&lt;img alt="networkmanager" src="images/UNet/NetworkManagerInspector.PNG" width="46.2%" /&gt;&lt;/p&gt;
&lt;p&gt;上图中 Network Info 部分就是就是配置 Server 地址及其端口的地方。&lt;/p&gt;
&lt;p&gt;接下来看看 NetworkManager 如何启动一个 Server / Client / Host。&lt;/p&gt;
&lt;h3&gt;利用 NetowrkManager 的方法替换之前代码&lt;/h3&gt;
&lt;p&gt;利用 NetworkManager 的方法替换之前的代码，大体为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;之前我们用 &lt;code&gt;NetworkServer.listen(port)&lt;/code&gt; 来启动一个 Server 并监听某个端口。NetworkManager 提供 &lt;code&gt;StartServer()&lt;/code&gt; 方法替代&lt;/li&gt;
&lt;li&gt;之前我们单独创建了 NetowrkClint 类的实例开创建 Client。 NetworkManager 提供 &lt;code&gt;StartClient()&lt;/code&gt; 方法替代&lt;/li&gt;
&lt;li&gt;如果想启动 Host (Server + Local Client)，NetworkManager 提供 &lt;code&gt;StartHost()&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;得到 NetworkManager 实例&lt;/h3&gt;
&lt;p&gt;NetworkManager 组件挂上 GameObject 之后我们可以像其他组件一同通过 &lt;code&gt;GetComponent&amp;lt;T&amp;gt;()&lt;/code&gt; 这个方法来得到其实例，但是这推荐使用 &lt;code&gt;NetworkManager.singleton&lt;/code&gt; 
来得到其实例。&lt;/p&gt;
&lt;h3&gt;为什么要使用 NetworkManager&lt;/h3&gt;
&lt;p&gt;我觉得大概有如下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NetworkManager 包装了很多信息的设置，提供统一的入口&lt;/li&gt;
&lt;li&gt;利用现成 NetworkManager 提供的功能，简化代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但总体上的目的还是简化，复用代码。&lt;/p&gt;
&lt;h3&gt;代码示例&lt;/h3&gt;
&lt;p&gt;下面代码和 &lt;a href="http://blog.shuiguzi.com/unet-0x02-fa-song-xiao-xi.html"&gt;UNet 0x02: 发送消息&lt;/a&gt; 一样，也是发送消息。功能上的区别就是下面代码中 Client 会每隔 5 秒自动发送消息给 Server。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Networking&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;ComBaseOnNetworkManager&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MonoBehaviour&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;NetworkClient&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Start&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;SetupServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;SetupClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deltaTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;SendMessageToServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetupServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NetworkServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;NetworkServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MsgType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OnMessageReceived&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;NetworkManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetupClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NetworkManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnMessageReceived&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NetworkMessage&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SERVER: {0}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MessageX&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SendMessageToServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MessageX&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageX&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NetworkMangerBase Sample&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello Rocky!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MsgType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码可以在这里找到：&lt;a href="https://github.com/wudixiaop/UNet/tree/master/Assets/103%20-%20introduce%20NetworkManager"&gt;Github 地址&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;新建一个 GameObject， 在它挂上上面的脚本，然后添加 NetworkManager 组件，然后运行项目。控制台会得到类似下面的输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="output" src="images/UNet/103Output.PNG" width="100%" /&gt;&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</summary><category term="UNet"></category><category term="Unity"></category></entry><entry><title>UNet 0x02: 发送消息</title><link href="http://blog.shuiguzi.com/unet-0x02-fa-song-xiao-xi.html" rel="alternate"></link><updated>2015-08-07T16:05:00+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2015-08-07:unet-0x02-fa-song-xiao-xi.html</id><summary type="html">&lt;p&gt;&lt;a href="http://blog.shuiguzi.com/unet-0x01-wang-luo-lian-jie-de-jian-li.html"&gt;上一篇文章&lt;/a&gt; 中介绍了如何在 UNet 中建立网络连接，接下来我们在这篇文章中说说建立连接之后怎么在 Client / Server 间发送消息。&lt;/p&gt;
&lt;p&gt;这篇文章涉及的是 UNet HLAPI 部分消息发送所涉及到一些概念，最后会给出一个示例代码。按之前的风格，我们继续来抱着问题讲述今天的主题。&lt;/p&gt;
&lt;p&gt;有两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UNet HLAPI 中消息怎么表示？&lt;/li&gt;
&lt;li&gt;UNet HLAPI 中消息怎么发送和接收？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;UNet HLAPI 中的消息&lt;/h3&gt;
&lt;p&gt;新的网路系统 UNet 提供了一个抽象类，叫做 &lt;code&gt;MessageBase&lt;/code&gt;, 它的原型大概是下面这样:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MessageBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// De-serialize the contents of the reader into this message&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Deserialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NetworkReader&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="c1"&gt;// Serialize the contents of this message into the writer&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NetworkWriter&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;MessageBase&lt;/code&gt; 提供了系列化/反序列化的功能，我们 &lt;strong&gt;需要通过继承这个类来自定义消息&lt;/strong&gt; 。所以一般情况下 UNet HLAPI 中的消息都是 &lt;code&gt;MessageBase&lt;/code&gt; 的子类。&lt;/p&gt;
&lt;p&gt;UNet 在 &lt;code&gt;UnityEngine.Networking.NetworkSystem&lt;/code&gt; 命名空间中提供了一些内建的类供我们使用，例如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EmptyMessage&lt;/li&gt;
&lt;li&gt;StringMessage&lt;/li&gt;
&lt;li&gt;IntegerMessage&lt;/li&gt;
&lt;li&gt;ErrorMessage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然我们也可以不适用内建的类，自己自定义新消息类。比如我们定义一个（我单纯的自认为）高大上的名字的类，叫做 &lt;code&gt;MessageX&lt;/code&gt;，继承自 &lt;code&gt;MessageBase&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Networking&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Customize message and Type&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;MessageX&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MessageBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;readonly&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;MsgType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MaxValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Use Field here, NOT Property&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Message &amp;#39;{0}&amp;#39; from &amp;#39;{1}&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里要说一下一个自定义消息类型的坑：&lt;strong&gt;要使用字段来代替属性&lt;/strong&gt;，如果使用了属性会导致接受不到发送的消息数据。&lt;/p&gt;
&lt;p&gt;错误的写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;MessageX&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MessageBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;正确的写法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;MessageX&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MessageBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个坑请注意下，以防掉入~~  &lt;/p&gt;
&lt;h3&gt;发送消息的 API&lt;/h3&gt;
&lt;p&gt;上小节，我们有了 &lt;code&gt;MessageX&lt;/code&gt; 这个高大上名字的消息，我们怎么发出去，然后怎么接受呢？&lt;/p&gt;
&lt;p&gt;先说发送。UNet 中下面几个方法都可以发送:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NetworkClient.Send( short msgType, MessageBase msg)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NetworkConnection.Send( short msgType, MessageBase msg)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NetworkServer.SendToAll( short msgType, MessageBase msg)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NetworkServer.SendToReady( short msgType, MessageBase msg)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NetworkServer.SendToClient( int connectionId, short msgType, MessageBase msg)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NetworkServer.SendUnreliableToAll( short msgType, MessageBase msg)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NetworkServer.SendUnreliableToReady( short msgType, MessageBase msg)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NetworkServer.SendToClientOfPlayer( GameObject player, short msgType, MessageBase msg)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各个方法用各自的用途，具体可以参照 &lt;a href="http://docs.unity3d.com/ScriptReference/Networking.NetworkClient.html"&gt;NetworkClient&lt;/a&gt;、
&lt;a href="http://docs.unity3d.com/ScriptReference/Networking.NetworkConnection.html"&gt;NetworkConnection&lt;/a&gt; 和 
&lt;a href="http://docs.unity3d.com/ScriptReference/Networking.NetworkServer.html"&gt;NetworkServer&lt;/a&gt; 官方 API 文档。&lt;/p&gt;
&lt;p&gt;本文章中将使用 &lt;code&gt;NetworkClient.Send(short msgType, MessageBase msg)&lt;/code&gt; 方法，在 Client 端给 Server 端发送消息。发送的代码示意：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;MessageX&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageX&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;messageInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fromInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MsgType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Send&lt;/code&gt; 方法中第二个参数是消息的实例，这个很明显，不需要特别解释。那第一个参数 msgType 又是什么的？ 看过上一篇文章 &lt;a href="http://blog.shuiguzi.com/unet-0x01-wang-luo-lian-jie-de-jian-li.html"&gt;UNet 0x01: 网络连接的建立&lt;/a&gt;
的朋友们可能马上就想起来在 &lt;strong&gt;事件注册 RegisterHandler&lt;/strong&gt; 小节中也有 msgType。对的，就是这个。消息接收就是通过事件注册的方式来处理。接收的示意代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 注册消息处理事件&lt;/span&gt;
&lt;span class="n"&gt;NetworkServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MsgType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OnMessageXReceived&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnMessageXReceived&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NetworkMessage&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;MessageX&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MessageX&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SERVER: {0}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面使用到了 &lt;code&gt;NetworkMessage.ReadMessage&amp;lt;T&amp;gt;()&lt;/code&gt; 方法来得到发送过来的 &lt;code&gt;MessageX&lt;/code&gt; 类型的消息。&lt;/p&gt;
&lt;h3&gt;将所有串联起来的示例&lt;/h3&gt;
&lt;p&gt;我们创建一个简单的 UI 如下&lt;/p&gt;
&lt;p&gt;&lt;img alt="UI" src="images/UNet/sendMessageUI.PNG" width="72%" /&gt;&lt;/p&gt;
&lt;p&gt;我们创建一个 &lt;code&gt;SendMessageX&lt;/code&gt; 类用来接收 UI 输入的文字，然后发送给 Server, 用 &lt;code&gt;Debug.log()&lt;/code&gt; 输出到控制台窗口。&lt;code&gt;SendMessageX&lt;/code&gt; 类的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Networking&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UI&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;SendMessageX&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MonoBehaviour&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;serverPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;InputField&lt;/span&gt; &lt;span class="n"&gt;messageInput&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;InputField&lt;/span&gt; &lt;span class="n"&gt;fromInput&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;SetupServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;SetupClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cp"&gt;#region Server&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetupServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NetworkServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;NetworkServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MsgType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OnConnected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;NetworkServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MsgType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OnMessageXReceived&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NetworkServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverPort&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Server Started&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Start Server failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnConnected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NetworkMessage&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A client connected!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnMessageXReceived&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NetworkMessage&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MessageX&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MessageX&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SERVER: {0}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cp"&gt;#endregion&lt;/span&gt;

    &lt;span class="cp"&gt;#region Client&lt;/span&gt;

    &lt;span class="n"&gt;NetworkClient&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SetupClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NetworkClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serverPort&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SendMesssageXToServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MessageX&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MessageX&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;messageInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;From&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fromInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MessageX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MsgType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CLIENT: {0}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mx&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cp"&gt;#endregion&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果将 &lt;code&gt;Remote Client&lt;/code&gt; 输入到 &lt;strong&gt;From&lt;/strong&gt;、&lt;code&gt;Hello World&lt;/code&gt; 输入到 &lt;strong&gt;Message&lt;/strong&gt; 输入框之后，点击 &lt;strong&gt;Send Message&lt;/strong&gt; 按钮，我们得到如下输出结果：&lt;/p&gt;
&lt;p&gt;&lt;img alt="sendMessageOutput" src="images/UNet/sendMessageOutput.PNG" width="88%" /&gt;&lt;/p&gt;
&lt;p&gt;所有代码可以在这里找到：&lt;a href="https://github.com/wudixiaop/UNet/tree/master/Assets/102%20-%20send%20message"&gt;https://github.com/wudixiaop/UNet/tree/master/Assets/102%20-%20send%20message&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</summary><category term="UNet"></category><category term="Unity"></category></entry><entry><title>UNet 0x01: 网络连接的建立</title><link href="http://blog.shuiguzi.com/unet-0x01-wang-luo-lian-jie-de-jian-li.html" rel="alternate"></link><updated>2015-08-06T16:43:00+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2015-08-06:unet-0x01-wang-luo-lian-jie-de-jian-li.html</id><summary type="html">&lt;p&gt;看到标题后，没接触过的朋友脑中可能会闪现出这样一个问题： UNet 是什么 ? 其实它是 Unity 5.1 版本新引入的网络系统。官方论坛里面称这个系统为 UNet, 那我们按照官方的习惯来。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.unity3d.com/Manual/UNetOverview.html"&gt;官方手册文档&lt;/a&gt; 介绍其主要有两类功能（按 API 抽象层次来分）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低层次 &lt;a href="http://docs.unity3d.com/Manual/UNetUsingTransport.html"&gt;NetworkTransport API&lt;/a&gt;， 适合于用来构建更复杂高级的多人游戏或者网络基础平台&lt;/li&gt;
&lt;li&gt;高层次的 High Level API，也叫做 HLAPI，建立在 NetworkTransport 之上。适合开发多人游戏&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这篇文章将只涉及 High Level API。我们的目的是建立（Client 于 Server 间的）网络连接。&lt;/p&gt;
&lt;h3&gt;UNet 的 Server / Client / Host&lt;/h3&gt;
&lt;p&gt;在 UNet 先系统中会出现 1 个 Server 和 n 个 Client (n &amp;gt;= 0)。当没有专门的 Server 的时候，其中一个 Client 会充当 Server 的作用，这个即是 Client 又是 Server 的端在 UNet 中
被称为 Host。 Host 在同一个进程里面执行 Server 和 Client, 这个 Client　有个专门的名字叫做 Local Client。它跟 Local Server 之间是通过 &lt;strong&gt;消息队列&lt;/strong&gt; 和 &lt;strong&gt;直接的函数调&lt;/strong&gt; 用来通信的。 &lt;/p&gt;
&lt;p&gt;Unity3d 网站上有张图能比较明显的表达 Server / Client / Local Client / Host 直接的关系，让我们把它偷过来。:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="NetworkHost" src="images/UNet/NetworkHost.png" width="78%" /&gt;&lt;/p&gt;
&lt;h3&gt;Server 创建&lt;/h3&gt;
&lt;p&gt;Unity 给我们提供了 &lt;a href="http://docs.unity3d.com/ScriptReference/Networking.NetworkServer.html"&gt;NetworkServer&lt;/a&gt; 类，他的静态方法 &lt;code&gt;Listen(int serverPort)&lt;/code&gt; 会打开一个端口监听。&lt;/p&gt;
&lt;p&gt;示例代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;NetworkServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listenPort&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Client 创建&lt;/h3&gt;
&lt;p&gt;从前面的途中我们知道有 Local Client 和 Remote Client 之分，他们的创建方法也是不一样的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local Client：使用 &lt;code&gt;ClientScene.ConnectLocalServer()&lt;/code&gt; 静态方法创建&lt;/li&gt;
&lt;li&gt;Remote Client：Unity 给我们提供过了 &lt;a href="http://docs.unity3d.com/ScriptReference/Networking.NetworkClient.html"&gt;NetworkClient&lt;/a&gt; 类来创建。类的实例就是 Remote Client。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Remote Client&lt;/span&gt;
&lt;span class="n"&gt;NetworkClient&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NetworkClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Local Client&lt;/span&gt;
&lt;span class="n"&gt;NetworkClient&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ClientScene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectLocalServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;事件注册 RegisterHandler&lt;/h3&gt;
&lt;p&gt;其实现在添加这节内容处在只是为了接下来代码答应的调试信息。NetworkServer 和 NetworkClient 类都有 &lt;code&gt;RegisterHandler(short msgType, Networking.NetworkMessageDelegate handler);&lt;/code&gt; 
方法，这个方法用来来注册对应消息的处理函数。它有两个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个参数 msgType 是个 short 类型，Unity 提供 &lt;a href="http://docs.unity3d.com/ScriptReference/Networking.MsgType.html"&gt;MsgType&lt;/a&gt; 类来得到所有内置的数值。
当然我们也可以自定义数值哦~~&lt;/li&gt;
&lt;li&gt;第二个参数 handler 是 NetworkMessageDelegate 类型，类型的原型是 &lt;strong&gt;delegate void NetworkMessageDelegate( Networking.NetworkMessage netMsg )&lt;/strong&gt;。
这是 C# 中的 delegate, 我们要提供的消息响应函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在本节例子中，我们在 Server 和 Client 端都注册 &lt;code&gt;MsgType.Connect&lt;/code&gt; 消息，然后其响应函数为 &lt;code&gt;OnConnected(NetworkMessage msg)&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnConnected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NetworkMessage&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do someting&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;代码&lt;/h3&gt;
&lt;p&gt;对了，在提供 sample 代码之前，需要说明一下，UNet 的类和其他类型都在 &lt;code&gt;UnityEngine.Networking&lt;/code&gt; 这个命名空间之下。&lt;/p&gt;
&lt;p&gt;Server 端的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Networking&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;SetupServer&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MonoBehaviour&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;listenPort&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ServerSetup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ServerSetup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NetworkServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listenPort&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;NetworkServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MsgType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OnConnected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnConnected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NetworkMessage&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Server: connection happen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Client 端的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Networking&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="nl"&gt;SetupClient&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MonoBehaviour&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isLocal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isLocal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;LocalClientSetup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ClientSetup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ClientSetup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NetworkClient&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;NetworkClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MsgType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OnConnected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;LocalClientSetup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;NetworkClient&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ClientScene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConnectLocalServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MsgType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OnConnected&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnConnected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NetworkMessage&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Client: connected to server {0}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们把上面两个脚本都挂在 GameObject 上, 设置 SetupClient 脚本的 isLocal 字段值为 false，然后运行。输出结果为：&lt;/p&gt;
&lt;p&gt;&lt;img alt="output" src="images/UNet/outputResult.PNG" width="88%" /&gt;&lt;/p&gt;
&lt;p&gt;代码的 Github 地址 &lt;a href="https://github.com/wudixiaop/UNet/tree/master/Assets/101%20-%20server%20and%20client"&gt;https://github.com/wudixiaop/UNet/tree/master/Assets/101%20-%20server%20and%20client&lt;/a&gt; 。&lt;/p&gt;</summary><category term="UNet"></category><category term="Unity"></category></entry><entry><title>在 Unity uGUI 中绘制圆形图片</title><link href="http://blog.shuiguzi.com/zai-unity-ugui-zhong-hui-zhi-yuan-xing-tu-pian.html" rel="alternate"></link><updated>2015-04-15T23:30:00+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2015-04-15:zai-unity-ugui-zhong-hui-zhi-yuan-xing-tu-pian.html</id><summary type="html">&lt;p&gt;最近项目需要在 Unity 的新 UI 系统中实现圆形头像的功能，之前想通过 Mask 控件的方式来实现，但是一番努力后毫无头绪，只能祭上shader了。&lt;/p&gt;
&lt;p&gt;大体的思路就是在一个空的 Object 上面挂上 RawImage 组件，组件的 Material 挂上本文中的 shader。截取的逻辑是选取图片正中心 (0.5, 0.5) 为圆的中心点，绘制图片在圆内的像素点为图片的像素，然后图片在圆外的像素点设置为 alpha 为 0 的点，
如 &lt;code&gt;(0, 0, 0, 0)&lt;/code&gt;。逻辑是在 fragment shader 里面实现(shader 代码中的&lt;code&gt;frag&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;下面直接放出 shader:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Shader&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sprites/Circle&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Properties&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;PerRendererData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;_MainTex&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sprite Texture&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;_Color&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tint&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_Center&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Center&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_RadiusScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Radius Scale&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
    &lt;span class="n"&gt;_HorizontalScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Horizontal Scale&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
    &lt;span class="n"&gt;_VerticalScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Vertical Scale&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;SubShader&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Tags&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;Queue&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Overlay&amp;quot;&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;IgnoreProjector&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;True&amp;quot;&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;RenderType&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Transparent&amp;quot;&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;PreviewType&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Plane&amp;quot;&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;CanUseSpriteAtlas&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;True&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Cull&lt;/span&gt; &lt;span class="n"&gt;Off&lt;/span&gt;
    &lt;span class="n"&gt;Lighting&lt;/span&gt; &lt;span class="n"&gt;Off&lt;/span&gt;
    &lt;span class="n"&gt;ZWrite&lt;/span&gt; &lt;span class="n"&gt;Off&lt;/span&gt;
    &lt;span class="n"&gt;Blend&lt;/span&gt; &lt;span class="n"&gt;One&lt;/span&gt; &lt;span class="n"&gt;OneMinusSrcAlpha&lt;/span&gt;

    &lt;span class="n"&gt;Pass&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;CGPROGRAM&lt;/span&gt;
      &lt;span class="cp"&gt;#pragma vertex vert&lt;/span&gt;
      &lt;span class="cp"&gt;#pragma fragment frag&lt;/span&gt;
      &lt;span class="cp"&gt;#pragma multi_compile _ PIXELSNAP_ON&lt;/span&gt;
      &lt;span class="cp"&gt;#include &amp;quot;UnityCG.cginc&amp;quot;&lt;/span&gt;

      &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;appdata_t&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;float4&lt;/span&gt; &lt;span class="nl"&gt;vertex&lt;/span&gt;   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;POSITION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;float4&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;COLOR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;float2&lt;/span&gt; &lt;span class="nl"&gt;texcoord&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TEXCOORD0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;v2f&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;float4&lt;/span&gt; &lt;span class="nl"&gt;vertex&lt;/span&gt;   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SV_POSITION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;fixed4&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;COLOR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;half2&lt;/span&gt; &lt;span class="nl"&gt;texcoord&lt;/span&gt;  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TEXCOORD0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="n"&gt;fixed4&lt;/span&gt; &lt;span class="n"&gt;_Color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_RadiusScale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;float4&lt;/span&gt; &lt;span class="n"&gt;_Center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_HorizontalScale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;_VerticalScale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="n"&gt;v2f&lt;/span&gt; &lt;span class="nf"&gt;vert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;appdata_t&lt;/span&gt; &lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v2f&lt;/span&gt; &lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vertex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UNITY_MATRIX_MVP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;texcoord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;texcoord&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="cp"&gt;#ifdef PIXELSNAP_ON&lt;/span&gt;
        &lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vertex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UnityPixelSnap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vertex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="cp"&gt;#endif&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;OUT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;sampler2D&lt;/span&gt; &lt;span class="n"&gt;_MainTex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="n"&gt;fixed4&lt;/span&gt; &lt;span class="n"&gt;frag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v2f&lt;/span&gt; &lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SV_Target&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fixed4&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tex2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_MainTex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;texcoord&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// adjust center and horizontal/verital scale&lt;/span&gt;
        &lt;span class="c1"&gt;//&lt;/span&gt;
        &lt;span class="n"&gt;float2&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_HorizontalScale&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_VerticalScale&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;_Center&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xy&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;texcoord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_RadiusScale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;

          &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ENDCG&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Github 地址： &lt;a href="https://raw.githubusercontent.com/wudixiaop/Nana/master/Shader/Sprite-Circle.shader"&gt;https://raw.githubusercontent.com/wudixiaop/Nana/master/Shader/Sprite-Circle.shader&lt;/a&gt;&lt;/p&gt;</summary><category term="Unity"></category></entry><entry><title>一起看看MonoBehavior内部事件执行顺序</title><link href="http://blog.shuiguzi.com/yi-qi-kan-kan-monobehaviornei-bu-shi-jian-zhi-xing-shun-xu.html" rel="alternate"></link><updated>2014-12-23T18:20:00+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2014-11-10:yi-qi-kan-kan-monobehaviornei-bu-shi-jian-zhi-xing-shun-xu.html</id><summary type="html">&lt;h3&gt;&lt;strong&gt;写在最前面&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;或许对于大部分Unity3D程序员来说，第一次接触脚本编写的时候都是从MonoBehavior开始的。MonoBehavior是Uniy3d脚本编写核心的类之一， 它预先定义好了很多事件，并且这些事件按照预先定义好顺序执行。了解MonoBehavior提供的这些事件的执行顺序，是我们进一步提高脚步编程和了解Unity3D内部逻辑的必要一步。我们先从MonoBehavior提供的事件说起。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;MonoBehavior都提供了什么事件&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;MonoBehavior提供的事件从编辑器到游戏结束都有涉及。下面列举一些常用的，更详列表可以参照&lt;a href="http://docs.unity3d.com/ScriptReference/MonoBehaviour.html"&gt;这个页面&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与编辑相关&lt;/strong&gt;&lt;br /&gt;
&lt;table class="table table-striped table-hover"&gt;
    &lt;theader&gt;
        &lt;th&gt;名称&lt;/th&gt;
        &lt;th&gt;注释&lt;/th&gt;
    &lt;/theader&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Reset&lt;/td&gt;
            &lt;td&gt;Reset to default values.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update相关&lt;/strong&gt;
&lt;table class="table table-striped table-hover"&gt;
    &lt;theader&gt;
        &lt;th&gt;名称&lt;/th&gt;
        &lt;th&gt;注释&lt;/th&gt;
    &lt;/theader&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;FixedUpdate&lt;/td&gt;
            &lt;td&gt;This function is called every fixed framerate frame, if the MonoBehaviour is enabled.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Update&lt;/td&gt;
            &lt;td&gt;Update is called every frame, if the MonoBehaviour is enabled.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;LateUpdate&lt;/td&gt;
            &lt;td&gt;LateUpdate is called every frame, if the Behaviour is enabled.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生命周期相关&lt;/strong&gt;&lt;br /&gt;
&lt;table class="table table-striped  table-hover"&gt;
    &lt;theader&gt;
        &lt;th&gt;名称&lt;/th&gt;
        &lt;th&gt;注释&lt;/th&gt;
    &lt;/theader&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Awake&lt;/td&gt;
            &lt;td&gt;Awake is called when the script instance is being loaded.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnEnable&lt;/td&gt;
            &lt;td&gt;This function is called when the object becomes enabled and active.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnDisable&lt;/td&gt;
            &lt;td&gt;This function is called when the behaviour becomes disabled () or inactive.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnDestroy&lt;/td&gt;
            &lt;td&gt;This function is called when the MonoBehaviour will be destroyed.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnApplicationFocus&lt;/td&gt;
            &lt;td&gt;Sent to all game objects when the player gets or loses focus.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnApplicationPause&lt;/td&gt;
            &lt;td&gt;Sent to all game objects when the player pauses.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnApplicationQuit&lt;/td&gt;
            &lt;td&gt;Sent to all game objects before the application is quit.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Start&lt;/td&gt;
            &lt;td&gt;Start is called on the frame when a script is enabled just before any of the Update methods is called the first time.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;物理系统相关&lt;/strong&gt;
&lt;table class="table table-striped  table-hover"&gt;
    &lt;theader&gt;
        &lt;th&gt;名称&lt;/th&gt;
        &lt;th&gt;注释&lt;/th&gt;
    &lt;/theader&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;OnCollisionEnter&lt;/td&gt;
            &lt;td&gt;OnCollisionEnter is called when this collider/rigidbody has begun touching another rigidbody/collider.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnCollisionStay&lt;/td&gt;
            &lt;td&gt;OnCollisionStay is called once per frame for every collider/rigidbody that is touching rigidbody/collider.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnCollisionExit&lt;/td&gt;
            &lt;td&gt;OnCollisionExit is called when this collider/rigidbody has stopped touching another rigidbody/collider.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnCollisionEnter2D&lt;/td&gt;
            &lt;td&gt;Sent when an incoming collider makes contact with this object's collider (2D physics only).&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnCollisionStay2D&lt;/td&gt;
            &lt;td&gt;Sent each frame where a collider on another object is touching this object's collider (2D physics only).&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnCollisionExit2D&lt;/td&gt;
            &lt;td&gt;Sent when a collider on another object stops touching this object's collider (2D physics only).&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnTriggerEnter&lt;/td&gt;
            &lt;td&gt;OnTriggerEnter is called when the Collider other enters the trigger.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnTriggerStay&lt;/td&gt;
            &lt;td&gt;OnTriggerStay is called once per frame for every Collider other that is touching the trigger.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnTriggerExit&lt;/td&gt;
            &lt;td&gt;OnTriggerExit is called when the Collider other has stopped touching the trigger.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnTriggerEnter2D&lt;/td&gt;
            &lt;td&gt;Sent when another object enters a trigger collider attached to this object (2D physics only).&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnTriggerStay2D&lt;/td&gt;
            &lt;td&gt;Sent each frame where another object is within a trigger collider attached to this object (2D physics only).&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnTriggerExit2D&lt;/td&gt;
            &lt;td&gt;Sent when another object leaves a trigger collider attached to this object (2D physics only).&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入系统相关&lt;/strong&gt;
&lt;table class="table table-striped  table-hover"&gt;
    &lt;theader&gt;
        &lt;th&gt;名称&lt;/th&gt;
        &lt;th&gt;注释&lt;/th&gt;
    &lt;/theader&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;OnMouseDown&lt;/td&gt;
            &lt;td&gt;OnMouseDown is called when the user has pressed the mouse button while over the GUIElement or Collider.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnMouseOver&lt;/td&gt;
            &lt;td&gt;OnMouseOver is called every frame while the mouse is over the GUIElement or Collider.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnMouseUp&lt;/td&gt;
            &lt;td&gt;OnMouseUp is called when the user has released the mouse button.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnMouseDrag&lt;/td&gt;
            &lt;td&gt;OnMouseDrag is called when the user has clicked on a GUIElement or Collider and is still holding down the mouse.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnMouseEnter&lt;/td&gt;
            &lt;td&gt;OnMouseEnter is called when the mouse entered the GUIElement or Collider.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnMouseExit&lt;/td&gt;
            &lt;td&gt;OnMouseExit is called when the mouse is not any longer over the GUIElement or Collider.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnMouseUpAsButton&lt;/td&gt;
            &lt;td&gt;OnMouseUpAsButton is only called when the mouse is released over the same GUIElement or Collider as it was pressed.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;渲染相关&lt;/strong&gt;
&lt;table class="table table-striped table-hover"&gt;
    &lt;theader&gt;
        &lt;th&gt;名称&lt;/th&gt;
        &lt;th&gt;注释&lt;/th&gt;
    &lt;/theader&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;OnPreCull&lt;/td&gt;
            &lt;td&gt;OnPreCull is called before a camera culls the scene.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnBecameVisible&lt;/td&gt;
            &lt;td&gt;OnBecameVisible is called when the renderer became visible by any camera.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnBecameInvisible&lt;/td&gt;
            &lt;td&gt;OnBecameInvisible is called when the renderer is no longer visible by any camera.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnWillRenderObject&lt;/td&gt;
            &lt;td&gt;OnWillRenderObject is called once for each camera if the object is visible.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnPreRender&lt;/td&gt;
            &lt;td&gt;OnPreRender is called before a camera starts rendering the scene.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnRenderObject&lt;/td&gt;
            &lt;td&gt;OnRenderObject is called after camera has rendered the scene.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnPostRender&lt;/td&gt;
            &lt;td&gt;OnPostRender is called after a camera finished rendering the scene.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnRenderImage&lt;/td&gt;
            &lt;td&gt;OnRenderImage is called after all rendering is complete to render image.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnGUI&lt;/td&gt;
            &lt;td&gt;OnGUI is called for rendering and handling GUI events.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;OnDrawGizmos&lt;/td&gt;
            &lt;td&gt;Implement OnDrawGizmos if you want to draw gizmos that are also pickable and always drawn.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;用图来表示MonoBehavior事件执行顺序&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="monobehavior" src="images/monobehaviour_flowchart.svg" width="100%"/&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;总结:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首次加载场景时执行&lt;strong&gt;Awake()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start()&lt;/strong&gt;只在第一帧才执行, &lt;strong&gt;Start()&lt;/strong&gt;在&lt;strong&gt;Awake()&lt;/strong&gt;之后执行&lt;/li&gt;
&lt;li&gt;Update的执行顺序是: &lt;strong&gt;FixedUpdate()&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Update()&lt;/strong&gt; -&amp;gt; &lt;strong&gt;LateUpdate()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;以每一帧的&lt;strong&gt;Update()&lt;/strong&gt;事件作分界线：  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Update()之前&lt;/strong&gt;：&lt;strong&gt;物理系统&lt;/strong&gt;和&lt;strong&gt;输入系统&lt;/strong&gt;相关事件先执行，如&lt;strong&gt;OnTriggerXXX&lt;/strong&gt;和&lt;strong&gt;OnMouseXXX&lt;/strong&gt;事件。此处&lt;strong&gt;XXX&lt;/strong&gt;是占位符，如&lt;strong&gt;OnTriggerXXX&lt;/strong&gt;可以代表&lt;strong&gt;OnTriggerEnter&lt;/strong&gt;或者&lt;strong&gt;OnTriggerExit&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update()之后&lt;/strong&gt;：&lt;strong&gt;场景渲染&lt;/strong&gt;和&lt;strong&gt;协程&lt;/strong&gt;，如&lt;strong&gt;OnRenderImage()&lt;/strong&gt;和&lt;strong&gt;yield WWW&lt;/strong&gt;语句&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协程中，除了&lt;strong&gt;WaitForFixedUpdate&lt;/strong&gt;是在&lt;strong&gt;FixedUpdate&lt;/strong&gt;之后，&lt;strong&gt;Update&lt;/strong&gt;之前执行，其他的都是在&lt;strong&gt;Update&lt;/strong&gt;之后，&lt;strong&gt;场景渲染&lt;/strong&gt;前执行&lt;/li&gt;
&lt;li&gt;GUI事件&lt;strong&gt;OnGUI&lt;/strong&gt;在场景渲染完之后执行&lt;/li&gt;
&lt;li&gt;当对象被销毁时执行&lt;strong&gt;OnDestory()&lt;/strong&gt;事件&lt;/li&gt;
&lt;li&gt;当游戏退出时执行&lt;strong&gt;OnApplicationQuit()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OnEnable()&lt;/strong&gt;和&lt;strong&gt;OnDisable()&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OnEnable()&lt;/strong&gt;只有在Object是Active的状态下才能用，一般是Object被初始化或者Object从disable到active过程中被调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OnDisable()&lt;/strong&gt;只有到Object从active到disable状态才被调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Unity"></category></entry><entry><title>关于 Unity 编辑器一些事儿</title><link href="http://blog.shuiguzi.com/guan-yu-unity-bian-ji-qi-yi-xie-shi-er.html" rel="alternate"></link><updated>2014-11-05T22:30:00+08:00</updated><author><name>Rocky Lai</name></author><id>tag:blog.shuiguzi.com,2014-11-05:guan-yu-unity-bian-ji-qi-yi-xie-shi-er.html</id><summary type="html">&lt;p&gt;这里描述下Unity3D编辑器使用过程中遇到的坑及其解决方法&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;事件一：Unity3d编辑器启动时默认打开最近一次打开的项目&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;默认设置中，Unity3D启动时会自动打开默认最近一次打开的项目。每当只想打开小项目，而偏偏上次打开过一个大项目时，这点让人很抓狂。&lt;br /&gt;
&lt;strong&gt;解决方法:&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在编辑器中打开&lt;strong&gt;Unity Preferences&lt;/strong&gt;窗口,通过 &lt;strong&gt;Edit-&amp;gt;Preferences...&lt;/strong&gt;打开&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;General&lt;/strong&gt;选项卡中把&lt;strong&gt;Always Show Project Wizard&lt;/strong&gt;勾选上&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;事件二：Project Wizard中最近打开项目记录删除不了&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;一直不明白为啥不让删除呢？  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法：&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法一：让项目地址失效&lt;/strong&gt;  &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;重名名项目文件夹&lt;/li&gt;
&lt;li&gt;把项目移动到别的文件夹&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法二：修改注册表&lt;/strong&gt;  &lt;blockquote&gt;
&lt;p&gt;删除 HKEY_CURRENT_USER\Software\Unity Technologies\Unity Editor 4.x 下面以 RecentlyUsedProjectPaths 开头的项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;以后继续补充...&lt;/p&gt;</summary><category term="Unity"></category></entry></feed>